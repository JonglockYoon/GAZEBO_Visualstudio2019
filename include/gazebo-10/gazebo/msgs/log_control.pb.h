// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_log_5fcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_log_5fcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_log_5fcontrol_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_log_5fcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_log_5fcontrol_2eproto;
namespace gazebo {
namespace msgs {
class LogControl;
class LogControlDefaultTypeInternal;
GZ_MSGS_VISIBLE extern LogControlDefaultTypeInternal _LogControl_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::LogControl* Arena::CreateMaybeMessage<::gazebo::msgs::LogControl>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE LogControl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.LogControl) */ {
 public:
  LogControl();
  virtual ~LogControl();

  LogControl(const LogControl& from);
  LogControl(LogControl&& from) noexcept
    : LogControl() {
    *this = ::std::move(from);
  }

  inline LogControl& operator=(const LogControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogControl& operator=(LogControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogControl* internal_default_instance() {
    return reinterpret_cast<const LogControl*>(
               &_LogControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogControl& a, LogControl& b) {
    a.Swap(&b);
  }
  inline void Swap(LogControl* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogControl* New() const final {
    return CreateMaybeMessage<LogControl>(nullptr);
  }

  LogControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogControl& from);
  void MergeFrom(const LogControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.LogControl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_log_5fcontrol_2eproto);
    return ::descriptor_table_log_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasePathFieldNumber = 4,
    kEncodingFieldNumber = 5,
    kStartFieldNumber = 1,
    kStopFieldNumber = 2,
    kPausedFieldNumber = 3,
    kRecordResourcesFieldNumber = 6,
  };
  // optional string base_path = 4;
  bool has_base_path() const;
  private:
  bool _internal_has_base_path() const;
  public:
  void clear_base_path();
  const std::string& base_path() const;
  void set_base_path(const std::string& value);
  void set_base_path(std::string&& value);
  void set_base_path(const char* value);
  void set_base_path(const char* value, size_t size);
  std::string* mutable_base_path();
  std::string* release_base_path();
  void set_allocated_base_path(std::string* base_path);
  private:
  const std::string& _internal_base_path() const;
  void _internal_set_base_path(const std::string& value);
  std::string* _internal_mutable_base_path();
  public:

  // optional string encoding = 5;
  bool has_encoding() const;
  private:
  bool _internal_has_encoding() const;
  public:
  void clear_encoding();
  const std::string& encoding() const;
  void set_encoding(const std::string& value);
  void set_encoding(std::string&& value);
  void set_encoding(const char* value);
  void set_encoding(const char* value, size_t size);
  std::string* mutable_encoding();
  std::string* release_encoding();
  void set_allocated_encoding(std::string* encoding);
  private:
  const std::string& _internal_encoding() const;
  void _internal_set_encoding(const std::string& value);
  std::string* _internal_mutable_encoding();
  public:

  // optional bool start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  bool start() const;
  void set_start(bool value);
  private:
  bool _internal_start() const;
  void _internal_set_start(bool value);
  public:

  // optional bool stop = 2;
  bool has_stop() const;
  private:
  bool _internal_has_stop() const;
  public:
  void clear_stop();
  bool stop() const;
  void set_stop(bool value);
  private:
  bool _internal_stop() const;
  void _internal_set_stop(bool value);
  public:

  // optional bool paused = 3;
  bool has_paused() const;
  private:
  bool _internal_has_paused() const;
  public:
  void clear_paused();
  bool paused() const;
  void set_paused(bool value);
  private:
  bool _internal_paused() const;
  void _internal_set_paused(bool value);
  public:

  // optional bool record_resources = 6;
  bool has_record_resources() const;
  private:
  bool _internal_has_record_resources() const;
  public:
  void clear_record_resources();
  bool record_resources() const;
  void set_record_resources(bool value);
  private:
  bool _internal_record_resources() const;
  void _internal_set_record_resources(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.LogControl)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_;
  bool start_;
  bool stop_;
  bool paused_;
  bool record_resources_;
  friend struct ::TableStruct_log_5fcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogControl

// optional bool start = 1;
inline bool LogControl::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogControl::has_start() const {
  return _internal_has_start();
}
inline void LogControl::clear_start() {
  start_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool LogControl::_internal_start() const {
  return start_;
}
inline bool LogControl::start() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogControl.start)
  return _internal_start();
}
inline void LogControl::_internal_set_start(bool value) {
  _has_bits_[0] |= 0x00000004u;
  start_ = value;
}
inline void LogControl::set_start(bool value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.LogControl.start)
}

// optional bool stop = 2;
inline bool LogControl::_internal_has_stop() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LogControl::has_stop() const {
  return _internal_has_stop();
}
inline void LogControl::clear_stop() {
  stop_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool LogControl::_internal_stop() const {
  return stop_;
}
inline bool LogControl::stop() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogControl.stop)
  return _internal_stop();
}
inline void LogControl::_internal_set_stop(bool value) {
  _has_bits_[0] |= 0x00000008u;
  stop_ = value;
}
inline void LogControl::set_stop(bool value) {
  _internal_set_stop(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.LogControl.stop)
}

// optional bool paused = 3;
inline bool LogControl::_internal_has_paused() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LogControl::has_paused() const {
  return _internal_has_paused();
}
inline void LogControl::clear_paused() {
  paused_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LogControl::_internal_paused() const {
  return paused_;
}
inline bool LogControl::paused() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogControl.paused)
  return _internal_paused();
}
inline void LogControl::_internal_set_paused(bool value) {
  _has_bits_[0] |= 0x00000010u;
  paused_ = value;
}
inline void LogControl::set_paused(bool value) {
  _internal_set_paused(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.LogControl.paused)
}

// optional string base_path = 4;
inline bool LogControl::_internal_has_base_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogControl::has_base_path() const {
  return _internal_has_base_path();
}
inline void LogControl::clear_base_path() {
  base_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogControl::base_path() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogControl.base_path)
  return _internal_base_path();
}
inline void LogControl::set_base_path(const std::string& value) {
  _internal_set_base_path(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.LogControl.base_path)
}
inline std::string* LogControl::mutable_base_path() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.LogControl.base_path)
  return _internal_mutable_base_path();
}
inline const std::string& LogControl::_internal_base_path() const {
  return base_path_.GetNoArena();
}
inline void LogControl::_internal_set_base_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  base_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogControl::set_base_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  base_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.LogControl.base_path)
}
inline void LogControl::set_base_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  base_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.LogControl.base_path)
}
inline void LogControl::set_base_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  base_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.LogControl.base_path)
}
inline std::string* LogControl::_internal_mutable_base_path() {
  _has_bits_[0] |= 0x00000001u;
  return base_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogControl::release_base_path() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.LogControl.base_path)
  if (!has_base_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return base_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogControl::set_allocated_base_path(std::string* base_path) {
  if (base_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  base_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_path);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.LogControl.base_path)
}

// optional string encoding = 5;
inline bool LogControl::_internal_has_encoding() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogControl::has_encoding() const {
  return _internal_has_encoding();
}
inline void LogControl::clear_encoding() {
  encoding_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LogControl::encoding() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogControl.encoding)
  return _internal_encoding();
}
inline void LogControl::set_encoding(const std::string& value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.LogControl.encoding)
}
inline std::string* LogControl::mutable_encoding() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.LogControl.encoding)
  return _internal_mutable_encoding();
}
inline const std::string& LogControl::_internal_encoding() const {
  return encoding_.GetNoArena();
}
inline void LogControl::_internal_set_encoding(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogControl::set_encoding(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  encoding_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.LogControl.encoding)
}
inline void LogControl::set_encoding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.LogControl.encoding)
}
inline void LogControl::set_encoding(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.LogControl.encoding)
}
inline std::string* LogControl::_internal_mutable_encoding() {
  _has_bits_[0] |= 0x00000002u;
  return encoding_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogControl::release_encoding() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.LogControl.encoding)
  if (!has_encoding()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return encoding_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogControl::set_allocated_encoding(std::string* encoding) {
  if (encoding != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  encoding_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoding);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.LogControl.encoding)
}

// optional bool record_resources = 6;
inline bool LogControl::_internal_has_record_resources() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LogControl::has_record_resources() const {
  return _internal_has_record_resources();
}
inline void LogControl::clear_record_resources() {
  record_resources_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool LogControl::_internal_record_resources() const {
  return record_resources_;
}
inline bool LogControl::record_resources() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogControl.record_resources)
  return _internal_record_resources();
}
inline void LogControl::_internal_set_record_resources(bool value) {
  _has_bits_[0] |= 0x00000020u;
  record_resources_ = value;
}
inline void LogControl::set_record_resources(bool value) {
  _internal_set_record_resources(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.LogControl.record_resources)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::LogControl> LogControlPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::LogControl const> ConstLogControlPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_log_5fcontrol_2eproto
