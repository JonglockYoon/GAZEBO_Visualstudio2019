// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cessna.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cessna_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cessna_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cessna_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_cessna_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cessna_2eproto;
namespace gazebo {
namespace msgs {
class Cessna;
class CessnaDefaultTypeInternal;
GZ_MSGS_VISIBLE extern CessnaDefaultTypeInternal _Cessna_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::Cessna* Arena::CreateMaybeMessage<::gazebo::msgs::Cessna>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE Cessna :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.Cessna) */ {
 public:
  Cessna();
  virtual ~Cessna();

  Cessna(const Cessna& from);
  Cessna(Cessna&& from) noexcept
    : Cessna() {
    *this = ::std::move(from);
  }

  inline Cessna& operator=(const Cessna& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cessna& operator=(Cessna&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cessna& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cessna* internal_default_instance() {
    return reinterpret_cast<const Cessna*>(
               &_Cessna_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Cessna& a, Cessna& b) {
    a.Swap(&b);
  }
  inline void Swap(Cessna* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cessna* New() const final {
    return CreateMaybeMessage<Cessna>(nullptr);
  }

  Cessna* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cessna>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cessna& from);
  void MergeFrom(const Cessna& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cessna* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.Cessna";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cessna_2eproto);
    return ::descriptor_table_cessna_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropellerSpeedFieldNumber = 1,
    kLeftAileronFieldNumber = 2,
    kLeftFlapFieldNumber = 3,
    kRightAileronFieldNumber = 4,
    kRightFlapFieldNumber = 5,
    kElevatorsFieldNumber = 6,
    kRudderFieldNumber = 7,
    kCmdPropellerSpeedFieldNumber = 8,
    kCmdLeftAileronFieldNumber = 9,
    kCmdLeftFlapFieldNumber = 10,
    kCmdRightAileronFieldNumber = 11,
    kCmdRightFlapFieldNumber = 12,
    kCmdElevatorsFieldNumber = 13,
    kCmdRudderFieldNumber = 14,
  };
  // optional float propeller_speed = 1;
  bool has_propeller_speed() const;
  private:
  bool _internal_has_propeller_speed() const;
  public:
  void clear_propeller_speed();
  float propeller_speed() const;
  void set_propeller_speed(float value);
  private:
  float _internal_propeller_speed() const;
  void _internal_set_propeller_speed(float value);
  public:

  // optional float left_aileron = 2;
  bool has_left_aileron() const;
  private:
  bool _internal_has_left_aileron() const;
  public:
  void clear_left_aileron();
  float left_aileron() const;
  void set_left_aileron(float value);
  private:
  float _internal_left_aileron() const;
  void _internal_set_left_aileron(float value);
  public:

  // optional float left_flap = 3;
  bool has_left_flap() const;
  private:
  bool _internal_has_left_flap() const;
  public:
  void clear_left_flap();
  float left_flap() const;
  void set_left_flap(float value);
  private:
  float _internal_left_flap() const;
  void _internal_set_left_flap(float value);
  public:

  // optional float right_aileron = 4;
  bool has_right_aileron() const;
  private:
  bool _internal_has_right_aileron() const;
  public:
  void clear_right_aileron();
  float right_aileron() const;
  void set_right_aileron(float value);
  private:
  float _internal_right_aileron() const;
  void _internal_set_right_aileron(float value);
  public:

  // optional float right_flap = 5;
  bool has_right_flap() const;
  private:
  bool _internal_has_right_flap() const;
  public:
  void clear_right_flap();
  float right_flap() const;
  void set_right_flap(float value);
  private:
  float _internal_right_flap() const;
  void _internal_set_right_flap(float value);
  public:

  // optional float elevators = 6;
  bool has_elevators() const;
  private:
  bool _internal_has_elevators() const;
  public:
  void clear_elevators();
  float elevators() const;
  void set_elevators(float value);
  private:
  float _internal_elevators() const;
  void _internal_set_elevators(float value);
  public:

  // optional float rudder = 7;
  bool has_rudder() const;
  private:
  bool _internal_has_rudder() const;
  public:
  void clear_rudder();
  float rudder() const;
  void set_rudder(float value);
  private:
  float _internal_rudder() const;
  void _internal_set_rudder(float value);
  public:

  // optional float cmd_propeller_speed = 8;
  bool has_cmd_propeller_speed() const;
  private:
  bool _internal_has_cmd_propeller_speed() const;
  public:
  void clear_cmd_propeller_speed();
  float cmd_propeller_speed() const;
  void set_cmd_propeller_speed(float value);
  private:
  float _internal_cmd_propeller_speed() const;
  void _internal_set_cmd_propeller_speed(float value);
  public:

  // optional float cmd_left_aileron = 9;
  bool has_cmd_left_aileron() const;
  private:
  bool _internal_has_cmd_left_aileron() const;
  public:
  void clear_cmd_left_aileron();
  float cmd_left_aileron() const;
  void set_cmd_left_aileron(float value);
  private:
  float _internal_cmd_left_aileron() const;
  void _internal_set_cmd_left_aileron(float value);
  public:

  // optional float cmd_left_flap = 10;
  bool has_cmd_left_flap() const;
  private:
  bool _internal_has_cmd_left_flap() const;
  public:
  void clear_cmd_left_flap();
  float cmd_left_flap() const;
  void set_cmd_left_flap(float value);
  private:
  float _internal_cmd_left_flap() const;
  void _internal_set_cmd_left_flap(float value);
  public:

  // optional float cmd_right_aileron = 11;
  bool has_cmd_right_aileron() const;
  private:
  bool _internal_has_cmd_right_aileron() const;
  public:
  void clear_cmd_right_aileron();
  float cmd_right_aileron() const;
  void set_cmd_right_aileron(float value);
  private:
  float _internal_cmd_right_aileron() const;
  void _internal_set_cmd_right_aileron(float value);
  public:

  // optional float cmd_right_flap = 12;
  bool has_cmd_right_flap() const;
  private:
  bool _internal_has_cmd_right_flap() const;
  public:
  void clear_cmd_right_flap();
  float cmd_right_flap() const;
  void set_cmd_right_flap(float value);
  private:
  float _internal_cmd_right_flap() const;
  void _internal_set_cmd_right_flap(float value);
  public:

  // optional float cmd_elevators = 13;
  bool has_cmd_elevators() const;
  private:
  bool _internal_has_cmd_elevators() const;
  public:
  void clear_cmd_elevators();
  float cmd_elevators() const;
  void set_cmd_elevators(float value);
  private:
  float _internal_cmd_elevators() const;
  void _internal_set_cmd_elevators(float value);
  public:

  // optional float cmd_rudder = 14;
  bool has_cmd_rudder() const;
  private:
  bool _internal_has_cmd_rudder() const;
  public:
  void clear_cmd_rudder();
  float cmd_rudder() const;
  void set_cmd_rudder(float value);
  private:
  float _internal_cmd_rudder() const;
  void _internal_set_cmd_rudder(float value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Cessna)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float propeller_speed_;
  float left_aileron_;
  float left_flap_;
  float right_aileron_;
  float right_flap_;
  float elevators_;
  float rudder_;
  float cmd_propeller_speed_;
  float cmd_left_aileron_;
  float cmd_left_flap_;
  float cmd_right_aileron_;
  float cmd_right_flap_;
  float cmd_elevators_;
  float cmd_rudder_;
  friend struct ::TableStruct_cessna_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cessna

// optional float propeller_speed = 1;
inline bool Cessna::_internal_has_propeller_speed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Cessna::has_propeller_speed() const {
  return _internal_has_propeller_speed();
}
inline void Cessna::clear_propeller_speed() {
  propeller_speed_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Cessna::_internal_propeller_speed() const {
  return propeller_speed_;
}
inline float Cessna::propeller_speed() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Cessna.propeller_speed)
  return _internal_propeller_speed();
}
inline void Cessna::_internal_set_propeller_speed(float value) {
  _has_bits_[0] |= 0x00000001u;
  propeller_speed_ = value;
}
inline void Cessna::set_propeller_speed(float value) {
  _internal_set_propeller_speed(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Cessna.propeller_speed)
}

// optional float left_aileron = 2;
inline bool Cessna::_internal_has_left_aileron() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Cessna::has_left_aileron() const {
  return _internal_has_left_aileron();
}
inline void Cessna::clear_left_aileron() {
  left_aileron_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Cessna::_internal_left_aileron() const {
  return left_aileron_;
}
inline float Cessna::left_aileron() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Cessna.left_aileron)
  return _internal_left_aileron();
}
inline void Cessna::_internal_set_left_aileron(float value) {
  _has_bits_[0] |= 0x00000002u;
  left_aileron_ = value;
}
inline void Cessna::set_left_aileron(float value) {
  _internal_set_left_aileron(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Cessna.left_aileron)
}

// optional float left_flap = 3;
inline bool Cessna::_internal_has_left_flap() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Cessna::has_left_flap() const {
  return _internal_has_left_flap();
}
inline void Cessna::clear_left_flap() {
  left_flap_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Cessna::_internal_left_flap() const {
  return left_flap_;
}
inline float Cessna::left_flap() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Cessna.left_flap)
  return _internal_left_flap();
}
inline void Cessna::_internal_set_left_flap(float value) {
  _has_bits_[0] |= 0x00000004u;
  left_flap_ = value;
}
inline void Cessna::set_left_flap(float value) {
  _internal_set_left_flap(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Cessna.left_flap)
}

// optional float right_aileron = 4;
inline bool Cessna::_internal_has_right_aileron() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Cessna::has_right_aileron() const {
  return _internal_has_right_aileron();
}
inline void Cessna::clear_right_aileron() {
  right_aileron_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Cessna::_internal_right_aileron() const {
  return right_aileron_;
}
inline float Cessna::right_aileron() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Cessna.right_aileron)
  return _internal_right_aileron();
}
inline void Cessna::_internal_set_right_aileron(float value) {
  _has_bits_[0] |= 0x00000008u;
  right_aileron_ = value;
}
inline void Cessna::set_right_aileron(float value) {
  _internal_set_right_aileron(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Cessna.right_aileron)
}

// optional float right_flap = 5;
inline bool Cessna::_internal_has_right_flap() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Cessna::has_right_flap() const {
  return _internal_has_right_flap();
}
inline void Cessna::clear_right_flap() {
  right_flap_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Cessna::_internal_right_flap() const {
  return right_flap_;
}
inline float Cessna::right_flap() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Cessna.right_flap)
  return _internal_right_flap();
}
inline void Cessna::_internal_set_right_flap(float value) {
  _has_bits_[0] |= 0x00000010u;
  right_flap_ = value;
}
inline void Cessna::set_right_flap(float value) {
  _internal_set_right_flap(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Cessna.right_flap)
}

// optional float elevators = 6;
inline bool Cessna::_internal_has_elevators() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Cessna::has_elevators() const {
  return _internal_has_elevators();
}
inline void Cessna::clear_elevators() {
  elevators_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Cessna::_internal_elevators() const {
  return elevators_;
}
inline float Cessna::elevators() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Cessna.elevators)
  return _internal_elevators();
}
inline void Cessna::_internal_set_elevators(float value) {
  _has_bits_[0] |= 0x00000020u;
  elevators_ = value;
}
inline void Cessna::set_elevators(float value) {
  _internal_set_elevators(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Cessna.elevators)
}

// optional float rudder = 7;
inline bool Cessna::_internal_has_rudder() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Cessna::has_rudder() const {
  return _internal_has_rudder();
}
inline void Cessna::clear_rudder() {
  rudder_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Cessna::_internal_rudder() const {
  return rudder_;
}
inline float Cessna::rudder() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Cessna.rudder)
  return _internal_rudder();
}
inline void Cessna::_internal_set_rudder(float value) {
  _has_bits_[0] |= 0x00000040u;
  rudder_ = value;
}
inline void Cessna::set_rudder(float value) {
  _internal_set_rudder(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Cessna.rudder)
}

// optional float cmd_propeller_speed = 8;
inline bool Cessna::_internal_has_cmd_propeller_speed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Cessna::has_cmd_propeller_speed() const {
  return _internal_has_cmd_propeller_speed();
}
inline void Cessna::clear_cmd_propeller_speed() {
  cmd_propeller_speed_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Cessna::_internal_cmd_propeller_speed() const {
  return cmd_propeller_speed_;
}
inline float Cessna::cmd_propeller_speed() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Cessna.cmd_propeller_speed)
  return _internal_cmd_propeller_speed();
}
inline void Cessna::_internal_set_cmd_propeller_speed(float value) {
  _has_bits_[0] |= 0x00000080u;
  cmd_propeller_speed_ = value;
}
inline void Cessna::set_cmd_propeller_speed(float value) {
  _internal_set_cmd_propeller_speed(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Cessna.cmd_propeller_speed)
}

// optional float cmd_left_aileron = 9;
inline bool Cessna::_internal_has_cmd_left_aileron() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Cessna::has_cmd_left_aileron() const {
  return _internal_has_cmd_left_aileron();
}
inline void Cessna::clear_cmd_left_aileron() {
  cmd_left_aileron_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float Cessna::_internal_cmd_left_aileron() const {
  return cmd_left_aileron_;
}
inline float Cessna::cmd_left_aileron() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Cessna.cmd_left_aileron)
  return _internal_cmd_left_aileron();
}
inline void Cessna::_internal_set_cmd_left_aileron(float value) {
  _has_bits_[0] |= 0x00000100u;
  cmd_left_aileron_ = value;
}
inline void Cessna::set_cmd_left_aileron(float value) {
  _internal_set_cmd_left_aileron(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Cessna.cmd_left_aileron)
}

// optional float cmd_left_flap = 10;
inline bool Cessna::_internal_has_cmd_left_flap() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Cessna::has_cmd_left_flap() const {
  return _internal_has_cmd_left_flap();
}
inline void Cessna::clear_cmd_left_flap() {
  cmd_left_flap_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float Cessna::_internal_cmd_left_flap() const {
  return cmd_left_flap_;
}
inline float Cessna::cmd_left_flap() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Cessna.cmd_left_flap)
  return _internal_cmd_left_flap();
}
inline void Cessna::_internal_set_cmd_left_flap(float value) {
  _has_bits_[0] |= 0x00000200u;
  cmd_left_flap_ = value;
}
inline void Cessna::set_cmd_left_flap(float value) {
  _internal_set_cmd_left_flap(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Cessna.cmd_left_flap)
}

// optional float cmd_right_aileron = 11;
inline bool Cessna::_internal_has_cmd_right_aileron() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Cessna::has_cmd_right_aileron() const {
  return _internal_has_cmd_right_aileron();
}
inline void Cessna::clear_cmd_right_aileron() {
  cmd_right_aileron_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float Cessna::_internal_cmd_right_aileron() const {
  return cmd_right_aileron_;
}
inline float Cessna::cmd_right_aileron() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Cessna.cmd_right_aileron)
  return _internal_cmd_right_aileron();
}
inline void Cessna::_internal_set_cmd_right_aileron(float value) {
  _has_bits_[0] |= 0x00000400u;
  cmd_right_aileron_ = value;
}
inline void Cessna::set_cmd_right_aileron(float value) {
  _internal_set_cmd_right_aileron(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Cessna.cmd_right_aileron)
}

// optional float cmd_right_flap = 12;
inline bool Cessna::_internal_has_cmd_right_flap() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Cessna::has_cmd_right_flap() const {
  return _internal_has_cmd_right_flap();
}
inline void Cessna::clear_cmd_right_flap() {
  cmd_right_flap_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float Cessna::_internal_cmd_right_flap() const {
  return cmd_right_flap_;
}
inline float Cessna::cmd_right_flap() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Cessna.cmd_right_flap)
  return _internal_cmd_right_flap();
}
inline void Cessna::_internal_set_cmd_right_flap(float value) {
  _has_bits_[0] |= 0x00000800u;
  cmd_right_flap_ = value;
}
inline void Cessna::set_cmd_right_flap(float value) {
  _internal_set_cmd_right_flap(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Cessna.cmd_right_flap)
}

// optional float cmd_elevators = 13;
inline bool Cessna::_internal_has_cmd_elevators() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Cessna::has_cmd_elevators() const {
  return _internal_has_cmd_elevators();
}
inline void Cessna::clear_cmd_elevators() {
  cmd_elevators_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float Cessna::_internal_cmd_elevators() const {
  return cmd_elevators_;
}
inline float Cessna::cmd_elevators() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Cessna.cmd_elevators)
  return _internal_cmd_elevators();
}
inline void Cessna::_internal_set_cmd_elevators(float value) {
  _has_bits_[0] |= 0x00001000u;
  cmd_elevators_ = value;
}
inline void Cessna::set_cmd_elevators(float value) {
  _internal_set_cmd_elevators(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Cessna.cmd_elevators)
}

// optional float cmd_rudder = 14;
inline bool Cessna::_internal_has_cmd_rudder() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Cessna::has_cmd_rudder() const {
  return _internal_has_cmd_rudder();
}
inline void Cessna::clear_cmd_rudder() {
  cmd_rudder_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float Cessna::_internal_cmd_rudder() const {
  return cmd_rudder_;
}
inline float Cessna::cmd_rudder() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Cessna.cmd_rudder)
  return _internal_cmd_rudder();
}
inline void Cessna::_internal_set_cmd_rudder(float value) {
  _has_bits_[0] |= 0x00002000u;
  cmd_rudder_ = value;
}
inline void Cessna::set_cmd_rudder(float value) {
  _internal_set_cmd_rudder(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Cessna.cmd_rudder)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::Cessna> CessnaPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::Cessna const> ConstCessnaPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cessna_2eproto
