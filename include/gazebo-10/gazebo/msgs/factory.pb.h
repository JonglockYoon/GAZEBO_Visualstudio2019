// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: factory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_factory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_factory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pose.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_factory_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_factory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_factory_2eproto;
namespace gazebo {
namespace msgs {
class Factory;
class FactoryDefaultTypeInternal;
GZ_MSGS_VISIBLE extern FactoryDefaultTypeInternal _Factory_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::Factory* Arena::CreateMaybeMessage<::gazebo::msgs::Factory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE Factory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.Factory) */ {
 public:
  Factory();
  virtual ~Factory();

  Factory(const Factory& from);
  Factory(Factory&& from) noexcept
    : Factory() {
    *this = ::std::move(from);
  }

  inline Factory& operator=(const Factory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Factory& operator=(Factory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Factory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Factory* internal_default_instance() {
    return reinterpret_cast<const Factory*>(
               &_Factory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Factory& a, Factory& b) {
    a.Swap(&b);
  }
  inline void Swap(Factory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Factory* New() const final {
    return CreateMaybeMessage<Factory>(nullptr);
  }

  Factory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Factory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Factory& from);
  void MergeFrom(const Factory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Factory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.Factory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_factory_2eproto);
    return ::descriptor_table_factory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSdfFieldNumber = 1,
    kSdfFilenameFieldNumber = 2,
    kEditNameFieldNumber = 4,
    kCloneModelNameFieldNumber = 5,
    kPoseFieldNumber = 3,
    kAllowRenamingFieldNumber = 6,
  };
  // optional string sdf = 1;
  bool has_sdf() const;
  private:
  bool _internal_has_sdf() const;
  public:
  void clear_sdf();
  const std::string& sdf() const;
  void set_sdf(const std::string& value);
  void set_sdf(std::string&& value);
  void set_sdf(const char* value);
  void set_sdf(const char* value, size_t size);
  std::string* mutable_sdf();
  std::string* release_sdf();
  void set_allocated_sdf(std::string* sdf);
  private:
  const std::string& _internal_sdf() const;
  void _internal_set_sdf(const std::string& value);
  std::string* _internal_mutable_sdf();
  public:

  // optional string sdf_filename = 2;
  bool has_sdf_filename() const;
  private:
  bool _internal_has_sdf_filename() const;
  public:
  void clear_sdf_filename();
  const std::string& sdf_filename() const;
  void set_sdf_filename(const std::string& value);
  void set_sdf_filename(std::string&& value);
  void set_sdf_filename(const char* value);
  void set_sdf_filename(const char* value, size_t size);
  std::string* mutable_sdf_filename();
  std::string* release_sdf_filename();
  void set_allocated_sdf_filename(std::string* sdf_filename);
  private:
  const std::string& _internal_sdf_filename() const;
  void _internal_set_sdf_filename(const std::string& value);
  std::string* _internal_mutable_sdf_filename();
  public:

  // optional string edit_name = 4;
  bool has_edit_name() const;
  private:
  bool _internal_has_edit_name() const;
  public:
  void clear_edit_name();
  const std::string& edit_name() const;
  void set_edit_name(const std::string& value);
  void set_edit_name(std::string&& value);
  void set_edit_name(const char* value);
  void set_edit_name(const char* value, size_t size);
  std::string* mutable_edit_name();
  std::string* release_edit_name();
  void set_allocated_edit_name(std::string* edit_name);
  private:
  const std::string& _internal_edit_name() const;
  void _internal_set_edit_name(const std::string& value);
  std::string* _internal_mutable_edit_name();
  public:

  // optional string clone_model_name = 5;
  bool has_clone_model_name() const;
  private:
  bool _internal_has_clone_model_name() const;
  public:
  void clear_clone_model_name();
  const std::string& clone_model_name() const;
  void set_clone_model_name(const std::string& value);
  void set_clone_model_name(std::string&& value);
  void set_clone_model_name(const char* value);
  void set_clone_model_name(const char* value, size_t size);
  std::string* mutable_clone_model_name();
  std::string* release_clone_model_name();
  void set_allocated_clone_model_name(std::string* clone_model_name);
  private:
  const std::string& _internal_clone_model_name() const;
  void _internal_set_clone_model_name(const std::string& value);
  std::string* _internal_mutable_clone_model_name();
  public:

  // optional .gazebo.msgs.Pose pose = 3;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::gazebo::msgs::Pose& pose() const;
  ::gazebo::msgs::Pose* release_pose();
  ::gazebo::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gazebo::msgs::Pose* pose);
  private:
  const ::gazebo::msgs::Pose& _internal_pose() const;
  ::gazebo::msgs::Pose* _internal_mutable_pose();
  public:

  // optional bool allow_renaming = 6 [default = true];
  bool has_allow_renaming() const;
  private:
  bool _internal_has_allow_renaming() const;
  public:
  void clear_allow_renaming();
  bool allow_renaming() const;
  void set_allow_renaming(bool value);
  private:
  bool _internal_allow_renaming() const;
  void _internal_set_allow_renaming(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Factory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdf_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clone_model_name_;
  ::gazebo::msgs::Pose* pose_;
  bool allow_renaming_;
  friend struct ::TableStruct_factory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Factory

// optional string sdf = 1;
inline bool Factory::_internal_has_sdf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Factory::has_sdf() const {
  return _internal_has_sdf();
}
inline void Factory::clear_sdf() {
  sdf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Factory::sdf() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Factory.sdf)
  return _internal_sdf();
}
inline void Factory::set_sdf(const std::string& value) {
  _internal_set_sdf(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Factory.sdf)
}
inline std::string* Factory::mutable_sdf() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Factory.sdf)
  return _internal_mutable_sdf();
}
inline const std::string& Factory::_internal_sdf() const {
  return sdf_.GetNoArena();
}
inline void Factory::_internal_set_sdf(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sdf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Factory::set_sdf(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sdf_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.Factory.sdf)
}
inline void Factory::set_sdf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sdf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.Factory.sdf)
}
inline void Factory::set_sdf(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sdf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.Factory.sdf)
}
inline std::string* Factory::_internal_mutable_sdf() {
  _has_bits_[0] |= 0x00000001u;
  return sdf_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Factory::release_sdf() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Factory.sdf)
  if (!has_sdf()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sdf_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Factory::set_allocated_sdf(std::string* sdf) {
  if (sdf != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sdf_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdf);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Factory.sdf)
}

// optional string sdf_filename = 2;
inline bool Factory::_internal_has_sdf_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Factory::has_sdf_filename() const {
  return _internal_has_sdf_filename();
}
inline void Factory::clear_sdf_filename() {
  sdf_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Factory::sdf_filename() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Factory.sdf_filename)
  return _internal_sdf_filename();
}
inline void Factory::set_sdf_filename(const std::string& value) {
  _internal_set_sdf_filename(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Factory.sdf_filename)
}
inline std::string* Factory::mutable_sdf_filename() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Factory.sdf_filename)
  return _internal_mutable_sdf_filename();
}
inline const std::string& Factory::_internal_sdf_filename() const {
  return sdf_filename_.GetNoArena();
}
inline void Factory::_internal_set_sdf_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sdf_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Factory::set_sdf_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sdf_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.Factory.sdf_filename)
}
inline void Factory::set_sdf_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sdf_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.Factory.sdf_filename)
}
inline void Factory::set_sdf_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sdf_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.Factory.sdf_filename)
}
inline std::string* Factory::_internal_mutable_sdf_filename() {
  _has_bits_[0] |= 0x00000002u;
  return sdf_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Factory::release_sdf_filename() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Factory.sdf_filename)
  if (!has_sdf_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sdf_filename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Factory::set_allocated_sdf_filename(std::string* sdf_filename) {
  if (sdf_filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sdf_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdf_filename);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Factory.sdf_filename)
}

// optional .gazebo.msgs.Pose pose = 3;
inline bool Factory::_internal_has_pose() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || pose_ != nullptr);
  return value;
}
inline bool Factory::has_pose() const {
  return _internal_has_pose();
}
inline const ::gazebo::msgs::Pose& Factory::_internal_pose() const {
  const ::gazebo::msgs::Pose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Pose*>(
      &::gazebo::msgs::_Pose_default_instance_);
}
inline const ::gazebo::msgs::Pose& Factory::pose() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Factory.pose)
  return _internal_pose();
}
inline ::gazebo::msgs::Pose* Factory::release_pose() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Factory.pose)
  _has_bits_[0] &= ~0x00000010u;
  ::gazebo::msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Pose* Factory::_internal_mutable_pose() {
  _has_bits_[0] |= 0x00000010u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  return pose_;
}
inline ::gazebo::msgs::Pose* Factory::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Factory.pose)
  return _internal_mutable_pose();
}
inline void Factory::set_allocated_pose(::gazebo::msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Factory.pose)
}

// optional string edit_name = 4;
inline bool Factory::_internal_has_edit_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Factory::has_edit_name() const {
  return _internal_has_edit_name();
}
inline void Factory::clear_edit_name() {
  edit_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Factory::edit_name() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Factory.edit_name)
  return _internal_edit_name();
}
inline void Factory::set_edit_name(const std::string& value) {
  _internal_set_edit_name(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Factory.edit_name)
}
inline std::string* Factory::mutable_edit_name() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Factory.edit_name)
  return _internal_mutable_edit_name();
}
inline const std::string& Factory::_internal_edit_name() const {
  return edit_name_.GetNoArena();
}
inline void Factory::_internal_set_edit_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  edit_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Factory::set_edit_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  edit_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.Factory.edit_name)
}
inline void Factory::set_edit_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  edit_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.Factory.edit_name)
}
inline void Factory::set_edit_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  edit_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.Factory.edit_name)
}
inline std::string* Factory::_internal_mutable_edit_name() {
  _has_bits_[0] |= 0x00000004u;
  return edit_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Factory::release_edit_name() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Factory.edit_name)
  if (!has_edit_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return edit_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Factory::set_allocated_edit_name(std::string* edit_name) {
  if (edit_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  edit_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_name);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Factory.edit_name)
}

// optional string clone_model_name = 5;
inline bool Factory::_internal_has_clone_model_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Factory::has_clone_model_name() const {
  return _internal_has_clone_model_name();
}
inline void Factory::clear_clone_model_name() {
  clone_model_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Factory::clone_model_name() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Factory.clone_model_name)
  return _internal_clone_model_name();
}
inline void Factory::set_clone_model_name(const std::string& value) {
  _internal_set_clone_model_name(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Factory.clone_model_name)
}
inline std::string* Factory::mutable_clone_model_name() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Factory.clone_model_name)
  return _internal_mutable_clone_model_name();
}
inline const std::string& Factory::_internal_clone_model_name() const {
  return clone_model_name_.GetNoArena();
}
inline void Factory::_internal_set_clone_model_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  clone_model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Factory::set_clone_model_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  clone_model_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.Factory.clone_model_name)
}
inline void Factory::set_clone_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  clone_model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.Factory.clone_model_name)
}
inline void Factory::set_clone_model_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  clone_model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.Factory.clone_model_name)
}
inline std::string* Factory::_internal_mutable_clone_model_name() {
  _has_bits_[0] |= 0x00000008u;
  return clone_model_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Factory::release_clone_model_name() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Factory.clone_model_name)
  if (!has_clone_model_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return clone_model_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Factory::set_allocated_clone_model_name(std::string* clone_model_name) {
  if (clone_model_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  clone_model_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clone_model_name);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Factory.clone_model_name)
}

// optional bool allow_renaming = 6 [default = true];
inline bool Factory::_internal_has_allow_renaming() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Factory::has_allow_renaming() const {
  return _internal_has_allow_renaming();
}
inline void Factory::clear_allow_renaming() {
  allow_renaming_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Factory::_internal_allow_renaming() const {
  return allow_renaming_;
}
inline bool Factory::allow_renaming() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Factory.allow_renaming)
  return _internal_allow_renaming();
}
inline void Factory::_internal_set_allow_renaming(bool value) {
  _has_bits_[0] |= 0x00000020u;
  allow_renaming_ = value;
}
inline void Factory::set_allow_renaming(bool value) {
  _internal_set_allow_renaming(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Factory.allow_renaming)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::Factory> FactoryPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::Factory const> ConstFactoryPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_factory_2eproto
