// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: track_visual.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_track_5fvisual_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_track_5fvisual_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_track_5fvisual_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_track_5fvisual_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_track_5fvisual_2eproto;
namespace gazebo {
namespace msgs {
class TrackVisual;
class TrackVisualDefaultTypeInternal;
GZ_MSGS_VISIBLE extern TrackVisualDefaultTypeInternal _TrackVisual_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::TrackVisual* Arena::CreateMaybeMessage<::gazebo::msgs::TrackVisual>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE TrackVisual :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.TrackVisual) */ {
 public:
  TrackVisual();
  virtual ~TrackVisual();

  TrackVisual(const TrackVisual& from);
  TrackVisual(TrackVisual&& from) noexcept
    : TrackVisual() {
    *this = ::std::move(from);
  }

  inline TrackVisual& operator=(const TrackVisual& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackVisual& operator=(TrackVisual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackVisual& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackVisual* internal_default_instance() {
    return reinterpret_cast<const TrackVisual*>(
               &_TrackVisual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrackVisual& a, TrackVisual& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackVisual* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackVisual* New() const final {
    return CreateMaybeMessage<TrackVisual>(nullptr);
  }

  TrackVisual* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackVisual>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackVisual& from);
  void MergeFrom(const TrackVisual& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackVisual* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.TrackVisual";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_track_5fvisual_2eproto);
    return ::descriptor_table_track_5fvisual_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kXyzFieldNumber = 8,
    kMinDistFieldNumber = 4,
    kMaxDistFieldNumber = 5,
    kIdFieldNumber = 2,
    kInheritOrientationFieldNumber = 3,
    kStaticFieldNumber = 6,
    kUseModelFrameFieldNumber = 7,
    kInheritYawFieldNumber = 9,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .gazebo.msgs.Vector3d xyz = 8;
  bool has_xyz() const;
  private:
  bool _internal_has_xyz() const;
  public:
  void clear_xyz();
  const ::gazebo::msgs::Vector3d& xyz() const;
  ::gazebo::msgs::Vector3d* release_xyz();
  ::gazebo::msgs::Vector3d* mutable_xyz();
  void set_allocated_xyz(::gazebo::msgs::Vector3d* xyz);
  private:
  const ::gazebo::msgs::Vector3d& _internal_xyz() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_xyz();
  public:

  // optional double min_dist = 4;
  bool has_min_dist() const;
  private:
  bool _internal_has_min_dist() const;
  public:
  void clear_min_dist();
  double min_dist() const;
  void set_min_dist(double value);
  private:
  double _internal_min_dist() const;
  void _internal_set_min_dist(double value);
  public:

  // optional double max_dist = 5;
  bool has_max_dist() const;
  private:
  bool _internal_has_max_dist() const;
  public:
  void clear_max_dist();
  double max_dist() const;
  void set_max_dist(double value);
  private:
  double _internal_max_dist() const;
  void _internal_set_max_dist(double value);
  public:

  // optional uint32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool inherit_orientation = 3;
  bool has_inherit_orientation() const;
  private:
  bool _internal_has_inherit_orientation() const;
  public:
  void clear_inherit_orientation();
  bool inherit_orientation() const;
  void set_inherit_orientation(bool value);
  private:
  bool _internal_inherit_orientation() const;
  void _internal_set_inherit_orientation(bool value);
  public:

  // optional bool static = 6;
  bool has_static_() const;
  private:
  bool _internal_has_static_() const;
  public:
  void clear_static_();
  bool static_() const;
  void set_static_(bool value);
  private:
  bool _internal_static_() const;
  void _internal_set_static_(bool value);
  public:

  // optional bool use_model_frame = 7;
  bool has_use_model_frame() const;
  private:
  bool _internal_has_use_model_frame() const;
  public:
  void clear_use_model_frame();
  bool use_model_frame() const;
  void set_use_model_frame(bool value);
  private:
  bool _internal_use_model_frame() const;
  void _internal_set_use_model_frame(bool value);
  public:

  // optional bool inherit_yaw = 9;
  bool has_inherit_yaw() const;
  private:
  bool _internal_has_inherit_yaw() const;
  public:
  void clear_inherit_yaw();
  bool inherit_yaw() const;
  void set_inherit_yaw(bool value);
  private:
  bool _internal_inherit_yaw() const;
  void _internal_set_inherit_yaw(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.TrackVisual)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::gazebo::msgs::Vector3d* xyz_;
  double min_dist_;
  double max_dist_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool inherit_orientation_;
  bool static__;
  bool use_model_frame_;
  bool inherit_yaw_;
  friend struct ::TableStruct_track_5fvisual_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackVisual

// required string name = 1;
inline bool TrackVisual::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackVisual::has_name() const {
  return _internal_has_name();
}
inline void TrackVisual::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackVisual::name() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.name)
  return _internal_name();
}
inline void TrackVisual::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.name)
}
inline std::string* TrackVisual::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.TrackVisual.name)
  return _internal_mutable_name();
}
inline const std::string& TrackVisual::_internal_name() const {
  return name_.GetNoArena();
}
inline void TrackVisual::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrackVisual::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.TrackVisual.name)
}
inline void TrackVisual::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.TrackVisual.name)
}
inline void TrackVisual::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.TrackVisual.name)
}
inline std::string* TrackVisual::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrackVisual::release_name() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.TrackVisual.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrackVisual::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.TrackVisual.name)
}

// optional uint32 id = 2;
inline bool TrackVisual::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrackVisual::has_id() const {
  return _internal_has_id();
}
inline void TrackVisual::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackVisual::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackVisual::id() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.id)
  return _internal_id();
}
inline void TrackVisual::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void TrackVisual::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.id)
}

// optional bool inherit_orientation = 3;
inline bool TrackVisual::_internal_has_inherit_orientation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrackVisual::has_inherit_orientation() const {
  return _internal_has_inherit_orientation();
}
inline void TrackVisual::clear_inherit_orientation() {
  inherit_orientation_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TrackVisual::_internal_inherit_orientation() const {
  return inherit_orientation_;
}
inline bool TrackVisual::inherit_orientation() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.inherit_orientation)
  return _internal_inherit_orientation();
}
inline void TrackVisual::_internal_set_inherit_orientation(bool value) {
  _has_bits_[0] |= 0x00000020u;
  inherit_orientation_ = value;
}
inline void TrackVisual::set_inherit_orientation(bool value) {
  _internal_set_inherit_orientation(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.inherit_orientation)
}

// optional double min_dist = 4;
inline bool TrackVisual::_internal_has_min_dist() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackVisual::has_min_dist() const {
  return _internal_has_min_dist();
}
inline void TrackVisual::clear_min_dist() {
  min_dist_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double TrackVisual::_internal_min_dist() const {
  return min_dist_;
}
inline double TrackVisual::min_dist() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.min_dist)
  return _internal_min_dist();
}
inline void TrackVisual::_internal_set_min_dist(double value) {
  _has_bits_[0] |= 0x00000004u;
  min_dist_ = value;
}
inline void TrackVisual::set_min_dist(double value) {
  _internal_set_min_dist(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.min_dist)
}

// optional double max_dist = 5;
inline bool TrackVisual::_internal_has_max_dist() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackVisual::has_max_dist() const {
  return _internal_has_max_dist();
}
inline void TrackVisual::clear_max_dist() {
  max_dist_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double TrackVisual::_internal_max_dist() const {
  return max_dist_;
}
inline double TrackVisual::max_dist() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.max_dist)
  return _internal_max_dist();
}
inline void TrackVisual::_internal_set_max_dist(double value) {
  _has_bits_[0] |= 0x00000008u;
  max_dist_ = value;
}
inline void TrackVisual::set_max_dist(double value) {
  _internal_set_max_dist(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.max_dist)
}

// optional bool static = 6;
inline bool TrackVisual::_internal_has_static_() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrackVisual::has_static_() const {
  return _internal_has_static_();
}
inline void TrackVisual::clear_static_() {
  static__ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TrackVisual::_internal_static_() const {
  return static__;
}
inline bool TrackVisual::static_() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.static)
  return _internal_static_();
}
inline void TrackVisual::_internal_set_static_(bool value) {
  _has_bits_[0] |= 0x00000040u;
  static__ = value;
}
inline void TrackVisual::set_static_(bool value) {
  _internal_set_static_(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.static)
}

// optional bool use_model_frame = 7;
inline bool TrackVisual::_internal_has_use_model_frame() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrackVisual::has_use_model_frame() const {
  return _internal_has_use_model_frame();
}
inline void TrackVisual::clear_use_model_frame() {
  use_model_frame_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool TrackVisual::_internal_use_model_frame() const {
  return use_model_frame_;
}
inline bool TrackVisual::use_model_frame() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.use_model_frame)
  return _internal_use_model_frame();
}
inline void TrackVisual::_internal_set_use_model_frame(bool value) {
  _has_bits_[0] |= 0x00000080u;
  use_model_frame_ = value;
}
inline void TrackVisual::set_use_model_frame(bool value) {
  _internal_set_use_model_frame(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.use_model_frame)
}

// optional .gazebo.msgs.Vector3d xyz = 8;
inline bool TrackVisual::_internal_has_xyz() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || xyz_ != nullptr);
  return value;
}
inline bool TrackVisual::has_xyz() const {
  return _internal_has_xyz();
}
inline const ::gazebo::msgs::Vector3d& TrackVisual::_internal_xyz() const {
  const ::gazebo::msgs::Vector3d* p = xyz_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& TrackVisual::xyz() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.xyz)
  return _internal_xyz();
}
inline ::gazebo::msgs::Vector3d* TrackVisual::release_xyz() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.TrackVisual.xyz)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Vector3d* temp = xyz_;
  xyz_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* TrackVisual::_internal_mutable_xyz() {
  _has_bits_[0] |= 0x00000002u;
  if (xyz_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    xyz_ = p;
  }
  return xyz_;
}
inline ::gazebo::msgs::Vector3d* TrackVisual::mutable_xyz() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.TrackVisual.xyz)
  return _internal_mutable_xyz();
}
inline void TrackVisual::set_allocated_xyz(::gazebo::msgs::Vector3d* xyz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(xyz_);
  }
  if (xyz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      xyz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xyz, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  xyz_ = xyz;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.TrackVisual.xyz)
}

// optional bool inherit_yaw = 9;
inline bool TrackVisual::_internal_has_inherit_yaw() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TrackVisual::has_inherit_yaw() const {
  return _internal_has_inherit_yaw();
}
inline void TrackVisual::clear_inherit_yaw() {
  inherit_yaw_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool TrackVisual::_internal_inherit_yaw() const {
  return inherit_yaw_;
}
inline bool TrackVisual::inherit_yaw() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.TrackVisual.inherit_yaw)
  return _internal_inherit_yaw();
}
inline void TrackVisual::_internal_set_inherit_yaw(bool value) {
  _has_bits_[0] |= 0x00000100u;
  inherit_yaw_ = value;
}
inline void TrackVisual::set_inherit_yaw(bool value) {
  _internal_set_inherit_yaw(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.TrackVisual.inherit_yaw)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::TrackVisual> TrackVisualPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::TrackVisual const> ConstTrackVisualPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_track_5fvisual_2eproto
