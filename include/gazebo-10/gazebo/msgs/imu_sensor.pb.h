// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu_sensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_imu_5fsensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_imu_5fsensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sensor_noise.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_imu_5fsensor_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_imu_5fsensor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_imu_5fsensor_2eproto;
namespace gazebo {
namespace msgs {
class IMUSensor;
class IMUSensorDefaultTypeInternal;
GZ_MSGS_VISIBLE extern IMUSensorDefaultTypeInternal _IMUSensor_default_instance_;
class IMUSensor_AngularVelocity;
class IMUSensor_AngularVelocityDefaultTypeInternal;
GZ_MSGS_VISIBLE extern IMUSensor_AngularVelocityDefaultTypeInternal _IMUSensor_AngularVelocity_default_instance_;
class IMUSensor_LinearAcceleration;
class IMUSensor_LinearAccelerationDefaultTypeInternal;
GZ_MSGS_VISIBLE extern IMUSensor_LinearAccelerationDefaultTypeInternal _IMUSensor_LinearAcceleration_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::IMUSensor* Arena::CreateMaybeMessage<::gazebo::msgs::IMUSensor>(Arena*);
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::IMUSensor_AngularVelocity* Arena::CreateMaybeMessage<::gazebo::msgs::IMUSensor_AngularVelocity>(Arena*);
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::IMUSensor_LinearAcceleration* Arena::CreateMaybeMessage<::gazebo::msgs::IMUSensor_LinearAcceleration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE IMUSensor_AngularVelocity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.IMUSensor.AngularVelocity) */ {
 public:
  IMUSensor_AngularVelocity();
  virtual ~IMUSensor_AngularVelocity();

  IMUSensor_AngularVelocity(const IMUSensor_AngularVelocity& from);
  IMUSensor_AngularVelocity(IMUSensor_AngularVelocity&& from) noexcept
    : IMUSensor_AngularVelocity() {
    *this = ::std::move(from);
  }

  inline IMUSensor_AngularVelocity& operator=(const IMUSensor_AngularVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUSensor_AngularVelocity& operator=(IMUSensor_AngularVelocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IMUSensor_AngularVelocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUSensor_AngularVelocity* internal_default_instance() {
    return reinterpret_cast<const IMUSensor_AngularVelocity*>(
               &_IMUSensor_AngularVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMUSensor_AngularVelocity& a, IMUSensor_AngularVelocity& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUSensor_AngularVelocity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUSensor_AngularVelocity* New() const final {
    return CreateMaybeMessage<IMUSensor_AngularVelocity>(nullptr);
  }

  IMUSensor_AngularVelocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUSensor_AngularVelocity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMUSensor_AngularVelocity& from);
  void MergeFrom(const IMUSensor_AngularVelocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUSensor_AngularVelocity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.IMUSensor.AngularVelocity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_imu_5fsensor_2eproto);
    return ::descriptor_table_imu_5fsensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXNoiseFieldNumber = 1,
    kYNoiseFieldNumber = 2,
    kZNoiseFieldNumber = 3,
  };
  // optional .gazebo.msgs.SensorNoise x_noise = 1;
  bool has_x_noise() const;
  private:
  bool _internal_has_x_noise() const;
  public:
  void clear_x_noise();
  const ::gazebo::msgs::SensorNoise& x_noise() const;
  ::gazebo::msgs::SensorNoise* release_x_noise();
  ::gazebo::msgs::SensorNoise* mutable_x_noise();
  void set_allocated_x_noise(::gazebo::msgs::SensorNoise* x_noise);
  private:
  const ::gazebo::msgs::SensorNoise& _internal_x_noise() const;
  ::gazebo::msgs::SensorNoise* _internal_mutable_x_noise();
  public:

  // optional .gazebo.msgs.SensorNoise y_noise = 2;
  bool has_y_noise() const;
  private:
  bool _internal_has_y_noise() const;
  public:
  void clear_y_noise();
  const ::gazebo::msgs::SensorNoise& y_noise() const;
  ::gazebo::msgs::SensorNoise* release_y_noise();
  ::gazebo::msgs::SensorNoise* mutable_y_noise();
  void set_allocated_y_noise(::gazebo::msgs::SensorNoise* y_noise);
  private:
  const ::gazebo::msgs::SensorNoise& _internal_y_noise() const;
  ::gazebo::msgs::SensorNoise* _internal_mutable_y_noise();
  public:

  // optional .gazebo.msgs.SensorNoise z_noise = 3;
  bool has_z_noise() const;
  private:
  bool _internal_has_z_noise() const;
  public:
  void clear_z_noise();
  const ::gazebo::msgs::SensorNoise& z_noise() const;
  ::gazebo::msgs::SensorNoise* release_z_noise();
  ::gazebo::msgs::SensorNoise* mutable_z_noise();
  void set_allocated_z_noise(::gazebo::msgs::SensorNoise* z_noise);
  private:
  const ::gazebo::msgs::SensorNoise& _internal_z_noise() const;
  ::gazebo::msgs::SensorNoise* _internal_mutable_z_noise();
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.IMUSensor.AngularVelocity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gazebo::msgs::SensorNoise* x_noise_;
  ::gazebo::msgs::SensorNoise* y_noise_;
  ::gazebo::msgs::SensorNoise* z_noise_;
  friend struct ::TableStruct_imu_5fsensor_2eproto;
};
// -------------------------------------------------------------------

class GZ_MSGS_VISIBLE IMUSensor_LinearAcceleration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.IMUSensor.LinearAcceleration) */ {
 public:
  IMUSensor_LinearAcceleration();
  virtual ~IMUSensor_LinearAcceleration();

  IMUSensor_LinearAcceleration(const IMUSensor_LinearAcceleration& from);
  IMUSensor_LinearAcceleration(IMUSensor_LinearAcceleration&& from) noexcept
    : IMUSensor_LinearAcceleration() {
    *this = ::std::move(from);
  }

  inline IMUSensor_LinearAcceleration& operator=(const IMUSensor_LinearAcceleration& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUSensor_LinearAcceleration& operator=(IMUSensor_LinearAcceleration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IMUSensor_LinearAcceleration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUSensor_LinearAcceleration* internal_default_instance() {
    return reinterpret_cast<const IMUSensor_LinearAcceleration*>(
               &_IMUSensor_LinearAcceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMUSensor_LinearAcceleration& a, IMUSensor_LinearAcceleration& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUSensor_LinearAcceleration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUSensor_LinearAcceleration* New() const final {
    return CreateMaybeMessage<IMUSensor_LinearAcceleration>(nullptr);
  }

  IMUSensor_LinearAcceleration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUSensor_LinearAcceleration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMUSensor_LinearAcceleration& from);
  void MergeFrom(const IMUSensor_LinearAcceleration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUSensor_LinearAcceleration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.IMUSensor.LinearAcceleration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_imu_5fsensor_2eproto);
    return ::descriptor_table_imu_5fsensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXNoiseFieldNumber = 1,
    kYNoiseFieldNumber = 2,
    kZNoiseFieldNumber = 3,
  };
  // optional .gazebo.msgs.SensorNoise x_noise = 1;
  bool has_x_noise() const;
  private:
  bool _internal_has_x_noise() const;
  public:
  void clear_x_noise();
  const ::gazebo::msgs::SensorNoise& x_noise() const;
  ::gazebo::msgs::SensorNoise* release_x_noise();
  ::gazebo::msgs::SensorNoise* mutable_x_noise();
  void set_allocated_x_noise(::gazebo::msgs::SensorNoise* x_noise);
  private:
  const ::gazebo::msgs::SensorNoise& _internal_x_noise() const;
  ::gazebo::msgs::SensorNoise* _internal_mutable_x_noise();
  public:

  // optional .gazebo.msgs.SensorNoise y_noise = 2;
  bool has_y_noise() const;
  private:
  bool _internal_has_y_noise() const;
  public:
  void clear_y_noise();
  const ::gazebo::msgs::SensorNoise& y_noise() const;
  ::gazebo::msgs::SensorNoise* release_y_noise();
  ::gazebo::msgs::SensorNoise* mutable_y_noise();
  void set_allocated_y_noise(::gazebo::msgs::SensorNoise* y_noise);
  private:
  const ::gazebo::msgs::SensorNoise& _internal_y_noise() const;
  ::gazebo::msgs::SensorNoise* _internal_mutable_y_noise();
  public:

  // optional .gazebo.msgs.SensorNoise z_noise = 3;
  bool has_z_noise() const;
  private:
  bool _internal_has_z_noise() const;
  public:
  void clear_z_noise();
  const ::gazebo::msgs::SensorNoise& z_noise() const;
  ::gazebo::msgs::SensorNoise* release_z_noise();
  ::gazebo::msgs::SensorNoise* mutable_z_noise();
  void set_allocated_z_noise(::gazebo::msgs::SensorNoise* z_noise);
  private:
  const ::gazebo::msgs::SensorNoise& _internal_z_noise() const;
  ::gazebo::msgs::SensorNoise* _internal_mutable_z_noise();
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.IMUSensor.LinearAcceleration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gazebo::msgs::SensorNoise* x_noise_;
  ::gazebo::msgs::SensorNoise* y_noise_;
  ::gazebo::msgs::SensorNoise* z_noise_;
  friend struct ::TableStruct_imu_5fsensor_2eproto;
};
// -------------------------------------------------------------------

class GZ_MSGS_VISIBLE IMUSensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.IMUSensor) */ {
 public:
  IMUSensor();
  virtual ~IMUSensor();

  IMUSensor(const IMUSensor& from);
  IMUSensor(IMUSensor&& from) noexcept
    : IMUSensor() {
    *this = ::std::move(from);
  }

  inline IMUSensor& operator=(const IMUSensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUSensor& operator=(IMUSensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IMUSensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUSensor* internal_default_instance() {
    return reinterpret_cast<const IMUSensor*>(
               &_IMUSensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMUSensor& a, IMUSensor& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUSensor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUSensor* New() const final {
    return CreateMaybeMessage<IMUSensor>(nullptr);
  }

  IMUSensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUSensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMUSensor& from);
  void MergeFrom(const IMUSensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUSensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.IMUSensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_imu_5fsensor_2eproto);
    return ::descriptor_table_imu_5fsensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef IMUSensor_AngularVelocity AngularVelocity;
  typedef IMUSensor_LinearAcceleration LinearAcceleration;

  // accessors -------------------------------------------------------

  enum : int {
    kAngularVelocityFieldNumber = 1,
    kLinearAccelerationFieldNumber = 2,
  };
  // optional .gazebo.msgs.IMUSensor.AngularVelocity angular_velocity = 1;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::gazebo::msgs::IMUSensor_AngularVelocity& angular_velocity() const;
  ::gazebo::msgs::IMUSensor_AngularVelocity* release_angular_velocity();
  ::gazebo::msgs::IMUSensor_AngularVelocity* mutable_angular_velocity();
  void set_allocated_angular_velocity(::gazebo::msgs::IMUSensor_AngularVelocity* angular_velocity);
  private:
  const ::gazebo::msgs::IMUSensor_AngularVelocity& _internal_angular_velocity() const;
  ::gazebo::msgs::IMUSensor_AngularVelocity* _internal_mutable_angular_velocity();
  public:

  // optional .gazebo.msgs.IMUSensor.LinearAcceleration linear_acceleration = 2;
  bool has_linear_acceleration() const;
  private:
  bool _internal_has_linear_acceleration() const;
  public:
  void clear_linear_acceleration();
  const ::gazebo::msgs::IMUSensor_LinearAcceleration& linear_acceleration() const;
  ::gazebo::msgs::IMUSensor_LinearAcceleration* release_linear_acceleration();
  ::gazebo::msgs::IMUSensor_LinearAcceleration* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::gazebo::msgs::IMUSensor_LinearAcceleration* linear_acceleration);
  private:
  const ::gazebo::msgs::IMUSensor_LinearAcceleration& _internal_linear_acceleration() const;
  ::gazebo::msgs::IMUSensor_LinearAcceleration* _internal_mutable_linear_acceleration();
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.IMUSensor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gazebo::msgs::IMUSensor_AngularVelocity* angular_velocity_;
  ::gazebo::msgs::IMUSensor_LinearAcceleration* linear_acceleration_;
  friend struct ::TableStruct_imu_5fsensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMUSensor_AngularVelocity

// optional .gazebo.msgs.SensorNoise x_noise = 1;
inline bool IMUSensor_AngularVelocity::_internal_has_x_noise() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || x_noise_ != nullptr);
  return value;
}
inline bool IMUSensor_AngularVelocity::has_x_noise() const {
  return _internal_has_x_noise();
}
inline const ::gazebo::msgs::SensorNoise& IMUSensor_AngularVelocity::_internal_x_noise() const {
  const ::gazebo::msgs::SensorNoise* p = x_noise_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::SensorNoise*>(
      &::gazebo::msgs::_SensorNoise_default_instance_);
}
inline const ::gazebo::msgs::SensorNoise& IMUSensor_AngularVelocity::x_noise() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.IMUSensor.AngularVelocity.x_noise)
  return _internal_x_noise();
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_AngularVelocity::release_x_noise() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.IMUSensor.AngularVelocity.x_noise)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::SensorNoise* temp = x_noise_;
  x_noise_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_AngularVelocity::_internal_mutable_x_noise() {
  _has_bits_[0] |= 0x00000001u;
  if (x_noise_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::SensorNoise>(GetArenaNoVirtual());
    x_noise_ = p;
  }
  return x_noise_;
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_AngularVelocity::mutable_x_noise() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.IMUSensor.AngularVelocity.x_noise)
  return _internal_mutable_x_noise();
}
inline void IMUSensor_AngularVelocity::set_allocated_x_noise(::gazebo::msgs::SensorNoise* x_noise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(x_noise_);
  }
  if (x_noise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      x_noise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x_noise, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  x_noise_ = x_noise;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.IMUSensor.AngularVelocity.x_noise)
}

// optional .gazebo.msgs.SensorNoise y_noise = 2;
inline bool IMUSensor_AngularVelocity::_internal_has_y_noise() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || y_noise_ != nullptr);
  return value;
}
inline bool IMUSensor_AngularVelocity::has_y_noise() const {
  return _internal_has_y_noise();
}
inline const ::gazebo::msgs::SensorNoise& IMUSensor_AngularVelocity::_internal_y_noise() const {
  const ::gazebo::msgs::SensorNoise* p = y_noise_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::SensorNoise*>(
      &::gazebo::msgs::_SensorNoise_default_instance_);
}
inline const ::gazebo::msgs::SensorNoise& IMUSensor_AngularVelocity::y_noise() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.IMUSensor.AngularVelocity.y_noise)
  return _internal_y_noise();
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_AngularVelocity::release_y_noise() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.IMUSensor.AngularVelocity.y_noise)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::SensorNoise* temp = y_noise_;
  y_noise_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_AngularVelocity::_internal_mutable_y_noise() {
  _has_bits_[0] |= 0x00000002u;
  if (y_noise_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::SensorNoise>(GetArenaNoVirtual());
    y_noise_ = p;
  }
  return y_noise_;
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_AngularVelocity::mutable_y_noise() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.IMUSensor.AngularVelocity.y_noise)
  return _internal_mutable_y_noise();
}
inline void IMUSensor_AngularVelocity::set_allocated_y_noise(::gazebo::msgs::SensorNoise* y_noise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(y_noise_);
  }
  if (y_noise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      y_noise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y_noise, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  y_noise_ = y_noise;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.IMUSensor.AngularVelocity.y_noise)
}

// optional .gazebo.msgs.SensorNoise z_noise = 3;
inline bool IMUSensor_AngularVelocity::_internal_has_z_noise() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || z_noise_ != nullptr);
  return value;
}
inline bool IMUSensor_AngularVelocity::has_z_noise() const {
  return _internal_has_z_noise();
}
inline const ::gazebo::msgs::SensorNoise& IMUSensor_AngularVelocity::_internal_z_noise() const {
  const ::gazebo::msgs::SensorNoise* p = z_noise_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::SensorNoise*>(
      &::gazebo::msgs::_SensorNoise_default_instance_);
}
inline const ::gazebo::msgs::SensorNoise& IMUSensor_AngularVelocity::z_noise() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.IMUSensor.AngularVelocity.z_noise)
  return _internal_z_noise();
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_AngularVelocity::release_z_noise() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.IMUSensor.AngularVelocity.z_noise)
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::SensorNoise* temp = z_noise_;
  z_noise_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_AngularVelocity::_internal_mutable_z_noise() {
  _has_bits_[0] |= 0x00000004u;
  if (z_noise_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::SensorNoise>(GetArenaNoVirtual());
    z_noise_ = p;
  }
  return z_noise_;
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_AngularVelocity::mutable_z_noise() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.IMUSensor.AngularVelocity.z_noise)
  return _internal_mutable_z_noise();
}
inline void IMUSensor_AngularVelocity::set_allocated_z_noise(::gazebo::msgs::SensorNoise* z_noise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_noise_);
  }
  if (z_noise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      z_noise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z_noise, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  z_noise_ = z_noise;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.IMUSensor.AngularVelocity.z_noise)
}

// -------------------------------------------------------------------

// IMUSensor_LinearAcceleration

// optional .gazebo.msgs.SensorNoise x_noise = 1;
inline bool IMUSensor_LinearAcceleration::_internal_has_x_noise() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || x_noise_ != nullptr);
  return value;
}
inline bool IMUSensor_LinearAcceleration::has_x_noise() const {
  return _internal_has_x_noise();
}
inline const ::gazebo::msgs::SensorNoise& IMUSensor_LinearAcceleration::_internal_x_noise() const {
  const ::gazebo::msgs::SensorNoise* p = x_noise_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::SensorNoise*>(
      &::gazebo::msgs::_SensorNoise_default_instance_);
}
inline const ::gazebo::msgs::SensorNoise& IMUSensor_LinearAcceleration::x_noise() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.IMUSensor.LinearAcceleration.x_noise)
  return _internal_x_noise();
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_LinearAcceleration::release_x_noise() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.IMUSensor.LinearAcceleration.x_noise)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::SensorNoise* temp = x_noise_;
  x_noise_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_LinearAcceleration::_internal_mutable_x_noise() {
  _has_bits_[0] |= 0x00000001u;
  if (x_noise_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::SensorNoise>(GetArenaNoVirtual());
    x_noise_ = p;
  }
  return x_noise_;
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_LinearAcceleration::mutable_x_noise() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.IMUSensor.LinearAcceleration.x_noise)
  return _internal_mutable_x_noise();
}
inline void IMUSensor_LinearAcceleration::set_allocated_x_noise(::gazebo::msgs::SensorNoise* x_noise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(x_noise_);
  }
  if (x_noise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      x_noise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x_noise, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  x_noise_ = x_noise;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.IMUSensor.LinearAcceleration.x_noise)
}

// optional .gazebo.msgs.SensorNoise y_noise = 2;
inline bool IMUSensor_LinearAcceleration::_internal_has_y_noise() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || y_noise_ != nullptr);
  return value;
}
inline bool IMUSensor_LinearAcceleration::has_y_noise() const {
  return _internal_has_y_noise();
}
inline const ::gazebo::msgs::SensorNoise& IMUSensor_LinearAcceleration::_internal_y_noise() const {
  const ::gazebo::msgs::SensorNoise* p = y_noise_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::SensorNoise*>(
      &::gazebo::msgs::_SensorNoise_default_instance_);
}
inline const ::gazebo::msgs::SensorNoise& IMUSensor_LinearAcceleration::y_noise() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.IMUSensor.LinearAcceleration.y_noise)
  return _internal_y_noise();
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_LinearAcceleration::release_y_noise() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.IMUSensor.LinearAcceleration.y_noise)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::SensorNoise* temp = y_noise_;
  y_noise_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_LinearAcceleration::_internal_mutable_y_noise() {
  _has_bits_[0] |= 0x00000002u;
  if (y_noise_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::SensorNoise>(GetArenaNoVirtual());
    y_noise_ = p;
  }
  return y_noise_;
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_LinearAcceleration::mutable_y_noise() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.IMUSensor.LinearAcceleration.y_noise)
  return _internal_mutable_y_noise();
}
inline void IMUSensor_LinearAcceleration::set_allocated_y_noise(::gazebo::msgs::SensorNoise* y_noise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(y_noise_);
  }
  if (y_noise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      y_noise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y_noise, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  y_noise_ = y_noise;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.IMUSensor.LinearAcceleration.y_noise)
}

// optional .gazebo.msgs.SensorNoise z_noise = 3;
inline bool IMUSensor_LinearAcceleration::_internal_has_z_noise() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || z_noise_ != nullptr);
  return value;
}
inline bool IMUSensor_LinearAcceleration::has_z_noise() const {
  return _internal_has_z_noise();
}
inline const ::gazebo::msgs::SensorNoise& IMUSensor_LinearAcceleration::_internal_z_noise() const {
  const ::gazebo::msgs::SensorNoise* p = z_noise_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::SensorNoise*>(
      &::gazebo::msgs::_SensorNoise_default_instance_);
}
inline const ::gazebo::msgs::SensorNoise& IMUSensor_LinearAcceleration::z_noise() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.IMUSensor.LinearAcceleration.z_noise)
  return _internal_z_noise();
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_LinearAcceleration::release_z_noise() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.IMUSensor.LinearAcceleration.z_noise)
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::SensorNoise* temp = z_noise_;
  z_noise_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_LinearAcceleration::_internal_mutable_z_noise() {
  _has_bits_[0] |= 0x00000004u;
  if (z_noise_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::SensorNoise>(GetArenaNoVirtual());
    z_noise_ = p;
  }
  return z_noise_;
}
inline ::gazebo::msgs::SensorNoise* IMUSensor_LinearAcceleration::mutable_z_noise() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.IMUSensor.LinearAcceleration.z_noise)
  return _internal_mutable_z_noise();
}
inline void IMUSensor_LinearAcceleration::set_allocated_z_noise(::gazebo::msgs::SensorNoise* z_noise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_noise_);
  }
  if (z_noise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      z_noise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z_noise, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  z_noise_ = z_noise;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.IMUSensor.LinearAcceleration.z_noise)
}

// -------------------------------------------------------------------

// IMUSensor

// optional .gazebo.msgs.IMUSensor.AngularVelocity angular_velocity = 1;
inline bool IMUSensor::_internal_has_angular_velocity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || angular_velocity_ != nullptr);
  return value;
}
inline bool IMUSensor::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline void IMUSensor::clear_angular_velocity() {
  if (angular_velocity_ != nullptr) angular_velocity_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::gazebo::msgs::IMUSensor_AngularVelocity& IMUSensor::_internal_angular_velocity() const {
  const ::gazebo::msgs::IMUSensor_AngularVelocity* p = angular_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::IMUSensor_AngularVelocity*>(
      &::gazebo::msgs::_IMUSensor_AngularVelocity_default_instance_);
}
inline const ::gazebo::msgs::IMUSensor_AngularVelocity& IMUSensor::angular_velocity() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.IMUSensor.angular_velocity)
  return _internal_angular_velocity();
}
inline ::gazebo::msgs::IMUSensor_AngularVelocity* IMUSensor::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.IMUSensor.angular_velocity)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::IMUSensor_AngularVelocity* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::IMUSensor_AngularVelocity* IMUSensor::_internal_mutable_angular_velocity() {
  _has_bits_[0] |= 0x00000001u;
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::IMUSensor_AngularVelocity>(GetArenaNoVirtual());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::gazebo::msgs::IMUSensor_AngularVelocity* IMUSensor::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.IMUSensor.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void IMUSensor::set_allocated_angular_velocity(::gazebo::msgs::IMUSensor_AngularVelocity* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete angular_velocity_;
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.IMUSensor.angular_velocity)
}

// optional .gazebo.msgs.IMUSensor.LinearAcceleration linear_acceleration = 2;
inline bool IMUSensor::_internal_has_linear_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || linear_acceleration_ != nullptr);
  return value;
}
inline bool IMUSensor::has_linear_acceleration() const {
  return _internal_has_linear_acceleration();
}
inline void IMUSensor::clear_linear_acceleration() {
  if (linear_acceleration_ != nullptr) linear_acceleration_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gazebo::msgs::IMUSensor_LinearAcceleration& IMUSensor::_internal_linear_acceleration() const {
  const ::gazebo::msgs::IMUSensor_LinearAcceleration* p = linear_acceleration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::IMUSensor_LinearAcceleration*>(
      &::gazebo::msgs::_IMUSensor_LinearAcceleration_default_instance_);
}
inline const ::gazebo::msgs::IMUSensor_LinearAcceleration& IMUSensor::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.IMUSensor.linear_acceleration)
  return _internal_linear_acceleration();
}
inline ::gazebo::msgs::IMUSensor_LinearAcceleration* IMUSensor::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.IMUSensor.linear_acceleration)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::IMUSensor_LinearAcceleration* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::IMUSensor_LinearAcceleration* IMUSensor::_internal_mutable_linear_acceleration() {
  _has_bits_[0] |= 0x00000002u;
  if (linear_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::IMUSensor_LinearAcceleration>(GetArenaNoVirtual());
    linear_acceleration_ = p;
  }
  return linear_acceleration_;
}
inline ::gazebo::msgs::IMUSensor_LinearAcceleration* IMUSensor::mutable_linear_acceleration() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.IMUSensor.linear_acceleration)
  return _internal_mutable_linear_acceleration();
}
inline void IMUSensor::set_allocated_linear_acceleration(::gazebo::msgs::IMUSensor_LinearAcceleration* linear_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_acceleration_;
  }
  if (linear_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.IMUSensor.linear_acceleration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


typedef boost::shared_ptr<gazebo::msgs::IMUSensor> IMUSensorPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::IMUSensor const> ConstIMUSensorPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_imu_5fsensor_2eproto
