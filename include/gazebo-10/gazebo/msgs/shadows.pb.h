// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shadows.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shadows_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shadows_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "color.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shadows_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_shadows_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shadows_2eproto;
namespace gazebo {
namespace msgs {
class Shadows;
class ShadowsDefaultTypeInternal;
GZ_MSGS_VISIBLE extern ShadowsDefaultTypeInternal _Shadows_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::Shadows* Arena::CreateMaybeMessage<::gazebo::msgs::Shadows>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

enum Shadows_ShadowType : int {
  Shadows_ShadowType_STENCIL_ADDITIVE = 1,
  Shadows_ShadowType_STENCIL_MODULATIVE = 2,
  Shadows_ShadowType_TEXTURE_ADDITIVE = 3,
  Shadows_ShadowType_TEXTURE_MODULATIVE = 4
};
GZ_MSGS_VISIBLE bool Shadows_ShadowType_IsValid(int value);
constexpr Shadows_ShadowType Shadows_ShadowType_ShadowType_MIN = Shadows_ShadowType_STENCIL_ADDITIVE;
constexpr Shadows_ShadowType Shadows_ShadowType_ShadowType_MAX = Shadows_ShadowType_TEXTURE_MODULATIVE;
constexpr int Shadows_ShadowType_ShadowType_ARRAYSIZE = Shadows_ShadowType_ShadowType_MAX + 1;

GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shadows_ShadowType_descriptor();
template<typename T>
inline const std::string& Shadows_ShadowType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Shadows_ShadowType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Shadows_ShadowType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Shadows_ShadowType_descriptor(), enum_t_value);
}
inline bool Shadows_ShadowType_Parse(
    const std::string& name, Shadows_ShadowType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Shadows_ShadowType>(
    Shadows_ShadowType_descriptor(), name, value);
}
// ===================================================================

class GZ_MSGS_VISIBLE Shadows :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.Shadows) */ {
 public:
  Shadows();
  virtual ~Shadows();

  Shadows(const Shadows& from);
  Shadows(Shadows&& from) noexcept
    : Shadows() {
    *this = ::std::move(from);
  }

  inline Shadows& operator=(const Shadows& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shadows& operator=(Shadows&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shadows& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shadows* internal_default_instance() {
    return reinterpret_cast<const Shadows*>(
               &_Shadows_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Shadows& a, Shadows& b) {
    a.Swap(&b);
  }
  inline void Swap(Shadows* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shadows* New() const final {
    return CreateMaybeMessage<Shadows>(nullptr);
  }

  Shadows* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shadows>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shadows& from);
  void MergeFrom(const Shadows& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shadows* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.Shadows";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shadows_2eproto);
    return ::descriptor_table_shadows_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Shadows_ShadowType ShadowType;
  static constexpr ShadowType STENCIL_ADDITIVE =
    Shadows_ShadowType_STENCIL_ADDITIVE;
  static constexpr ShadowType STENCIL_MODULATIVE =
    Shadows_ShadowType_STENCIL_MODULATIVE;
  static constexpr ShadowType TEXTURE_ADDITIVE =
    Shadows_ShadowType_TEXTURE_ADDITIVE;
  static constexpr ShadowType TEXTURE_MODULATIVE =
    Shadows_ShadowType_TEXTURE_MODULATIVE;
  static inline bool ShadowType_IsValid(int value) {
    return Shadows_ShadowType_IsValid(value);
  }
  static constexpr ShadowType ShadowType_MIN =
    Shadows_ShadowType_ShadowType_MIN;
  static constexpr ShadowType ShadowType_MAX =
    Shadows_ShadowType_ShadowType_MAX;
  static constexpr int ShadowType_ARRAYSIZE =
    Shadows_ShadowType_ShadowType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ShadowType_descriptor() {
    return Shadows_ShadowType_descriptor();
  }
  template<typename T>
  static inline const std::string& ShadowType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ShadowType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ShadowType_Name.");
    return Shadows_ShadowType_Name(enum_t_value);
  }
  static inline bool ShadowType_Parse(const std::string& name,
      ShadowType* value) {
    return Shadows_ShadowType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 6,
    kTypeFieldNumber = 5,
  };
  // optional .gazebo.msgs.Color color = 6;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::gazebo::msgs::Color& color() const;
  ::gazebo::msgs::Color* release_color();
  ::gazebo::msgs::Color* mutable_color();
  void set_allocated_color(::gazebo::msgs::Color* color);
  private:
  const ::gazebo::msgs::Color& _internal_color() const;
  ::gazebo::msgs::Color* _internal_mutable_color();
  public:

  // optional .gazebo.msgs.Shadows.ShadowType type = 5;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::gazebo::msgs::Shadows_ShadowType type() const;
  void set_type(::gazebo::msgs::Shadows_ShadowType value);
  private:
  ::gazebo::msgs::Shadows_ShadowType _internal_type() const;
  void _internal_set_type(::gazebo::msgs::Shadows_ShadowType value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Shadows)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Color* color_;
  int type_;
  friend struct ::TableStruct_shadows_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Shadows

// optional .gazebo.msgs.Shadows.ShadowType type = 5;
inline bool Shadows::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Shadows::has_type() const {
  return _internal_has_type();
}
inline void Shadows::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::gazebo::msgs::Shadows_ShadowType Shadows::_internal_type() const {
  return static_cast< ::gazebo::msgs::Shadows_ShadowType >(type_);
}
inline ::gazebo::msgs::Shadows_ShadowType Shadows::type() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Shadows.type)
  return _internal_type();
}
inline void Shadows::_internal_set_type(::gazebo::msgs::Shadows_ShadowType value) {
  assert(::gazebo::msgs::Shadows_ShadowType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void Shadows::set_type(::gazebo::msgs::Shadows_ShadowType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Shadows.type)
}

// optional .gazebo.msgs.Color color = 6;
inline bool Shadows::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || color_ != nullptr);
  return value;
}
inline bool Shadows::has_color() const {
  return _internal_has_color();
}
inline const ::gazebo::msgs::Color& Shadows::_internal_color() const {
  const ::gazebo::msgs::Color* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Color*>(
      &::gazebo::msgs::_Color_default_instance_);
}
inline const ::gazebo::msgs::Color& Shadows::color() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Shadows.color)
  return _internal_color();
}
inline ::gazebo::msgs::Color* Shadows::release_color() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Shadows.color)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Color* Shadows::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000001u;
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  return color_;
}
inline ::gazebo::msgs::Color* Shadows::mutable_color() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Shadows.color)
  return _internal_mutable_color();
}
inline void Shadows::set_allocated_color(::gazebo::msgs::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Shadows.color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::Shadows> ShadowsPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gazebo::msgs::Shadows_ShadowType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gazebo::msgs::Shadows_ShadowType>() {
  return ::gazebo::msgs::Shadows_ShadowType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

typedef const boost::shared_ptr<gazebo::msgs::Shadows const> ConstShadowsPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shadows_2eproto
