// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: link.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_link_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_link_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "inertial.pb.h"
#include "collision.pb.h"
#include "light.pb.h"
#include "visual.pb.h"
#include "sensor.pb.h"
#include "projector.pb.h"
#include "pose.pb.h"
#include "battery.pb.h"
#include "density.pb.h"
#include "vector3d.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_link_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_link_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_link_2eproto;
namespace gazebo {
namespace msgs {
class Link;
class LinkDefaultTypeInternal;
GZ_MSGS_VISIBLE extern LinkDefaultTypeInternal _Link_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::Link* Arena::CreateMaybeMessage<::gazebo::msgs::Link>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE Link :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.Link) */ {
 public:
  Link();
  virtual ~Link();

  Link(const Link& from);
  Link(Link&& from) noexcept
    : Link() {
    *this = ::std::move(from);
  }

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }
  inline Link& operator=(Link&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Link& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Link* internal_default_instance() {
    return reinterpret_cast<const Link*>(
               &_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Link& a, Link& b) {
    a.Swap(&b);
  }
  inline void Swap(Link* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Link* New() const final {
    return CreateMaybeMessage<Link>(nullptr);
  }

  Link* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Link>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Link* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.Link";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_link_2eproto);
    return ::descriptor_table_link_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisualFieldNumber = 10,
    kCollisionFieldNumber = 11,
    kSensorFieldNumber = 12,
    kProjectorFieldNumber = 13,
    kBatteryFieldNumber = 15,
    kLightFieldNumber = 18,
    kNameFieldNumber = 2,
    kDensityFieldNumber = 7,
    kInertialFieldNumber = 8,
    kPoseFieldNumber = 9,
    kWindFieldNumber = 17,
    kIdFieldNumber = 1,
    kSelfCollideFieldNumber = 3,
    kGravityFieldNumber = 4,
    kKinematicFieldNumber = 5,
    kEnabledFieldNumber = 6,
    kCanonicalFieldNumber = 14,
    kEnableWindFieldNumber = 16,
  };
  // repeated .gazebo.msgs.Visual visual = 10;
  int visual_size() const;
  private:
  int _internal_visual_size() const;
  public:
  void clear_visual();
  ::gazebo::msgs::Visual* mutable_visual(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Visual >*
      mutable_visual();
  private:
  const ::gazebo::msgs::Visual& _internal_visual(int index) const;
  ::gazebo::msgs::Visual* _internal_add_visual();
  public:
  const ::gazebo::msgs::Visual& visual(int index) const;
  ::gazebo::msgs::Visual* add_visual();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Visual >&
      visual() const;

  // repeated .gazebo.msgs.Collision collision = 11;
  int collision_size() const;
  private:
  int _internal_collision_size() const;
  public:
  void clear_collision();
  ::gazebo::msgs::Collision* mutable_collision(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Collision >*
      mutable_collision();
  private:
  const ::gazebo::msgs::Collision& _internal_collision(int index) const;
  ::gazebo::msgs::Collision* _internal_add_collision();
  public:
  const ::gazebo::msgs::Collision& collision(int index) const;
  ::gazebo::msgs::Collision* add_collision();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Collision >&
      collision() const;

  // repeated .gazebo.msgs.Sensor sensor = 12;
  int sensor_size() const;
  private:
  int _internal_sensor_size() const;
  public:
  void clear_sensor();
  ::gazebo::msgs::Sensor* mutable_sensor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Sensor >*
      mutable_sensor();
  private:
  const ::gazebo::msgs::Sensor& _internal_sensor(int index) const;
  ::gazebo::msgs::Sensor* _internal_add_sensor();
  public:
  const ::gazebo::msgs::Sensor& sensor(int index) const;
  ::gazebo::msgs::Sensor* add_sensor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Sensor >&
      sensor() const;

  // repeated .gazebo.msgs.Projector projector = 13;
  int projector_size() const;
  private:
  int _internal_projector_size() const;
  public:
  void clear_projector();
  ::gazebo::msgs::Projector* mutable_projector(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Projector >*
      mutable_projector();
  private:
  const ::gazebo::msgs::Projector& _internal_projector(int index) const;
  ::gazebo::msgs::Projector* _internal_add_projector();
  public:
  const ::gazebo::msgs::Projector& projector(int index) const;
  ::gazebo::msgs::Projector* add_projector();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Projector >&
      projector() const;

  // repeated .gazebo.msgs.Battery battery = 15;
  int battery_size() const;
  private:
  int _internal_battery_size() const;
  public:
  void clear_battery();
  ::gazebo::msgs::Battery* mutable_battery(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Battery >*
      mutable_battery();
  private:
  const ::gazebo::msgs::Battery& _internal_battery(int index) const;
  ::gazebo::msgs::Battery* _internal_add_battery();
  public:
  const ::gazebo::msgs::Battery& battery(int index) const;
  ::gazebo::msgs::Battery* add_battery();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Battery >&
      battery() const;

  // repeated .gazebo.msgs.Light light = 18;
  int light_size() const;
  private:
  int _internal_light_size() const;
  public:
  void clear_light();
  ::gazebo::msgs::Light* mutable_light(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Light >*
      mutable_light();
  private:
  const ::gazebo::msgs::Light& _internal_light(int index) const;
  ::gazebo::msgs::Light* _internal_add_light();
  public:
  const ::gazebo::msgs::Light& light(int index) const;
  ::gazebo::msgs::Light* add_light();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Light >&
      light() const;

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .gazebo.msgs.Density density = 7;
  bool has_density() const;
  private:
  bool _internal_has_density() const;
  public:
  void clear_density();
  const ::gazebo::msgs::Density& density() const;
  ::gazebo::msgs::Density* release_density();
  ::gazebo::msgs::Density* mutable_density();
  void set_allocated_density(::gazebo::msgs::Density* density);
  private:
  const ::gazebo::msgs::Density& _internal_density() const;
  ::gazebo::msgs::Density* _internal_mutable_density();
  public:

  // optional .gazebo.msgs.Inertial inertial = 8;
  bool has_inertial() const;
  private:
  bool _internal_has_inertial() const;
  public:
  void clear_inertial();
  const ::gazebo::msgs::Inertial& inertial() const;
  ::gazebo::msgs::Inertial* release_inertial();
  ::gazebo::msgs::Inertial* mutable_inertial();
  void set_allocated_inertial(::gazebo::msgs::Inertial* inertial);
  private:
  const ::gazebo::msgs::Inertial& _internal_inertial() const;
  ::gazebo::msgs::Inertial* _internal_mutable_inertial();
  public:

  // optional .gazebo.msgs.Pose pose = 9;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::gazebo::msgs::Pose& pose() const;
  ::gazebo::msgs::Pose* release_pose();
  ::gazebo::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gazebo::msgs::Pose* pose);
  private:
  const ::gazebo::msgs::Pose& _internal_pose() const;
  ::gazebo::msgs::Pose* _internal_mutable_pose();
  public:

  // optional .gazebo.msgs.Vector3d wind = 17;
  bool has_wind() const;
  private:
  bool _internal_has_wind() const;
  public:
  void clear_wind();
  const ::gazebo::msgs::Vector3d& wind() const;
  ::gazebo::msgs::Vector3d* release_wind();
  ::gazebo::msgs::Vector3d* mutable_wind();
  void set_allocated_wind(::gazebo::msgs::Vector3d* wind);
  private:
  const ::gazebo::msgs::Vector3d& _internal_wind() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_wind();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool self_collide = 3;
  bool has_self_collide() const;
  private:
  bool _internal_has_self_collide() const;
  public:
  void clear_self_collide();
  bool self_collide() const;
  void set_self_collide(bool value);
  private:
  bool _internal_self_collide() const;
  void _internal_set_self_collide(bool value);
  public:

  // optional bool gravity = 4;
  bool has_gravity() const;
  private:
  bool _internal_has_gravity() const;
  public:
  void clear_gravity();
  bool gravity() const;
  void set_gravity(bool value);
  private:
  bool _internal_gravity() const;
  void _internal_set_gravity(bool value);
  public:

  // optional bool kinematic = 5;
  bool has_kinematic() const;
  private:
  bool _internal_has_kinematic() const;
  public:
  void clear_kinematic();
  bool kinematic() const;
  void set_kinematic(bool value);
  private:
  bool _internal_kinematic() const;
  void _internal_set_kinematic(bool value);
  public:

  // optional bool enabled = 6;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool canonical = 14;
  bool has_canonical() const;
  private:
  bool _internal_has_canonical() const;
  public:
  void clear_canonical();
  bool canonical() const;
  void set_canonical(bool value);
  private:
  bool _internal_canonical() const;
  void _internal_set_canonical(bool value);
  public:

  // optional bool enable_wind = 16;
  bool has_enable_wind() const;
  private:
  bool _internal_has_enable_wind() const;
  public:
  void clear_enable_wind();
  bool enable_wind() const;
  void set_enable_wind(bool value);
  private:
  bool _internal_enable_wind() const;
  void _internal_set_enable_wind(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Link)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Visual > visual_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Collision > collision_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Sensor > sensor_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Projector > projector_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Battery > battery_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Light > light_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::gazebo::msgs::Density* density_;
  ::gazebo::msgs::Inertial* inertial_;
  ::gazebo::msgs::Pose* pose_;
  ::gazebo::msgs::Vector3d* wind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool self_collide_;
  bool gravity_;
  bool kinematic_;
  bool enabled_;
  bool canonical_;
  bool enable_wind_;
  friend struct ::TableStruct_link_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Link

// optional uint32 id = 1;
inline bool Link::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Link::has_id() const {
  return _internal_has_id();
}
inline void Link::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Link::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Link::id() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.id)
  return _internal_id();
}
inline void Link::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  id_ = value;
}
inline void Link::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Link.id)
}

// required string name = 2;
inline bool Link::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Link::has_name() const {
  return _internal_has_name();
}
inline void Link::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Link::name() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.name)
  return _internal_name();
}
inline void Link::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Link.name)
}
inline std::string* Link::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Link.name)
  return _internal_mutable_name();
}
inline const std::string& Link::_internal_name() const {
  return name_.GetNoArena();
}
inline void Link::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Link::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.Link.name)
}
inline void Link::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.Link.name)
}
inline void Link::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.Link.name)
}
inline std::string* Link::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Link::release_name() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Link.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Link.name)
}

// optional bool self_collide = 3;
inline bool Link::_internal_has_self_collide() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Link::has_self_collide() const {
  return _internal_has_self_collide();
}
inline void Link::clear_self_collide() {
  self_collide_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Link::_internal_self_collide() const {
  return self_collide_;
}
inline bool Link::self_collide() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.self_collide)
  return _internal_self_collide();
}
inline void Link::_internal_set_self_collide(bool value) {
  _has_bits_[0] |= 0x00000040u;
  self_collide_ = value;
}
inline void Link::set_self_collide(bool value) {
  _internal_set_self_collide(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Link.self_collide)
}

// optional bool gravity = 4;
inline bool Link::_internal_has_gravity() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Link::has_gravity() const {
  return _internal_has_gravity();
}
inline void Link::clear_gravity() {
  gravity_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Link::_internal_gravity() const {
  return gravity_;
}
inline bool Link::gravity() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.gravity)
  return _internal_gravity();
}
inline void Link::_internal_set_gravity(bool value) {
  _has_bits_[0] |= 0x00000080u;
  gravity_ = value;
}
inline void Link::set_gravity(bool value) {
  _internal_set_gravity(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Link.gravity)
}

// optional bool kinematic = 5;
inline bool Link::_internal_has_kinematic() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Link::has_kinematic() const {
  return _internal_has_kinematic();
}
inline void Link::clear_kinematic() {
  kinematic_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Link::_internal_kinematic() const {
  return kinematic_;
}
inline bool Link::kinematic() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.kinematic)
  return _internal_kinematic();
}
inline void Link::_internal_set_kinematic(bool value) {
  _has_bits_[0] |= 0x00000100u;
  kinematic_ = value;
}
inline void Link::set_kinematic(bool value) {
  _internal_set_kinematic(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Link.kinematic)
}

// optional bool enabled = 6;
inline bool Link::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Link::has_enabled() const {
  return _internal_has_enabled();
}
inline void Link::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Link::_internal_enabled() const {
  return enabled_;
}
inline bool Link::enabled() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.enabled)
  return _internal_enabled();
}
inline void Link::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000200u;
  enabled_ = value;
}
inline void Link::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Link.enabled)
}

// optional .gazebo.msgs.Density density = 7;
inline bool Link::_internal_has_density() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || density_ != nullptr);
  return value;
}
inline bool Link::has_density() const {
  return _internal_has_density();
}
inline const ::gazebo::msgs::Density& Link::_internal_density() const {
  const ::gazebo::msgs::Density* p = density_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Density*>(
      &::gazebo::msgs::_Density_default_instance_);
}
inline const ::gazebo::msgs::Density& Link::density() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.density)
  return _internal_density();
}
inline ::gazebo::msgs::Density* Link::release_density() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Link.density)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Density* temp = density_;
  density_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Density* Link::_internal_mutable_density() {
  _has_bits_[0] |= 0x00000002u;
  if (density_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Density>(GetArenaNoVirtual());
    density_ = p;
  }
  return density_;
}
inline ::gazebo::msgs::Density* Link::mutable_density() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Link.density)
  return _internal_mutable_density();
}
inline void Link::set_allocated_density(::gazebo::msgs::Density* density) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(density_);
  }
  if (density) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      density = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, density, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  density_ = density;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Link.density)
}

// optional .gazebo.msgs.Inertial inertial = 8;
inline bool Link::_internal_has_inertial() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || inertial_ != nullptr);
  return value;
}
inline bool Link::has_inertial() const {
  return _internal_has_inertial();
}
inline const ::gazebo::msgs::Inertial& Link::_internal_inertial() const {
  const ::gazebo::msgs::Inertial* p = inertial_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Inertial*>(
      &::gazebo::msgs::_Inertial_default_instance_);
}
inline const ::gazebo::msgs::Inertial& Link::inertial() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.inertial)
  return _internal_inertial();
}
inline ::gazebo::msgs::Inertial* Link::release_inertial() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Link.inertial)
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::Inertial* temp = inertial_;
  inertial_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Inertial* Link::_internal_mutable_inertial() {
  _has_bits_[0] |= 0x00000004u;
  if (inertial_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Inertial>(GetArenaNoVirtual());
    inertial_ = p;
  }
  return inertial_;
}
inline ::gazebo::msgs::Inertial* Link::mutable_inertial() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Link.inertial)
  return _internal_mutable_inertial();
}
inline void Link::set_allocated_inertial(::gazebo::msgs::Inertial* inertial) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inertial_);
  }
  if (inertial) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inertial = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inertial, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  inertial_ = inertial;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Link.inertial)
}

// optional .gazebo.msgs.Pose pose = 9;
inline bool Link::_internal_has_pose() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || pose_ != nullptr);
  return value;
}
inline bool Link::has_pose() const {
  return _internal_has_pose();
}
inline const ::gazebo::msgs::Pose& Link::_internal_pose() const {
  const ::gazebo::msgs::Pose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Pose*>(
      &::gazebo::msgs::_Pose_default_instance_);
}
inline const ::gazebo::msgs::Pose& Link::pose() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.pose)
  return _internal_pose();
}
inline ::gazebo::msgs::Pose* Link::release_pose() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Link.pose)
  _has_bits_[0] &= ~0x00000008u;
  ::gazebo::msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Pose* Link::_internal_mutable_pose() {
  _has_bits_[0] |= 0x00000008u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  return pose_;
}
inline ::gazebo::msgs::Pose* Link::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Link.pose)
  return _internal_mutable_pose();
}
inline void Link::set_allocated_pose(::gazebo::msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Link.pose)
}

// repeated .gazebo.msgs.Visual visual = 10;
inline int Link::_internal_visual_size() const {
  return visual_.size();
}
inline int Link::visual_size() const {
  return _internal_visual_size();
}
inline ::gazebo::msgs::Visual* Link::mutable_visual(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Link.visual)
  return visual_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Visual >*
Link::mutable_visual() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.Link.visual)
  return &visual_;
}
inline const ::gazebo::msgs::Visual& Link::_internal_visual(int index) const {
  return visual_.Get(index);
}
inline const ::gazebo::msgs::Visual& Link::visual(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.visual)
  return _internal_visual(index);
}
inline ::gazebo::msgs::Visual* Link::_internal_add_visual() {
  return visual_.Add();
}
inline ::gazebo::msgs::Visual* Link::add_visual() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.Link.visual)
  return _internal_add_visual();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Visual >&
Link::visual() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.Link.visual)
  return visual_;
}

// repeated .gazebo.msgs.Collision collision = 11;
inline int Link::_internal_collision_size() const {
  return collision_.size();
}
inline int Link::collision_size() const {
  return _internal_collision_size();
}
inline ::gazebo::msgs::Collision* Link::mutable_collision(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Link.collision)
  return collision_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Collision >*
Link::mutable_collision() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.Link.collision)
  return &collision_;
}
inline const ::gazebo::msgs::Collision& Link::_internal_collision(int index) const {
  return collision_.Get(index);
}
inline const ::gazebo::msgs::Collision& Link::collision(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.collision)
  return _internal_collision(index);
}
inline ::gazebo::msgs::Collision* Link::_internal_add_collision() {
  return collision_.Add();
}
inline ::gazebo::msgs::Collision* Link::add_collision() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.Link.collision)
  return _internal_add_collision();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Collision >&
Link::collision() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.Link.collision)
  return collision_;
}

// repeated .gazebo.msgs.Sensor sensor = 12;
inline int Link::_internal_sensor_size() const {
  return sensor_.size();
}
inline int Link::sensor_size() const {
  return _internal_sensor_size();
}
inline ::gazebo::msgs::Sensor* Link::mutable_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Link.sensor)
  return sensor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Sensor >*
Link::mutable_sensor() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.Link.sensor)
  return &sensor_;
}
inline const ::gazebo::msgs::Sensor& Link::_internal_sensor(int index) const {
  return sensor_.Get(index);
}
inline const ::gazebo::msgs::Sensor& Link::sensor(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.sensor)
  return _internal_sensor(index);
}
inline ::gazebo::msgs::Sensor* Link::_internal_add_sensor() {
  return sensor_.Add();
}
inline ::gazebo::msgs::Sensor* Link::add_sensor() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.Link.sensor)
  return _internal_add_sensor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Sensor >&
Link::sensor() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.Link.sensor)
  return sensor_;
}

// repeated .gazebo.msgs.Projector projector = 13;
inline int Link::_internal_projector_size() const {
  return projector_.size();
}
inline int Link::projector_size() const {
  return _internal_projector_size();
}
inline ::gazebo::msgs::Projector* Link::mutable_projector(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Link.projector)
  return projector_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Projector >*
Link::mutable_projector() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.Link.projector)
  return &projector_;
}
inline const ::gazebo::msgs::Projector& Link::_internal_projector(int index) const {
  return projector_.Get(index);
}
inline const ::gazebo::msgs::Projector& Link::projector(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.projector)
  return _internal_projector(index);
}
inline ::gazebo::msgs::Projector* Link::_internal_add_projector() {
  return projector_.Add();
}
inline ::gazebo::msgs::Projector* Link::add_projector() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.Link.projector)
  return _internal_add_projector();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Projector >&
Link::projector() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.Link.projector)
  return projector_;
}

// optional bool canonical = 14;
inline bool Link::_internal_has_canonical() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Link::has_canonical() const {
  return _internal_has_canonical();
}
inline void Link::clear_canonical() {
  canonical_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Link::_internal_canonical() const {
  return canonical_;
}
inline bool Link::canonical() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.canonical)
  return _internal_canonical();
}
inline void Link::_internal_set_canonical(bool value) {
  _has_bits_[0] |= 0x00000400u;
  canonical_ = value;
}
inline void Link::set_canonical(bool value) {
  _internal_set_canonical(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Link.canonical)
}

// repeated .gazebo.msgs.Battery battery = 15;
inline int Link::_internal_battery_size() const {
  return battery_.size();
}
inline int Link::battery_size() const {
  return _internal_battery_size();
}
inline ::gazebo::msgs::Battery* Link::mutable_battery(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Link.battery)
  return battery_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Battery >*
Link::mutable_battery() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.Link.battery)
  return &battery_;
}
inline const ::gazebo::msgs::Battery& Link::_internal_battery(int index) const {
  return battery_.Get(index);
}
inline const ::gazebo::msgs::Battery& Link::battery(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.battery)
  return _internal_battery(index);
}
inline ::gazebo::msgs::Battery* Link::_internal_add_battery() {
  return battery_.Add();
}
inline ::gazebo::msgs::Battery* Link::add_battery() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.Link.battery)
  return _internal_add_battery();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Battery >&
Link::battery() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.Link.battery)
  return battery_;
}

// optional bool enable_wind = 16;
inline bool Link::_internal_has_enable_wind() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Link::has_enable_wind() const {
  return _internal_has_enable_wind();
}
inline void Link::clear_enable_wind() {
  enable_wind_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Link::_internal_enable_wind() const {
  return enable_wind_;
}
inline bool Link::enable_wind() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.enable_wind)
  return _internal_enable_wind();
}
inline void Link::_internal_set_enable_wind(bool value) {
  _has_bits_[0] |= 0x00000800u;
  enable_wind_ = value;
}
inline void Link::set_enable_wind(bool value) {
  _internal_set_enable_wind(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Link.enable_wind)
}

// optional .gazebo.msgs.Vector3d wind = 17;
inline bool Link::_internal_has_wind() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || wind_ != nullptr);
  return value;
}
inline bool Link::has_wind() const {
  return _internal_has_wind();
}
inline const ::gazebo::msgs::Vector3d& Link::_internal_wind() const {
  const ::gazebo::msgs::Vector3d* p = wind_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& Link::wind() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.wind)
  return _internal_wind();
}
inline ::gazebo::msgs::Vector3d* Link::release_wind() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Link.wind)
  _has_bits_[0] &= ~0x00000010u;
  ::gazebo::msgs::Vector3d* temp = wind_;
  wind_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Link::_internal_mutable_wind() {
  _has_bits_[0] |= 0x00000010u;
  if (wind_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    wind_ = p;
  }
  return wind_;
}
inline ::gazebo::msgs::Vector3d* Link::mutable_wind() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Link.wind)
  return _internal_mutable_wind();
}
inline void Link::set_allocated_wind(::gazebo::msgs::Vector3d* wind) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wind_);
  }
  if (wind) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wind = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wind, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  wind_ = wind;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Link.wind)
}

// repeated .gazebo.msgs.Light light = 18;
inline int Link::_internal_light_size() const {
  return light_.size();
}
inline int Link::light_size() const {
  return _internal_light_size();
}
inline ::gazebo::msgs::Light* Link::mutable_light(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Link.light)
  return light_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Light >*
Link::mutable_light() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.Link.light)
  return &light_;
}
inline const ::gazebo::msgs::Light& Link::_internal_light(int index) const {
  return light_.Get(index);
}
inline const ::gazebo::msgs::Light& Link::light(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Link.light)
  return _internal_light(index);
}
inline ::gazebo::msgs::Light* Link::_internal_add_light() {
  return light_.Add();
}
inline ::gazebo::msgs::Light* Link::add_light() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.Link.light)
  return _internal_add_light();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Light >&
Link::light() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.Link.light)
  return light_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::Link> LinkPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::Link const> ConstLinkPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_link_2eproto
