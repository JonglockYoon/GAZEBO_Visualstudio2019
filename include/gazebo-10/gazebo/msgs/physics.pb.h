// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: physics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_physics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_physics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_physics_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_physics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_physics_2eproto;
namespace gazebo {
namespace msgs {
class Physics;
class PhysicsDefaultTypeInternal;
GZ_MSGS_VISIBLE extern PhysicsDefaultTypeInternal _Physics_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::Physics* Arena::CreateMaybeMessage<::gazebo::msgs::Physics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

enum Physics_Type : int {
  Physics_Type_ODE = 1,
  Physics_Type_BULLET = 2,
  Physics_Type_SIMBODY = 3,
  Physics_Type_DART = 4
};
GZ_MSGS_VISIBLE bool Physics_Type_IsValid(int value);
constexpr Physics_Type Physics_Type_Type_MIN = Physics_Type_ODE;
constexpr Physics_Type Physics_Type_Type_MAX = Physics_Type_DART;
constexpr int Physics_Type_Type_ARRAYSIZE = Physics_Type_Type_MAX + 1;

GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Physics_Type_descriptor();
template<typename T>
inline const std::string& Physics_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Physics_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Physics_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Physics_Type_descriptor(), enum_t_value);
}
inline bool Physics_Type_Parse(
    const std::string& name, Physics_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Physics_Type>(
    Physics_Type_descriptor(), name, value);
}
// ===================================================================

class GZ_MSGS_VISIBLE Physics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.Physics) */ {
 public:
  Physics();
  virtual ~Physics();

  Physics(const Physics& from);
  Physics(Physics&& from) noexcept
    : Physics() {
    *this = ::std::move(from);
  }

  inline Physics& operator=(const Physics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Physics& operator=(Physics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Physics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Physics* internal_default_instance() {
    return reinterpret_cast<const Physics*>(
               &_Physics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Physics& a, Physics& b) {
    a.Swap(&b);
  }
  inline void Swap(Physics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Physics* New() const final {
    return CreateMaybeMessage<Physics>(nullptr);
  }

  Physics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Physics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Physics& from);
  void MergeFrom(const Physics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Physics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.Physics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_physics_2eproto);
    return ::descriptor_table_physics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Physics_Type Type;
  static constexpr Type ODE =
    Physics_Type_ODE;
  static constexpr Type BULLET =
    Physics_Type_BULLET;
  static constexpr Type SIMBODY =
    Physics_Type_SIMBODY;
  static constexpr Type DART =
    Physics_Type_DART;
  static inline bool Type_IsValid(int value) {
    return Physics_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Physics_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Physics_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Physics_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Physics_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Physics_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Physics_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSolverTypeFieldNumber = 2,
    kProfileNameFieldNumber = 16,
    kGravityFieldNumber = 11,
    kMagneticFieldFieldNumber = 17,
    kMinStepSizeFieldNumber = 3,
    kPreconItersFieldNumber = 4,
    kItersFieldNumber = 5,
    kSorFieldNumber = 6,
    kCfmFieldNumber = 7,
    kErpFieldNumber = 8,
    kContactMaxCorrectingVelFieldNumber = 9,
    kContactSurfaceLayerFieldNumber = 10,
    kRealTimeFactorFieldNumber = 13,
    kRealTimeUpdateRateFieldNumber = 14,
    kMaxStepSizeFieldNumber = 15,
    kEnablePhysicsFieldNumber = 12,
    kTypeFieldNumber = 1,
  };
  // optional string solver_type = 2;
  bool has_solver_type() const;
  private:
  bool _internal_has_solver_type() const;
  public:
  void clear_solver_type();
  const std::string& solver_type() const;
  void set_solver_type(const std::string& value);
  void set_solver_type(std::string&& value);
  void set_solver_type(const char* value);
  void set_solver_type(const char* value, size_t size);
  std::string* mutable_solver_type();
  std::string* release_solver_type();
  void set_allocated_solver_type(std::string* solver_type);
  private:
  const std::string& _internal_solver_type() const;
  void _internal_set_solver_type(const std::string& value);
  std::string* _internal_mutable_solver_type();
  public:

  // optional string profile_name = 16;
  bool has_profile_name() const;
  private:
  bool _internal_has_profile_name() const;
  public:
  void clear_profile_name();
  const std::string& profile_name() const;
  void set_profile_name(const std::string& value);
  void set_profile_name(std::string&& value);
  void set_profile_name(const char* value);
  void set_profile_name(const char* value, size_t size);
  std::string* mutable_profile_name();
  std::string* release_profile_name();
  void set_allocated_profile_name(std::string* profile_name);
  private:
  const std::string& _internal_profile_name() const;
  void _internal_set_profile_name(const std::string& value);
  std::string* _internal_mutable_profile_name();
  public:

  // optional .gazebo.msgs.Vector3d gravity = 11;
  bool has_gravity() const;
  private:
  bool _internal_has_gravity() const;
  public:
  void clear_gravity();
  const ::gazebo::msgs::Vector3d& gravity() const;
  ::gazebo::msgs::Vector3d* release_gravity();
  ::gazebo::msgs::Vector3d* mutable_gravity();
  void set_allocated_gravity(::gazebo::msgs::Vector3d* gravity);
  private:
  const ::gazebo::msgs::Vector3d& _internal_gravity() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_gravity();
  public:

  // optional .gazebo.msgs.Vector3d magnetic_field = 17;
  bool has_magnetic_field() const;
  private:
  bool _internal_has_magnetic_field() const;
  public:
  void clear_magnetic_field();
  const ::gazebo::msgs::Vector3d& magnetic_field() const;
  ::gazebo::msgs::Vector3d* release_magnetic_field();
  ::gazebo::msgs::Vector3d* mutable_magnetic_field();
  void set_allocated_magnetic_field(::gazebo::msgs::Vector3d* magnetic_field);
  private:
  const ::gazebo::msgs::Vector3d& _internal_magnetic_field() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_magnetic_field();
  public:

  // optional double min_step_size = 3;
  bool has_min_step_size() const;
  private:
  bool _internal_has_min_step_size() const;
  public:
  void clear_min_step_size();
  double min_step_size() const;
  void set_min_step_size(double value);
  private:
  double _internal_min_step_size() const;
  void _internal_set_min_step_size(double value);
  public:

  // optional int32 precon_iters = 4;
  bool has_precon_iters() const;
  private:
  bool _internal_has_precon_iters() const;
  public:
  void clear_precon_iters();
  ::PROTOBUF_NAMESPACE_ID::int32 precon_iters() const;
  void set_precon_iters(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precon_iters() const;
  void _internal_set_precon_iters(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 iters = 5;
  bool has_iters() const;
  private:
  bool _internal_has_iters() const;
  public:
  void clear_iters();
  ::PROTOBUF_NAMESPACE_ID::int32 iters() const;
  void set_iters(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iters() const;
  void _internal_set_iters(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double sor = 6;
  bool has_sor() const;
  private:
  bool _internal_has_sor() const;
  public:
  void clear_sor();
  double sor() const;
  void set_sor(double value);
  private:
  double _internal_sor() const;
  void _internal_set_sor(double value);
  public:

  // optional double cfm = 7;
  bool has_cfm() const;
  private:
  bool _internal_has_cfm() const;
  public:
  void clear_cfm();
  double cfm() const;
  void set_cfm(double value);
  private:
  double _internal_cfm() const;
  void _internal_set_cfm(double value);
  public:

  // optional double erp = 8;
  bool has_erp() const;
  private:
  bool _internal_has_erp() const;
  public:
  void clear_erp();
  double erp() const;
  void set_erp(double value);
  private:
  double _internal_erp() const;
  void _internal_set_erp(double value);
  public:

  // optional double contact_max_correcting_vel = 9;
  bool has_contact_max_correcting_vel() const;
  private:
  bool _internal_has_contact_max_correcting_vel() const;
  public:
  void clear_contact_max_correcting_vel();
  double contact_max_correcting_vel() const;
  void set_contact_max_correcting_vel(double value);
  private:
  double _internal_contact_max_correcting_vel() const;
  void _internal_set_contact_max_correcting_vel(double value);
  public:

  // optional double contact_surface_layer = 10;
  bool has_contact_surface_layer() const;
  private:
  bool _internal_has_contact_surface_layer() const;
  public:
  void clear_contact_surface_layer();
  double contact_surface_layer() const;
  void set_contact_surface_layer(double value);
  private:
  double _internal_contact_surface_layer() const;
  void _internal_set_contact_surface_layer(double value);
  public:

  // optional double real_time_factor = 13;
  bool has_real_time_factor() const;
  private:
  bool _internal_has_real_time_factor() const;
  public:
  void clear_real_time_factor();
  double real_time_factor() const;
  void set_real_time_factor(double value);
  private:
  double _internal_real_time_factor() const;
  void _internal_set_real_time_factor(double value);
  public:

  // optional double real_time_update_rate = 14;
  bool has_real_time_update_rate() const;
  private:
  bool _internal_has_real_time_update_rate() const;
  public:
  void clear_real_time_update_rate();
  double real_time_update_rate() const;
  void set_real_time_update_rate(double value);
  private:
  double _internal_real_time_update_rate() const;
  void _internal_set_real_time_update_rate(double value);
  public:

  // optional double max_step_size = 15;
  bool has_max_step_size() const;
  private:
  bool _internal_has_max_step_size() const;
  public:
  void clear_max_step_size();
  double max_step_size() const;
  void set_max_step_size(double value);
  private:
  double _internal_max_step_size() const;
  void _internal_set_max_step_size(double value);
  public:

  // optional bool enable_physics = 12;
  bool has_enable_physics() const;
  private:
  bool _internal_has_enable_physics() const;
  public:
  void clear_enable_physics();
  bool enable_physics() const;
  void set_enable_physics(bool value);
  private:
  bool _internal_enable_physics() const;
  void _internal_set_enable_physics(bool value);
  public:

  // optional .gazebo.msgs.Physics.Type type = 1 [default = ODE];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::gazebo::msgs::Physics_Type type() const;
  void set_type(::gazebo::msgs::Physics_Type value);
  private:
  ::gazebo::msgs::Physics_Type _internal_type() const;
  void _internal_set_type(::gazebo::msgs::Physics_Type value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Physics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr solver_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_name_;
  ::gazebo::msgs::Vector3d* gravity_;
  ::gazebo::msgs::Vector3d* magnetic_field_;
  double min_step_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 precon_iters_;
  ::PROTOBUF_NAMESPACE_ID::int32 iters_;
  double sor_;
  double cfm_;
  double erp_;
  double contact_max_correcting_vel_;
  double contact_surface_layer_;
  double real_time_factor_;
  double real_time_update_rate_;
  double max_step_size_;
  bool enable_physics_;
  int type_;
  friend struct ::TableStruct_physics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Physics

// optional .gazebo.msgs.Physics.Type type = 1 [default = ODE];
inline bool Physics::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Physics::has_type() const {
  return _internal_has_type();
}
inline void Physics::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::gazebo::msgs::Physics_Type Physics::_internal_type() const {
  return static_cast< ::gazebo::msgs::Physics_Type >(type_);
}
inline ::gazebo::msgs::Physics_Type Physics::type() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.type)
  return _internal_type();
}
inline void Physics::_internal_set_type(::gazebo::msgs::Physics_Type value) {
  assert(::gazebo::msgs::Physics_Type_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  type_ = value;
}
inline void Physics::set_type(::gazebo::msgs::Physics_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.type)
}

// optional string solver_type = 2;
inline bool Physics::_internal_has_solver_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Physics::has_solver_type() const {
  return _internal_has_solver_type();
}
inline void Physics::clear_solver_type() {
  solver_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Physics::solver_type() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.solver_type)
  return _internal_solver_type();
}
inline void Physics::set_solver_type(const std::string& value) {
  _internal_set_solver_type(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.solver_type)
}
inline std::string* Physics::mutable_solver_type() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Physics.solver_type)
  return _internal_mutable_solver_type();
}
inline const std::string& Physics::_internal_solver_type() const {
  return solver_type_.GetNoArena();
}
inline void Physics::_internal_set_solver_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  solver_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Physics::set_solver_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  solver_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.Physics.solver_type)
}
inline void Physics::set_solver_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  solver_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.Physics.solver_type)
}
inline void Physics::set_solver_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  solver_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.Physics.solver_type)
}
inline std::string* Physics::_internal_mutable_solver_type() {
  _has_bits_[0] |= 0x00000001u;
  return solver_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Physics::release_solver_type() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Physics.solver_type)
  if (!has_solver_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return solver_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Physics::set_allocated_solver_type(std::string* solver_type) {
  if (solver_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  solver_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), solver_type);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Physics.solver_type)
}

// optional double min_step_size = 3;
inline bool Physics::_internal_has_min_step_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Physics::has_min_step_size() const {
  return _internal_has_min_step_size();
}
inline void Physics::clear_min_step_size() {
  min_step_size_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Physics::_internal_min_step_size() const {
  return min_step_size_;
}
inline double Physics::min_step_size() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.min_step_size)
  return _internal_min_step_size();
}
inline void Physics::_internal_set_min_step_size(double value) {
  _has_bits_[0] |= 0x00000010u;
  min_step_size_ = value;
}
inline void Physics::set_min_step_size(double value) {
  _internal_set_min_step_size(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.min_step_size)
}

// optional int32 precon_iters = 4;
inline bool Physics::_internal_has_precon_iters() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Physics::has_precon_iters() const {
  return _internal_has_precon_iters();
}
inline void Physics::clear_precon_iters() {
  precon_iters_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Physics::_internal_precon_iters() const {
  return precon_iters_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Physics::precon_iters() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.precon_iters)
  return _internal_precon_iters();
}
inline void Physics::_internal_set_precon_iters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  precon_iters_ = value;
}
inline void Physics::set_precon_iters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precon_iters(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.precon_iters)
}

// optional int32 iters = 5;
inline bool Physics::_internal_has_iters() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Physics::has_iters() const {
  return _internal_has_iters();
}
inline void Physics::clear_iters() {
  iters_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Physics::_internal_iters() const {
  return iters_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Physics::iters() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.iters)
  return _internal_iters();
}
inline void Physics::_internal_set_iters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  iters_ = value;
}
inline void Physics::set_iters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iters(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.iters)
}

// optional double sor = 6;
inline bool Physics::_internal_has_sor() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Physics::has_sor() const {
  return _internal_has_sor();
}
inline void Physics::clear_sor() {
  sor_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Physics::_internal_sor() const {
  return sor_;
}
inline double Physics::sor() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.sor)
  return _internal_sor();
}
inline void Physics::_internal_set_sor(double value) {
  _has_bits_[0] |= 0x00000080u;
  sor_ = value;
}
inline void Physics::set_sor(double value) {
  _internal_set_sor(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.sor)
}

// optional double cfm = 7;
inline bool Physics::_internal_has_cfm() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Physics::has_cfm() const {
  return _internal_has_cfm();
}
inline void Physics::clear_cfm() {
  cfm_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Physics::_internal_cfm() const {
  return cfm_;
}
inline double Physics::cfm() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.cfm)
  return _internal_cfm();
}
inline void Physics::_internal_set_cfm(double value) {
  _has_bits_[0] |= 0x00000100u;
  cfm_ = value;
}
inline void Physics::set_cfm(double value) {
  _internal_set_cfm(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.cfm)
}

// optional double erp = 8;
inline bool Physics::_internal_has_erp() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Physics::has_erp() const {
  return _internal_has_erp();
}
inline void Physics::clear_erp() {
  erp_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double Physics::_internal_erp() const {
  return erp_;
}
inline double Physics::erp() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.erp)
  return _internal_erp();
}
inline void Physics::_internal_set_erp(double value) {
  _has_bits_[0] |= 0x00000200u;
  erp_ = value;
}
inline void Physics::set_erp(double value) {
  _internal_set_erp(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.erp)
}

// optional double contact_max_correcting_vel = 9;
inline bool Physics::_internal_has_contact_max_correcting_vel() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Physics::has_contact_max_correcting_vel() const {
  return _internal_has_contact_max_correcting_vel();
}
inline void Physics::clear_contact_max_correcting_vel() {
  contact_max_correcting_vel_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double Physics::_internal_contact_max_correcting_vel() const {
  return contact_max_correcting_vel_;
}
inline double Physics::contact_max_correcting_vel() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.contact_max_correcting_vel)
  return _internal_contact_max_correcting_vel();
}
inline void Physics::_internal_set_contact_max_correcting_vel(double value) {
  _has_bits_[0] |= 0x00000400u;
  contact_max_correcting_vel_ = value;
}
inline void Physics::set_contact_max_correcting_vel(double value) {
  _internal_set_contact_max_correcting_vel(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.contact_max_correcting_vel)
}

// optional double contact_surface_layer = 10;
inline bool Physics::_internal_has_contact_surface_layer() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Physics::has_contact_surface_layer() const {
  return _internal_has_contact_surface_layer();
}
inline void Physics::clear_contact_surface_layer() {
  contact_surface_layer_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double Physics::_internal_contact_surface_layer() const {
  return contact_surface_layer_;
}
inline double Physics::contact_surface_layer() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.contact_surface_layer)
  return _internal_contact_surface_layer();
}
inline void Physics::_internal_set_contact_surface_layer(double value) {
  _has_bits_[0] |= 0x00000800u;
  contact_surface_layer_ = value;
}
inline void Physics::set_contact_surface_layer(double value) {
  _internal_set_contact_surface_layer(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.contact_surface_layer)
}

// optional .gazebo.msgs.Vector3d gravity = 11;
inline bool Physics::_internal_has_gravity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || gravity_ != nullptr);
  return value;
}
inline bool Physics::has_gravity() const {
  return _internal_has_gravity();
}
inline const ::gazebo::msgs::Vector3d& Physics::_internal_gravity() const {
  const ::gazebo::msgs::Vector3d* p = gravity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& Physics::gravity() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.gravity)
  return _internal_gravity();
}
inline ::gazebo::msgs::Vector3d* Physics::release_gravity() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Physics.gravity)
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::Vector3d* temp = gravity_;
  gravity_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Physics::_internal_mutable_gravity() {
  _has_bits_[0] |= 0x00000004u;
  if (gravity_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    gravity_ = p;
  }
  return gravity_;
}
inline ::gazebo::msgs::Vector3d* Physics::mutable_gravity() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Physics.gravity)
  return _internal_mutable_gravity();
}
inline void Physics::set_allocated_gravity(::gazebo::msgs::Vector3d* gravity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gravity_);
  }
  if (gravity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gravity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gravity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  gravity_ = gravity;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Physics.gravity)
}

// optional bool enable_physics = 12;
inline bool Physics::_internal_has_enable_physics() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Physics::has_enable_physics() const {
  return _internal_has_enable_physics();
}
inline void Physics::clear_enable_physics() {
  enable_physics_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool Physics::_internal_enable_physics() const {
  return enable_physics_;
}
inline bool Physics::enable_physics() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.enable_physics)
  return _internal_enable_physics();
}
inline void Physics::_internal_set_enable_physics(bool value) {
  _has_bits_[0] |= 0x00008000u;
  enable_physics_ = value;
}
inline void Physics::set_enable_physics(bool value) {
  _internal_set_enable_physics(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.enable_physics)
}

// optional double real_time_factor = 13;
inline bool Physics::_internal_has_real_time_factor() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Physics::has_real_time_factor() const {
  return _internal_has_real_time_factor();
}
inline void Physics::clear_real_time_factor() {
  real_time_factor_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double Physics::_internal_real_time_factor() const {
  return real_time_factor_;
}
inline double Physics::real_time_factor() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.real_time_factor)
  return _internal_real_time_factor();
}
inline void Physics::_internal_set_real_time_factor(double value) {
  _has_bits_[0] |= 0x00001000u;
  real_time_factor_ = value;
}
inline void Physics::set_real_time_factor(double value) {
  _internal_set_real_time_factor(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.real_time_factor)
}

// optional double real_time_update_rate = 14;
inline bool Physics::_internal_has_real_time_update_rate() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Physics::has_real_time_update_rate() const {
  return _internal_has_real_time_update_rate();
}
inline void Physics::clear_real_time_update_rate() {
  real_time_update_rate_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double Physics::_internal_real_time_update_rate() const {
  return real_time_update_rate_;
}
inline double Physics::real_time_update_rate() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.real_time_update_rate)
  return _internal_real_time_update_rate();
}
inline void Physics::_internal_set_real_time_update_rate(double value) {
  _has_bits_[0] |= 0x00002000u;
  real_time_update_rate_ = value;
}
inline void Physics::set_real_time_update_rate(double value) {
  _internal_set_real_time_update_rate(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.real_time_update_rate)
}

// optional double max_step_size = 15;
inline bool Physics::_internal_has_max_step_size() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Physics::has_max_step_size() const {
  return _internal_has_max_step_size();
}
inline void Physics::clear_max_step_size() {
  max_step_size_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double Physics::_internal_max_step_size() const {
  return max_step_size_;
}
inline double Physics::max_step_size() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.max_step_size)
  return _internal_max_step_size();
}
inline void Physics::_internal_set_max_step_size(double value) {
  _has_bits_[0] |= 0x00004000u;
  max_step_size_ = value;
}
inline void Physics::set_max_step_size(double value) {
  _internal_set_max_step_size(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.max_step_size)
}

// optional string profile_name = 16;
inline bool Physics::_internal_has_profile_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Physics::has_profile_name() const {
  return _internal_has_profile_name();
}
inline void Physics::clear_profile_name() {
  profile_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Physics::profile_name() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.profile_name)
  return _internal_profile_name();
}
inline void Physics::set_profile_name(const std::string& value) {
  _internal_set_profile_name(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Physics.profile_name)
}
inline std::string* Physics::mutable_profile_name() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Physics.profile_name)
  return _internal_mutable_profile_name();
}
inline const std::string& Physics::_internal_profile_name() const {
  return profile_name_.GetNoArena();
}
inline void Physics::_internal_set_profile_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  profile_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Physics::set_profile_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  profile_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.Physics.profile_name)
}
inline void Physics::set_profile_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  profile_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.Physics.profile_name)
}
inline void Physics::set_profile_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  profile_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.Physics.profile_name)
}
inline std::string* Physics::_internal_mutable_profile_name() {
  _has_bits_[0] |= 0x00000002u;
  return profile_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Physics::release_profile_name() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Physics.profile_name)
  if (!has_profile_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return profile_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Physics::set_allocated_profile_name(std::string* profile_name) {
  if (profile_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  profile_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile_name);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Physics.profile_name)
}

// optional .gazebo.msgs.Vector3d magnetic_field = 17;
inline bool Physics::_internal_has_magnetic_field() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || magnetic_field_ != nullptr);
  return value;
}
inline bool Physics::has_magnetic_field() const {
  return _internal_has_magnetic_field();
}
inline const ::gazebo::msgs::Vector3d& Physics::_internal_magnetic_field() const {
  const ::gazebo::msgs::Vector3d* p = magnetic_field_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& Physics::magnetic_field() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Physics.magnetic_field)
  return _internal_magnetic_field();
}
inline ::gazebo::msgs::Vector3d* Physics::release_magnetic_field() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Physics.magnetic_field)
  _has_bits_[0] &= ~0x00000008u;
  ::gazebo::msgs::Vector3d* temp = magnetic_field_;
  magnetic_field_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Physics::_internal_mutable_magnetic_field() {
  _has_bits_[0] |= 0x00000008u;
  if (magnetic_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    magnetic_field_ = p;
  }
  return magnetic_field_;
}
inline ::gazebo::msgs::Vector3d* Physics::mutable_magnetic_field() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Physics.magnetic_field)
  return _internal_mutable_magnetic_field();
}
inline void Physics::set_allocated_magnetic_field(::gazebo::msgs::Vector3d* magnetic_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(magnetic_field_);
  }
  if (magnetic_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      magnetic_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, magnetic_field, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  magnetic_field_ = magnetic_field;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Physics.magnetic_field)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::Physics> PhysicsPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gazebo::msgs::Physics_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gazebo::msgs::Physics_Type>() {
  return ::gazebo::msgs::Physics_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

typedef const boost::shared_ptr<gazebo::msgs::Physics const> ConstPhysicsPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_physics_2eproto
