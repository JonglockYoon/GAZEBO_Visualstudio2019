// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: joint_cmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_joint_5fcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_joint_5fcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pid.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_joint_5fcmd_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_joint_5fcmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_joint_5fcmd_2eproto;
namespace gazebo {
namespace msgs {
class JointCmd;
class JointCmdDefaultTypeInternal;
GZ_MSGS_VISIBLE extern JointCmdDefaultTypeInternal _JointCmd_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::JointCmd* Arena::CreateMaybeMessage<::gazebo::msgs::JointCmd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE JointCmd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.JointCmd) */ {
 public:
  JointCmd();
  virtual ~JointCmd();

  JointCmd(const JointCmd& from);
  JointCmd(JointCmd&& from) noexcept
    : JointCmd() {
    *this = ::std::move(from);
  }

  inline JointCmd& operator=(const JointCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointCmd& operator=(JointCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointCmd* internal_default_instance() {
    return reinterpret_cast<const JointCmd*>(
               &_JointCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JointCmd& a, JointCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(JointCmd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointCmd* New() const final {
    return CreateMaybeMessage<JointCmd>(nullptr);
  }

  JointCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointCmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointCmd& from);
  void MergeFrom(const JointCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.JointCmd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_joint_5fcmd_2eproto);
    return ::descriptor_table_joint_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPositionFieldNumber = 4,
    kVelocityFieldNumber = 5,
    kForceFieldNumber = 3,
    kAxisFieldNumber = 2,
    kResetFieldNumber = 6,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .gazebo.msgs.PID position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::gazebo::msgs::PID& position() const;
  ::gazebo::msgs::PID* release_position();
  ::gazebo::msgs::PID* mutable_position();
  void set_allocated_position(::gazebo::msgs::PID* position);
  private:
  const ::gazebo::msgs::PID& _internal_position() const;
  ::gazebo::msgs::PID* _internal_mutable_position();
  public:

  // optional .gazebo.msgs.PID velocity = 5;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::gazebo::msgs::PID& velocity() const;
  ::gazebo::msgs::PID* release_velocity();
  ::gazebo::msgs::PID* mutable_velocity();
  void set_allocated_velocity(::gazebo::msgs::PID* velocity);
  private:
  const ::gazebo::msgs::PID& _internal_velocity() const;
  ::gazebo::msgs::PID* _internal_mutable_velocity();
  public:

  // optional double force = 3;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  double force() const;
  void set_force(double value);
  private:
  double _internal_force() const;
  void _internal_set_force(double value);
  public:

  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool reset = 6;
  bool has_reset() const;
  private:
  bool _internal_has_reset() const;
  public:
  void clear_reset();
  bool reset() const;
  void set_reset(bool value);
  private:
  bool _internal_reset() const;
  void _internal_set_reset(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.JointCmd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::gazebo::msgs::PID* position_;
  ::gazebo::msgs::PID* velocity_;
  double force_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  bool reset_;
  friend struct ::TableStruct_joint_5fcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JointCmd

// required string name = 1;
inline bool JointCmd::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool JointCmd::has_name() const {
  return _internal_has_name();
}
inline void JointCmd::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JointCmd::name() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.JointCmd.name)
  return _internal_name();
}
inline void JointCmd::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.JointCmd.name)
}
inline std::string* JointCmd::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.JointCmd.name)
  return _internal_mutable_name();
}
inline const std::string& JointCmd::_internal_name() const {
  return name_.GetNoArena();
}
inline void JointCmd::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JointCmd::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.JointCmd.name)
}
inline void JointCmd::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.JointCmd.name)
}
inline void JointCmd::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.JointCmd.name)
}
inline std::string* JointCmd::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JointCmd::release_name() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.JointCmd.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JointCmd::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.JointCmd.name)
}

// optional int32 axis = 2 [default = 0];
inline bool JointCmd::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool JointCmd::has_axis() const {
  return _internal_has_axis();
}
inline void JointCmd::clear_axis() {
  axis_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JointCmd::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JointCmd::axis() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.JointCmd.axis)
  return _internal_axis();
}
inline void JointCmd::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  axis_ = value;
}
inline void JointCmd::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.JointCmd.axis)
}

// optional double force = 3;
inline bool JointCmd::_internal_has_force() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool JointCmd::has_force() const {
  return _internal_has_force();
}
inline void JointCmd::clear_force() {
  force_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double JointCmd::_internal_force() const {
  return force_;
}
inline double JointCmd::force() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.JointCmd.force)
  return _internal_force();
}
inline void JointCmd::_internal_set_force(double value) {
  _has_bits_[0] |= 0x00000008u;
  force_ = value;
}
inline void JointCmd::set_force(double value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.JointCmd.force)
}

// optional .gazebo.msgs.PID position = 4;
inline bool JointCmd::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool JointCmd::has_position() const {
  return _internal_has_position();
}
inline const ::gazebo::msgs::PID& JointCmd::_internal_position() const {
  const ::gazebo::msgs::PID* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::PID*>(
      &::gazebo::msgs::_PID_default_instance_);
}
inline const ::gazebo::msgs::PID& JointCmd::position() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.JointCmd.position)
  return _internal_position();
}
inline ::gazebo::msgs::PID* JointCmd::release_position() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.JointCmd.position)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::PID* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::PID* JointCmd::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000002u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::PID>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::gazebo::msgs::PID* JointCmd::mutable_position() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.JointCmd.position)
  return _internal_mutable_position();
}
inline void JointCmd::set_allocated_position(::gazebo::msgs::PID* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.JointCmd.position)
}

// optional .gazebo.msgs.PID velocity = 5;
inline bool JointCmd::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || velocity_ != nullptr);
  return value;
}
inline bool JointCmd::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::gazebo::msgs::PID& JointCmd::_internal_velocity() const {
  const ::gazebo::msgs::PID* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::PID*>(
      &::gazebo::msgs::_PID_default_instance_);
}
inline const ::gazebo::msgs::PID& JointCmd::velocity() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.JointCmd.velocity)
  return _internal_velocity();
}
inline ::gazebo::msgs::PID* JointCmd::release_velocity() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.JointCmd.velocity)
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::PID* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::PID* JointCmd::_internal_mutable_velocity() {
  _has_bits_[0] |= 0x00000004u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::PID>(GetArenaNoVirtual());
    velocity_ = p;
  }
  return velocity_;
}
inline ::gazebo::msgs::PID* JointCmd::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.JointCmd.velocity)
  return _internal_mutable_velocity();
}
inline void JointCmd::set_allocated_velocity(::gazebo::msgs::PID* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.JointCmd.velocity)
}

// optional bool reset = 6;
inline bool JointCmd::_internal_has_reset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool JointCmd::has_reset() const {
  return _internal_has_reset();
}
inline void JointCmd::clear_reset() {
  reset_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool JointCmd::_internal_reset() const {
  return reset_;
}
inline bool JointCmd::reset() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.JointCmd.reset)
  return _internal_reset();
}
inline void JointCmd::_internal_set_reset(bool value) {
  _has_bits_[0] |= 0x00000020u;
  reset_ = value;
}
inline void JointCmd::set_reset(bool value) {
  _internal_set_reset(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.JointCmd.reset)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::JointCmd> JointCmdPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::JointCmd const> ConstJointCmdPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_joint_5fcmd_2eproto
