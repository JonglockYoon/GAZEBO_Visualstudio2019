// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_imu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_imu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#include "vector3d.pb.h"
#include "quaternion.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_imu_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_imu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_imu_2eproto;
namespace gazebo {
namespace msgs {
class IMU;
class IMUDefaultTypeInternal;
GZ_MSGS_VISIBLE extern IMUDefaultTypeInternal _IMU_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::IMU* Arena::CreateMaybeMessage<::gazebo::msgs::IMU>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE IMU :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.IMU) */ {
 public:
  IMU();
  virtual ~IMU();

  IMU(const IMU& from);
  IMU(IMU&& from) noexcept
    : IMU() {
    *this = ::std::move(from);
  }

  inline IMU& operator=(const IMU& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMU& operator=(IMU&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IMU& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMU* internal_default_instance() {
    return reinterpret_cast<const IMU*>(
               &_IMU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMU& a, IMU& b) {
    a.Swap(&b);
  }
  inline void Swap(IMU* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMU* New() const final {
    return CreateMaybeMessage<IMU>(nullptr);
  }

  IMU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMU>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMU& from);
  void MergeFrom(const IMU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.IMU";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_imu_2eproto);
    return ::descriptor_table_imu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityNameFieldNumber = 2,
    kStampFieldNumber = 1,
    kOrientationFieldNumber = 3,
    kAngularVelocityFieldNumber = 4,
    kLinearAccelerationFieldNumber = 5,
  };
  // required string entity_name = 2;
  bool has_entity_name() const;
  private:
  bool _internal_has_entity_name() const;
  public:
  void clear_entity_name();
  const std::string& entity_name() const;
  void set_entity_name(const std::string& value);
  void set_entity_name(std::string&& value);
  void set_entity_name(const char* value);
  void set_entity_name(const char* value, size_t size);
  std::string* mutable_entity_name();
  std::string* release_entity_name();
  void set_allocated_entity_name(std::string* entity_name);
  private:
  const std::string& _internal_entity_name() const;
  void _internal_set_entity_name(const std::string& value);
  std::string* _internal_mutable_entity_name();
  public:

  // required .gazebo.msgs.Time stamp = 1;
  bool has_stamp() const;
  private:
  bool _internal_has_stamp() const;
  public:
  void clear_stamp();
  const ::gazebo::msgs::Time& stamp() const;
  ::gazebo::msgs::Time* release_stamp();
  ::gazebo::msgs::Time* mutable_stamp();
  void set_allocated_stamp(::gazebo::msgs::Time* stamp);
  private:
  const ::gazebo::msgs::Time& _internal_stamp() const;
  ::gazebo::msgs::Time* _internal_mutable_stamp();
  public:

  // required .gazebo.msgs.Quaternion orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::gazebo::msgs::Quaternion& orientation() const;
  ::gazebo::msgs::Quaternion* release_orientation();
  ::gazebo::msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::gazebo::msgs::Quaternion* orientation);
  private:
  const ::gazebo::msgs::Quaternion& _internal_orientation() const;
  ::gazebo::msgs::Quaternion* _internal_mutable_orientation();
  public:

  // required .gazebo.msgs.Vector3d angular_velocity = 4;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::gazebo::msgs::Vector3d& angular_velocity() const;
  ::gazebo::msgs::Vector3d* release_angular_velocity();
  ::gazebo::msgs::Vector3d* mutable_angular_velocity();
  void set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity);
  private:
  const ::gazebo::msgs::Vector3d& _internal_angular_velocity() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_angular_velocity();
  public:

  // required .gazebo.msgs.Vector3d linear_acceleration = 5;
  bool has_linear_acceleration() const;
  private:
  bool _internal_has_linear_acceleration() const;
  public:
  void clear_linear_acceleration();
  const ::gazebo::msgs::Vector3d& linear_acceleration() const;
  ::gazebo::msgs::Vector3d* release_linear_acceleration();
  ::gazebo::msgs::Vector3d* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::gazebo::msgs::Vector3d* linear_acceleration);
  private:
  const ::gazebo::msgs::Vector3d& _internal_linear_acceleration() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_linear_acceleration();
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.IMU)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_name_;
  ::gazebo::msgs::Time* stamp_;
  ::gazebo::msgs::Quaternion* orientation_;
  ::gazebo::msgs::Vector3d* angular_velocity_;
  ::gazebo::msgs::Vector3d* linear_acceleration_;
  friend struct ::TableStruct_imu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMU

// required .gazebo.msgs.Time stamp = 1;
inline bool IMU::_internal_has_stamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || stamp_ != nullptr);
  return value;
}
inline bool IMU::has_stamp() const {
  return _internal_has_stamp();
}
inline const ::gazebo::msgs::Time& IMU::_internal_stamp() const {
  const ::gazebo::msgs::Time* p = stamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Time*>(
      &::gazebo::msgs::_Time_default_instance_);
}
inline const ::gazebo::msgs::Time& IMU::stamp() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.IMU.stamp)
  return _internal_stamp();
}
inline ::gazebo::msgs::Time* IMU::release_stamp() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.IMU.stamp)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Time* temp = stamp_;
  stamp_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Time* IMU::_internal_mutable_stamp() {
  _has_bits_[0] |= 0x00000002u;
  if (stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Time>(GetArenaNoVirtual());
    stamp_ = p;
  }
  return stamp_;
}
inline ::gazebo::msgs::Time* IMU::mutable_stamp() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.IMU.stamp)
  return _internal_mutable_stamp();
}
inline void IMU::set_allocated_stamp(::gazebo::msgs::Time* stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp_);
  }
  if (stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stamp_ = stamp;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.IMU.stamp)
}

// required string entity_name = 2;
inline bool IMU::_internal_has_entity_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IMU::has_entity_name() const {
  return _internal_has_entity_name();
}
inline void IMU::clear_entity_name() {
  entity_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IMU::entity_name() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.IMU.entity_name)
  return _internal_entity_name();
}
inline void IMU::set_entity_name(const std::string& value) {
  _internal_set_entity_name(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.IMU.entity_name)
}
inline std::string* IMU::mutable_entity_name() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.IMU.entity_name)
  return _internal_mutable_entity_name();
}
inline const std::string& IMU::_internal_entity_name() const {
  return entity_name_.GetNoArena();
}
inline void IMU::_internal_set_entity_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  entity_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IMU::set_entity_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  entity_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.IMU.entity_name)
}
inline void IMU::set_entity_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  entity_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.IMU.entity_name)
}
inline void IMU::set_entity_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  entity_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.IMU.entity_name)
}
inline std::string* IMU::_internal_mutable_entity_name() {
  _has_bits_[0] |= 0x00000001u;
  return entity_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IMU::release_entity_name() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.IMU.entity_name)
  if (!has_entity_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return entity_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IMU::set_allocated_entity_name(std::string* entity_name) {
  if (entity_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entity_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_name);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.IMU.entity_name)
}

// required .gazebo.msgs.Quaternion orientation = 3;
inline bool IMU::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || orientation_ != nullptr);
  return value;
}
inline bool IMU::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::gazebo::msgs::Quaternion& IMU::_internal_orientation() const {
  const ::gazebo::msgs::Quaternion* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Quaternion*>(
      &::gazebo::msgs::_Quaternion_default_instance_);
}
inline const ::gazebo::msgs::Quaternion& IMU::orientation() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.IMU.orientation)
  return _internal_orientation();
}
inline ::gazebo::msgs::Quaternion* IMU::release_orientation() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.IMU.orientation)
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Quaternion* IMU::_internal_mutable_orientation() {
  _has_bits_[0] |= 0x00000004u;
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Quaternion>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::gazebo::msgs::Quaternion* IMU::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.IMU.orientation)
  return _internal_mutable_orientation();
}
inline void IMU::set_allocated_orientation(::gazebo::msgs::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.IMU.orientation)
}

// required .gazebo.msgs.Vector3d angular_velocity = 4;
inline bool IMU::_internal_has_angular_velocity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || angular_velocity_ != nullptr);
  return value;
}
inline bool IMU::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline const ::gazebo::msgs::Vector3d& IMU::_internal_angular_velocity() const {
  const ::gazebo::msgs::Vector3d* p = angular_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& IMU::angular_velocity() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.IMU.angular_velocity)
  return _internal_angular_velocity();
}
inline ::gazebo::msgs::Vector3d* IMU::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.IMU.angular_velocity)
  _has_bits_[0] &= ~0x00000008u;
  ::gazebo::msgs::Vector3d* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* IMU::_internal_mutable_angular_velocity() {
  _has_bits_[0] |= 0x00000008u;
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::gazebo::msgs::Vector3d* IMU::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.IMU.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void IMU::set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.IMU.angular_velocity)
}

// required .gazebo.msgs.Vector3d linear_acceleration = 5;
inline bool IMU::_internal_has_linear_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || linear_acceleration_ != nullptr);
  return value;
}
inline bool IMU::has_linear_acceleration() const {
  return _internal_has_linear_acceleration();
}
inline const ::gazebo::msgs::Vector3d& IMU::_internal_linear_acceleration() const {
  const ::gazebo::msgs::Vector3d* p = linear_acceleration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& IMU::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.IMU.linear_acceleration)
  return _internal_linear_acceleration();
}
inline ::gazebo::msgs::Vector3d* IMU::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.IMU.linear_acceleration)
  _has_bits_[0] &= ~0x00000010u;
  ::gazebo::msgs::Vector3d* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* IMU::_internal_mutable_linear_acceleration() {
  _has_bits_[0] |= 0x00000010u;
  if (linear_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    linear_acceleration_ = p;
  }
  return linear_acceleration_;
}
inline ::gazebo::msgs::Vector3d* IMU::mutable_linear_acceleration() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.IMU.linear_acceleration)
  return _internal_mutable_linear_acceleration();
}
inline void IMU::set_allocated_linear_acceleration(::gazebo::msgs::Vector3d* linear_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_);
  }
  if (linear_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.IMU.linear_acceleration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::IMU> IMUPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::IMU const> ConstIMUPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_imu_2eproto
