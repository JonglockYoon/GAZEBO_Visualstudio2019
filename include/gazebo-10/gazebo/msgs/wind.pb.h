// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wind.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wind_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wind_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wind_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_wind_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wind_2eproto;
namespace gazebo {
namespace msgs {
class Wind;
class WindDefaultTypeInternal;
GZ_MSGS_VISIBLE extern WindDefaultTypeInternal _Wind_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::Wind* Arena::CreateMaybeMessage<::gazebo::msgs::Wind>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE Wind :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.Wind) */ {
 public:
  Wind();
  virtual ~Wind();

  Wind(const Wind& from);
  Wind(Wind&& from) noexcept
    : Wind() {
    *this = ::std::move(from);
  }

  inline Wind& operator=(const Wind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wind& operator=(Wind&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wind& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wind* internal_default_instance() {
    return reinterpret_cast<const Wind*>(
               &_Wind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Wind& a, Wind& b) {
    a.Swap(&b);
  }
  inline void Swap(Wind* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wind* New() const final {
    return CreateMaybeMessage<Wind>(nullptr);
  }

  Wind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wind& from);
  void MergeFrom(const Wind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.Wind";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wind_2eproto);
    return ::descriptor_table_wind_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearVelocityFieldNumber = 1,
    kEnableWindFieldNumber = 2,
  };
  // optional .gazebo.msgs.Vector3d linear_velocity = 1;
  bool has_linear_velocity() const;
  private:
  bool _internal_has_linear_velocity() const;
  public:
  void clear_linear_velocity();
  const ::gazebo::msgs::Vector3d& linear_velocity() const;
  ::gazebo::msgs::Vector3d* release_linear_velocity();
  ::gazebo::msgs::Vector3d* mutable_linear_velocity();
  void set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity);
  private:
  const ::gazebo::msgs::Vector3d& _internal_linear_velocity() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_linear_velocity();
  public:

  // optional bool enable_wind = 2;
  bool has_enable_wind() const;
  private:
  bool _internal_has_enable_wind() const;
  public:
  void clear_enable_wind();
  bool enable_wind() const;
  void set_enable_wind(bool value);
  private:
  bool _internal_enable_wind() const;
  void _internal_set_enable_wind(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Wind)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Vector3d* linear_velocity_;
  bool enable_wind_;
  friend struct ::TableStruct_wind_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Wind

// optional .gazebo.msgs.Vector3d linear_velocity = 1;
inline bool Wind::_internal_has_linear_velocity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || linear_velocity_ != nullptr);
  return value;
}
inline bool Wind::has_linear_velocity() const {
  return _internal_has_linear_velocity();
}
inline const ::gazebo::msgs::Vector3d& Wind::_internal_linear_velocity() const {
  const ::gazebo::msgs::Vector3d* p = linear_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& Wind::linear_velocity() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Wind.linear_velocity)
  return _internal_linear_velocity();
}
inline ::gazebo::msgs::Vector3d* Wind::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Wind.linear_velocity)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::Vector3d* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Wind::_internal_mutable_linear_velocity() {
  _has_bits_[0] |= 0x00000001u;
  if (linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    linear_velocity_ = p;
  }
  return linear_velocity_;
}
inline ::gazebo::msgs::Vector3d* Wind::mutable_linear_velocity() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Wind.linear_velocity)
  return _internal_mutable_linear_velocity();
}
inline void Wind::set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  if (linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Wind.linear_velocity)
}

// optional bool enable_wind = 2;
inline bool Wind::_internal_has_enable_wind() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Wind::has_enable_wind() const {
  return _internal_has_enable_wind();
}
inline void Wind::clear_enable_wind() {
  enable_wind_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Wind::_internal_enable_wind() const {
  return enable_wind_;
}
inline bool Wind::enable_wind() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Wind.enable_wind)
  return _internal_enable_wind();
}
inline void Wind::_internal_set_enable_wind(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_wind_ = value;
}
inline void Wind::set_enable_wind(bool value) {
  _internal_set_enable_wind(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Wind.enable_wind)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::Wind> WindPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::Wind const> ConstWindPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wind_2eproto
