// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wireless_node.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wireless_5fnode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wireless_5fnode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wireless_5fnode_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_wireless_5fnode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wireless_5fnode_2eproto;
namespace gazebo {
namespace msgs {
class WirelessNode;
class WirelessNodeDefaultTypeInternal;
GZ_MSGS_VISIBLE extern WirelessNodeDefaultTypeInternal _WirelessNode_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::WirelessNode* Arena::CreateMaybeMessage<::gazebo::msgs::WirelessNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE WirelessNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.WirelessNode) */ {
 public:
  WirelessNode();
  virtual ~WirelessNode();

  WirelessNode(const WirelessNode& from);
  WirelessNode(WirelessNode&& from) noexcept
    : WirelessNode() {
    *this = ::std::move(from);
  }

  inline WirelessNode& operator=(const WirelessNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline WirelessNode& operator=(WirelessNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WirelessNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WirelessNode* internal_default_instance() {
    return reinterpret_cast<const WirelessNode*>(
               &_WirelessNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WirelessNode& a, WirelessNode& b) {
    a.Swap(&b);
  }
  inline void Swap(WirelessNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WirelessNode* New() const final {
    return CreateMaybeMessage<WirelessNode>(nullptr);
  }

  WirelessNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WirelessNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WirelessNode& from);
  void MergeFrom(const WirelessNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WirelessNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.WirelessNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wireless_5fnode_2eproto);
    return ::descriptor_table_wireless_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEssidFieldNumber = 1,
    kFrequencyFieldNumber = 2,
    kSignalLevelFieldNumber = 3,
  };
  // required string essid = 1;
  bool has_essid() const;
  private:
  bool _internal_has_essid() const;
  public:
  void clear_essid();
  const std::string& essid() const;
  void set_essid(const std::string& value);
  void set_essid(std::string&& value);
  void set_essid(const char* value);
  void set_essid(const char* value, size_t size);
  std::string* mutable_essid();
  std::string* release_essid();
  void set_allocated_essid(std::string* essid);
  private:
  const std::string& _internal_essid() const;
  void _internal_set_essid(const std::string& value);
  std::string* _internal_mutable_essid();
  public:

  // required double frequency = 2;
  bool has_frequency() const;
  private:
  bool _internal_has_frequency() const;
  public:
  void clear_frequency();
  double frequency() const;
  void set_frequency(double value);
  private:
  double _internal_frequency() const;
  void _internal_set_frequency(double value);
  public:

  // required double signal_level = 3;
  bool has_signal_level() const;
  private:
  bool _internal_has_signal_level() const;
  public:
  void clear_signal_level();
  double signal_level() const;
  void set_signal_level(double value);
  private:
  double _internal_signal_level() const;
  void _internal_set_signal_level(double value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.WirelessNode)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr essid_;
  double frequency_;
  double signal_level_;
  friend struct ::TableStruct_wireless_5fnode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WirelessNode

// required string essid = 1;
inline bool WirelessNode::_internal_has_essid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WirelessNode::has_essid() const {
  return _internal_has_essid();
}
inline void WirelessNode::clear_essid() {
  essid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WirelessNode::essid() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.WirelessNode.essid)
  return _internal_essid();
}
inline void WirelessNode::set_essid(const std::string& value) {
  _internal_set_essid(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.WirelessNode.essid)
}
inline std::string* WirelessNode::mutable_essid() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.WirelessNode.essid)
  return _internal_mutable_essid();
}
inline const std::string& WirelessNode::_internal_essid() const {
  return essid_.GetNoArena();
}
inline void WirelessNode::_internal_set_essid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  essid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WirelessNode::set_essid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  essid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.WirelessNode.essid)
}
inline void WirelessNode::set_essid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  essid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.WirelessNode.essid)
}
inline void WirelessNode::set_essid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  essid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.WirelessNode.essid)
}
inline std::string* WirelessNode::_internal_mutable_essid() {
  _has_bits_[0] |= 0x00000001u;
  return essid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WirelessNode::release_essid() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.WirelessNode.essid)
  if (!has_essid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return essid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WirelessNode::set_allocated_essid(std::string* essid) {
  if (essid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  essid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), essid);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.WirelessNode.essid)
}

// required double frequency = 2;
inline bool WirelessNode::_internal_has_frequency() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WirelessNode::has_frequency() const {
  return _internal_has_frequency();
}
inline void WirelessNode::clear_frequency() {
  frequency_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double WirelessNode::_internal_frequency() const {
  return frequency_;
}
inline double WirelessNode::frequency() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.WirelessNode.frequency)
  return _internal_frequency();
}
inline void WirelessNode::_internal_set_frequency(double value) {
  _has_bits_[0] |= 0x00000002u;
  frequency_ = value;
}
inline void WirelessNode::set_frequency(double value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.WirelessNode.frequency)
}

// required double signal_level = 3;
inline bool WirelessNode::_internal_has_signal_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WirelessNode::has_signal_level() const {
  return _internal_has_signal_level();
}
inline void WirelessNode::clear_signal_level() {
  signal_level_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double WirelessNode::_internal_signal_level() const {
  return signal_level_;
}
inline double WirelessNode::signal_level() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.WirelessNode.signal_level)
  return _internal_signal_level();
}
inline void WirelessNode::_internal_set_signal_level(double value) {
  _has_bits_[0] |= 0x00000004u;
  signal_level_ = value;
}
inline void WirelessNode::set_signal_level(double value) {
  _internal_set_signal_level(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.WirelessNode.signal_level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::WirelessNode> WirelessNodePtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::WirelessNode const> ConstWirelessNodePtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wireless_5fnode_2eproto
