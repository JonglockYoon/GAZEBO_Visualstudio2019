// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_world_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_world_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "log_playback_stats.pb.h"
#include "time.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_world_5fstats_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_world_5fstats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_world_5fstats_2eproto;
namespace gazebo {
namespace msgs {
class WorldStatistics;
class WorldStatisticsDefaultTypeInternal;
GZ_MSGS_VISIBLE extern WorldStatisticsDefaultTypeInternal _WorldStatistics_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::WorldStatistics* Arena::CreateMaybeMessage<::gazebo::msgs::WorldStatistics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE WorldStatistics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.WorldStatistics) */ {
 public:
  WorldStatistics();
  virtual ~WorldStatistics();

  WorldStatistics(const WorldStatistics& from);
  WorldStatistics(WorldStatistics&& from) noexcept
    : WorldStatistics() {
    *this = ::std::move(from);
  }

  inline WorldStatistics& operator=(const WorldStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldStatistics& operator=(WorldStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldStatistics* internal_default_instance() {
    return reinterpret_cast<const WorldStatistics*>(
               &_WorldStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorldStatistics& a, WorldStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldStatistics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldStatistics* New() const final {
    return CreateMaybeMessage<WorldStatistics>(nullptr);
  }

  WorldStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldStatistics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldStatistics& from);
  void MergeFrom(const WorldStatistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.WorldStatistics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_5fstats_2eproto);
    return ::descriptor_table_world_5fstats_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimTimeFieldNumber = 2,
    kPauseTimeFieldNumber = 3,
    kRealTimeFieldNumber = 4,
    kLogPlaybackStatsFieldNumber = 8,
    kIterationsFieldNumber = 6,
    kPausedFieldNumber = 5,
    kModelCountFieldNumber = 7,
  };
  // required .gazebo.msgs.Time sim_time = 2;
  bool has_sim_time() const;
  private:
  bool _internal_has_sim_time() const;
  public:
  void clear_sim_time();
  const ::gazebo::msgs::Time& sim_time() const;
  ::gazebo::msgs::Time* release_sim_time();
  ::gazebo::msgs::Time* mutable_sim_time();
  void set_allocated_sim_time(::gazebo::msgs::Time* sim_time);
  private:
  const ::gazebo::msgs::Time& _internal_sim_time() const;
  ::gazebo::msgs::Time* _internal_mutable_sim_time();
  public:

  // required .gazebo.msgs.Time pause_time = 3;
  bool has_pause_time() const;
  private:
  bool _internal_has_pause_time() const;
  public:
  void clear_pause_time();
  const ::gazebo::msgs::Time& pause_time() const;
  ::gazebo::msgs::Time* release_pause_time();
  ::gazebo::msgs::Time* mutable_pause_time();
  void set_allocated_pause_time(::gazebo::msgs::Time* pause_time);
  private:
  const ::gazebo::msgs::Time& _internal_pause_time() const;
  ::gazebo::msgs::Time* _internal_mutable_pause_time();
  public:

  // required .gazebo.msgs.Time real_time = 4;
  bool has_real_time() const;
  private:
  bool _internal_has_real_time() const;
  public:
  void clear_real_time();
  const ::gazebo::msgs::Time& real_time() const;
  ::gazebo::msgs::Time* release_real_time();
  ::gazebo::msgs::Time* mutable_real_time();
  void set_allocated_real_time(::gazebo::msgs::Time* real_time);
  private:
  const ::gazebo::msgs::Time& _internal_real_time() const;
  ::gazebo::msgs::Time* _internal_mutable_real_time();
  public:

  // optional .gazebo.msgs.LogPlaybackStatistics log_playback_stats = 8;
  bool has_log_playback_stats() const;
  private:
  bool _internal_has_log_playback_stats() const;
  public:
  void clear_log_playback_stats();
  const ::gazebo::msgs::LogPlaybackStatistics& log_playback_stats() const;
  ::gazebo::msgs::LogPlaybackStatistics* release_log_playback_stats();
  ::gazebo::msgs::LogPlaybackStatistics* mutable_log_playback_stats();
  void set_allocated_log_playback_stats(::gazebo::msgs::LogPlaybackStatistics* log_playback_stats);
  private:
  const ::gazebo::msgs::LogPlaybackStatistics& _internal_log_playback_stats() const;
  ::gazebo::msgs::LogPlaybackStatistics* _internal_mutable_log_playback_stats();
  public:

  // required uint64 iterations = 6;
  bool has_iterations() const;
  private:
  bool _internal_has_iterations() const;
  public:
  void clear_iterations();
  ::PROTOBUF_NAMESPACE_ID::uint64 iterations() const;
  void set_iterations(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iterations() const;
  void _internal_set_iterations(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required bool paused = 5;
  bool has_paused() const;
  private:
  bool _internal_has_paused() const;
  public:
  void clear_paused();
  bool paused() const;
  void set_paused(bool value);
  private:
  bool _internal_paused() const;
  void _internal_set_paused(bool value);
  public:

  // optional int32 model_count = 7;
  bool has_model_count() const;
  private:
  bool _internal_has_model_count() const;
  public:
  void clear_model_count();
  ::PROTOBUF_NAMESPACE_ID::int32 model_count() const;
  void set_model_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_count() const;
  void _internal_set_model_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.WorldStatistics)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Time* sim_time_;
  ::gazebo::msgs::Time* pause_time_;
  ::gazebo::msgs::Time* real_time_;
  ::gazebo::msgs::LogPlaybackStatistics* log_playback_stats_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iterations_;
  bool paused_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_count_;
  friend struct ::TableStruct_world_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorldStatistics

// required .gazebo.msgs.Time sim_time = 2;
inline bool WorldStatistics::_internal_has_sim_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sim_time_ != nullptr);
  return value;
}
inline bool WorldStatistics::has_sim_time() const {
  return _internal_has_sim_time();
}
inline const ::gazebo::msgs::Time& WorldStatistics::_internal_sim_time() const {
  const ::gazebo::msgs::Time* p = sim_time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Time*>(
      &::gazebo::msgs::_Time_default_instance_);
}
inline const ::gazebo::msgs::Time& WorldStatistics::sim_time() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.WorldStatistics.sim_time)
  return _internal_sim_time();
}
inline ::gazebo::msgs::Time* WorldStatistics::release_sim_time() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.WorldStatistics.sim_time)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::Time* temp = sim_time_;
  sim_time_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Time* WorldStatistics::_internal_mutable_sim_time() {
  _has_bits_[0] |= 0x00000001u;
  if (sim_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Time>(GetArenaNoVirtual());
    sim_time_ = p;
  }
  return sim_time_;
}
inline ::gazebo::msgs::Time* WorldStatistics::mutable_sim_time() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.WorldStatistics.sim_time)
  return _internal_mutable_sim_time();
}
inline void WorldStatistics::set_allocated_sim_time(::gazebo::msgs::Time* sim_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sim_time_);
  }
  if (sim_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sim_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sim_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sim_time_ = sim_time;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.WorldStatistics.sim_time)
}

// required .gazebo.msgs.Time pause_time = 3;
inline bool WorldStatistics::_internal_has_pause_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pause_time_ != nullptr);
  return value;
}
inline bool WorldStatistics::has_pause_time() const {
  return _internal_has_pause_time();
}
inline const ::gazebo::msgs::Time& WorldStatistics::_internal_pause_time() const {
  const ::gazebo::msgs::Time* p = pause_time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Time*>(
      &::gazebo::msgs::_Time_default_instance_);
}
inline const ::gazebo::msgs::Time& WorldStatistics::pause_time() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.WorldStatistics.pause_time)
  return _internal_pause_time();
}
inline ::gazebo::msgs::Time* WorldStatistics::release_pause_time() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.WorldStatistics.pause_time)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Time* temp = pause_time_;
  pause_time_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Time* WorldStatistics::_internal_mutable_pause_time() {
  _has_bits_[0] |= 0x00000002u;
  if (pause_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Time>(GetArenaNoVirtual());
    pause_time_ = p;
  }
  return pause_time_;
}
inline ::gazebo::msgs::Time* WorldStatistics::mutable_pause_time() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.WorldStatistics.pause_time)
  return _internal_mutable_pause_time();
}
inline void WorldStatistics::set_allocated_pause_time(::gazebo::msgs::Time* pause_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pause_time_);
  }
  if (pause_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pause_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pause_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pause_time_ = pause_time;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.WorldStatistics.pause_time)
}

// required .gazebo.msgs.Time real_time = 4;
inline bool WorldStatistics::_internal_has_real_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || real_time_ != nullptr);
  return value;
}
inline bool WorldStatistics::has_real_time() const {
  return _internal_has_real_time();
}
inline const ::gazebo::msgs::Time& WorldStatistics::_internal_real_time() const {
  const ::gazebo::msgs::Time* p = real_time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Time*>(
      &::gazebo::msgs::_Time_default_instance_);
}
inline const ::gazebo::msgs::Time& WorldStatistics::real_time() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.WorldStatistics.real_time)
  return _internal_real_time();
}
inline ::gazebo::msgs::Time* WorldStatistics::release_real_time() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.WorldStatistics.real_time)
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::Time* temp = real_time_;
  real_time_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Time* WorldStatistics::_internal_mutable_real_time() {
  _has_bits_[0] |= 0x00000004u;
  if (real_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Time>(GetArenaNoVirtual());
    real_time_ = p;
  }
  return real_time_;
}
inline ::gazebo::msgs::Time* WorldStatistics::mutable_real_time() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.WorldStatistics.real_time)
  return _internal_mutable_real_time();
}
inline void WorldStatistics::set_allocated_real_time(::gazebo::msgs::Time* real_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(real_time_);
  }
  if (real_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      real_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, real_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  real_time_ = real_time;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.WorldStatistics.real_time)
}

// required bool paused = 5;
inline bool WorldStatistics::_internal_has_paused() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WorldStatistics::has_paused() const {
  return _internal_has_paused();
}
inline void WorldStatistics::clear_paused() {
  paused_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool WorldStatistics::_internal_paused() const {
  return paused_;
}
inline bool WorldStatistics::paused() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.WorldStatistics.paused)
  return _internal_paused();
}
inline void WorldStatistics::_internal_set_paused(bool value) {
  _has_bits_[0] |= 0x00000020u;
  paused_ = value;
}
inline void WorldStatistics::set_paused(bool value) {
  _internal_set_paused(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.WorldStatistics.paused)
}

// required uint64 iterations = 6;
inline bool WorldStatistics::_internal_has_iterations() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WorldStatistics::has_iterations() const {
  return _internal_has_iterations();
}
inline void WorldStatistics::clear_iterations() {
  iterations_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldStatistics::_internal_iterations() const {
  return iterations_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldStatistics::iterations() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.WorldStatistics.iterations)
  return _internal_iterations();
}
inline void WorldStatistics::_internal_set_iterations(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  iterations_ = value;
}
inline void WorldStatistics::set_iterations(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iterations(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.WorldStatistics.iterations)
}

// optional int32 model_count = 7;
inline bool WorldStatistics::_internal_has_model_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WorldStatistics::has_model_count() const {
  return _internal_has_model_count();
}
inline void WorldStatistics::clear_model_count() {
  model_count_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldStatistics::_internal_model_count() const {
  return model_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldStatistics::model_count() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.WorldStatistics.model_count)
  return _internal_model_count();
}
inline void WorldStatistics::_internal_set_model_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  model_count_ = value;
}
inline void WorldStatistics::set_model_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_count(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.WorldStatistics.model_count)
}

// optional .gazebo.msgs.LogPlaybackStatistics log_playback_stats = 8;
inline bool WorldStatistics::_internal_has_log_playback_stats() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || log_playback_stats_ != nullptr);
  return value;
}
inline bool WorldStatistics::has_log_playback_stats() const {
  return _internal_has_log_playback_stats();
}
inline const ::gazebo::msgs::LogPlaybackStatistics& WorldStatistics::_internal_log_playback_stats() const {
  const ::gazebo::msgs::LogPlaybackStatistics* p = log_playback_stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::LogPlaybackStatistics*>(
      &::gazebo::msgs::_LogPlaybackStatistics_default_instance_);
}
inline const ::gazebo::msgs::LogPlaybackStatistics& WorldStatistics::log_playback_stats() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.WorldStatistics.log_playback_stats)
  return _internal_log_playback_stats();
}
inline ::gazebo::msgs::LogPlaybackStatistics* WorldStatistics::release_log_playback_stats() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.WorldStatistics.log_playback_stats)
  _has_bits_[0] &= ~0x00000008u;
  ::gazebo::msgs::LogPlaybackStatistics* temp = log_playback_stats_;
  log_playback_stats_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::LogPlaybackStatistics* WorldStatistics::_internal_mutable_log_playback_stats() {
  _has_bits_[0] |= 0x00000008u;
  if (log_playback_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::LogPlaybackStatistics>(GetArenaNoVirtual());
    log_playback_stats_ = p;
  }
  return log_playback_stats_;
}
inline ::gazebo::msgs::LogPlaybackStatistics* WorldStatistics::mutable_log_playback_stats() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.WorldStatistics.log_playback_stats)
  return _internal_mutable_log_playback_stats();
}
inline void WorldStatistics::set_allocated_log_playback_stats(::gazebo::msgs::LogPlaybackStatistics* log_playback_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_playback_stats_);
  }
  if (log_playback_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      log_playback_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_playback_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  log_playback_stats_ = log_playback_stats;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.WorldStatistics.log_playback_stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::WorldStatistics> WorldStatisticsPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::WorldStatistics const> ConstWorldStatisticsPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_world_5fstats_2eproto
