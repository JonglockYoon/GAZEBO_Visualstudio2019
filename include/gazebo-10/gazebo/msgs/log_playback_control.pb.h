// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_playback_control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_log_5fplayback_5fcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_log_5fplayback_5fcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_log_5fplayback_5fcontrol_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_log_5fplayback_5fcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_log_5fplayback_5fcontrol_2eproto;
namespace gazebo {
namespace msgs {
class LogPlaybackControl;
class LogPlaybackControlDefaultTypeInternal;
GZ_MSGS_VISIBLE extern LogPlaybackControlDefaultTypeInternal _LogPlaybackControl_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::LogPlaybackControl* Arena::CreateMaybeMessage<::gazebo::msgs::LogPlaybackControl>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE LogPlaybackControl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.LogPlaybackControl) */ {
 public:
  LogPlaybackControl();
  virtual ~LogPlaybackControl();

  LogPlaybackControl(const LogPlaybackControl& from);
  LogPlaybackControl(LogPlaybackControl&& from) noexcept
    : LogPlaybackControl() {
    *this = ::std::move(from);
  }

  inline LogPlaybackControl& operator=(const LogPlaybackControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogPlaybackControl& operator=(LogPlaybackControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogPlaybackControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogPlaybackControl* internal_default_instance() {
    return reinterpret_cast<const LogPlaybackControl*>(
               &_LogPlaybackControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogPlaybackControl& a, LogPlaybackControl& b) {
    a.Swap(&b);
  }
  inline void Swap(LogPlaybackControl* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogPlaybackControl* New() const final {
    return CreateMaybeMessage<LogPlaybackControl>(nullptr);
  }

  LogPlaybackControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogPlaybackControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogPlaybackControl& from);
  void MergeFrom(const LogPlaybackControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogPlaybackControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.LogPlaybackControl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_log_5fplayback_5fcontrol_2eproto);
    return ::descriptor_table_log_5fplayback_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeekFieldNumber = 5,
    kMultiStepFieldNumber = 2,
    kPauseFieldNumber = 1,
    kRewindFieldNumber = 3,
    kForwardFieldNumber = 4,
  };
  // optional .gazebo.msgs.Time seek = 5;
  bool has_seek() const;
  private:
  bool _internal_has_seek() const;
  public:
  void clear_seek();
  const ::gazebo::msgs::Time& seek() const;
  ::gazebo::msgs::Time* release_seek();
  ::gazebo::msgs::Time* mutable_seek();
  void set_allocated_seek(::gazebo::msgs::Time* seek);
  private:
  const ::gazebo::msgs::Time& _internal_seek() const;
  ::gazebo::msgs::Time* _internal_mutable_seek();
  public:

  // optional sint32 multi_step = 2;
  bool has_multi_step() const;
  private:
  bool _internal_has_multi_step() const;
  public:
  void clear_multi_step();
  ::PROTOBUF_NAMESPACE_ID::int32 multi_step() const;
  void set_multi_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multi_step() const;
  void _internal_set_multi_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool pause = 1;
  bool has_pause() const;
  private:
  bool _internal_has_pause() const;
  public:
  void clear_pause();
  bool pause() const;
  void set_pause(bool value);
  private:
  bool _internal_pause() const;
  void _internal_set_pause(bool value);
  public:

  // optional bool rewind = 3;
  bool has_rewind() const;
  private:
  bool _internal_has_rewind() const;
  public:
  void clear_rewind();
  bool rewind() const;
  void set_rewind(bool value);
  private:
  bool _internal_rewind() const;
  void _internal_set_rewind(bool value);
  public:

  // optional bool forward = 4;
  bool has_forward() const;
  private:
  bool _internal_has_forward() const;
  public:
  void clear_forward();
  bool forward() const;
  void set_forward(bool value);
  private:
  bool _internal_forward() const;
  void _internal_set_forward(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.LogPlaybackControl)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Time* seek_;
  ::PROTOBUF_NAMESPACE_ID::int32 multi_step_;
  bool pause_;
  bool rewind_;
  bool forward_;
  friend struct ::TableStruct_log_5fplayback_5fcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogPlaybackControl

// optional bool pause = 1;
inline bool LogPlaybackControl::_internal_has_pause() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogPlaybackControl::has_pause() const {
  return _internal_has_pause();
}
inline void LogPlaybackControl::clear_pause() {
  pause_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool LogPlaybackControl::_internal_pause() const {
  return pause_;
}
inline bool LogPlaybackControl::pause() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogPlaybackControl.pause)
  return _internal_pause();
}
inline void LogPlaybackControl::_internal_set_pause(bool value) {
  _has_bits_[0] |= 0x00000004u;
  pause_ = value;
}
inline void LogPlaybackControl::set_pause(bool value) {
  _internal_set_pause(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.LogPlaybackControl.pause)
}

// optional sint32 multi_step = 2;
inline bool LogPlaybackControl::_internal_has_multi_step() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogPlaybackControl::has_multi_step() const {
  return _internal_has_multi_step();
}
inline void LogPlaybackControl::clear_multi_step() {
  multi_step_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogPlaybackControl::_internal_multi_step() const {
  return multi_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogPlaybackControl::multi_step() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogPlaybackControl.multi_step)
  return _internal_multi_step();
}
inline void LogPlaybackControl::_internal_set_multi_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  multi_step_ = value;
}
inline void LogPlaybackControl::set_multi_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multi_step(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.LogPlaybackControl.multi_step)
}

// optional bool rewind = 3;
inline bool LogPlaybackControl::_internal_has_rewind() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LogPlaybackControl::has_rewind() const {
  return _internal_has_rewind();
}
inline void LogPlaybackControl::clear_rewind() {
  rewind_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool LogPlaybackControl::_internal_rewind() const {
  return rewind_;
}
inline bool LogPlaybackControl::rewind() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogPlaybackControl.rewind)
  return _internal_rewind();
}
inline void LogPlaybackControl::_internal_set_rewind(bool value) {
  _has_bits_[0] |= 0x00000008u;
  rewind_ = value;
}
inline void LogPlaybackControl::set_rewind(bool value) {
  _internal_set_rewind(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.LogPlaybackControl.rewind)
}

// optional bool forward = 4;
inline bool LogPlaybackControl::_internal_has_forward() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LogPlaybackControl::has_forward() const {
  return _internal_has_forward();
}
inline void LogPlaybackControl::clear_forward() {
  forward_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LogPlaybackControl::_internal_forward() const {
  return forward_;
}
inline bool LogPlaybackControl::forward() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogPlaybackControl.forward)
  return _internal_forward();
}
inline void LogPlaybackControl::_internal_set_forward(bool value) {
  _has_bits_[0] |= 0x00000010u;
  forward_ = value;
}
inline void LogPlaybackControl::set_forward(bool value) {
  _internal_set_forward(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.LogPlaybackControl.forward)
}

// optional .gazebo.msgs.Time seek = 5;
inline bool LogPlaybackControl::_internal_has_seek() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || seek_ != nullptr);
  return value;
}
inline bool LogPlaybackControl::has_seek() const {
  return _internal_has_seek();
}
inline const ::gazebo::msgs::Time& LogPlaybackControl::_internal_seek() const {
  const ::gazebo::msgs::Time* p = seek_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Time*>(
      &::gazebo::msgs::_Time_default_instance_);
}
inline const ::gazebo::msgs::Time& LogPlaybackControl::seek() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.LogPlaybackControl.seek)
  return _internal_seek();
}
inline ::gazebo::msgs::Time* LogPlaybackControl::release_seek() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.LogPlaybackControl.seek)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::Time* temp = seek_;
  seek_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Time* LogPlaybackControl::_internal_mutable_seek() {
  _has_bits_[0] |= 0x00000001u;
  if (seek_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Time>(GetArenaNoVirtual());
    seek_ = p;
  }
  return seek_;
}
inline ::gazebo::msgs::Time* LogPlaybackControl::mutable_seek() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.LogPlaybackControl.seek)
  return _internal_mutable_seek();
}
inline void LogPlaybackControl::set_allocated_seek(::gazebo::msgs::Time* seek) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(seek_);
  }
  if (seek) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      seek = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seek, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  seek_ = seek;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.LogPlaybackControl.seek)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::LogPlaybackControl> LogPlaybackControlPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::LogPlaybackControl const> ConstLogPlaybackControlPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_log_5fplayback_5fcontrol_2eproto
