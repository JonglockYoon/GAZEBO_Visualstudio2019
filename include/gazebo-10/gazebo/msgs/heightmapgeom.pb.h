// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heightmapgeom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_heightmapgeom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_heightmapgeom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "image.pb.h"
#include "vector3d.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_heightmapgeom_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_heightmapgeom_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_heightmapgeom_2eproto;
namespace gazebo {
namespace msgs {
class HeightmapGeom;
class HeightmapGeomDefaultTypeInternal;
GZ_MSGS_VISIBLE extern HeightmapGeomDefaultTypeInternal _HeightmapGeom_default_instance_;
class HeightmapGeom_Blend;
class HeightmapGeom_BlendDefaultTypeInternal;
GZ_MSGS_VISIBLE extern HeightmapGeom_BlendDefaultTypeInternal _HeightmapGeom_Blend_default_instance_;
class HeightmapGeom_Texture;
class HeightmapGeom_TextureDefaultTypeInternal;
GZ_MSGS_VISIBLE extern HeightmapGeom_TextureDefaultTypeInternal _HeightmapGeom_Texture_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::HeightmapGeom* Arena::CreateMaybeMessage<::gazebo::msgs::HeightmapGeom>(Arena*);
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::HeightmapGeom_Blend* Arena::CreateMaybeMessage<::gazebo::msgs::HeightmapGeom_Blend>(Arena*);
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::HeightmapGeom_Texture* Arena::CreateMaybeMessage<::gazebo::msgs::HeightmapGeom_Texture>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE HeightmapGeom_Texture :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.HeightmapGeom.Texture) */ {
 public:
  HeightmapGeom_Texture();
  virtual ~HeightmapGeom_Texture();

  HeightmapGeom_Texture(const HeightmapGeom_Texture& from);
  HeightmapGeom_Texture(HeightmapGeom_Texture&& from) noexcept
    : HeightmapGeom_Texture() {
    *this = ::std::move(from);
  }

  inline HeightmapGeom_Texture& operator=(const HeightmapGeom_Texture& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeightmapGeom_Texture& operator=(HeightmapGeom_Texture&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeightmapGeom_Texture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeightmapGeom_Texture* internal_default_instance() {
    return reinterpret_cast<const HeightmapGeom_Texture*>(
               &_HeightmapGeom_Texture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HeightmapGeom_Texture& a, HeightmapGeom_Texture& b) {
    a.Swap(&b);
  }
  inline void Swap(HeightmapGeom_Texture* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeightmapGeom_Texture* New() const final {
    return CreateMaybeMessage<HeightmapGeom_Texture>(nullptr);
  }

  HeightmapGeom_Texture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeightmapGeom_Texture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeightmapGeom_Texture& from);
  void MergeFrom(const HeightmapGeom_Texture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeightmapGeom_Texture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.HeightmapGeom.Texture";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_heightmapgeom_2eproto);
    return ::descriptor_table_heightmapgeom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiffuseFieldNumber = 1,
    kNormalFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // required string diffuse = 1;
  bool has_diffuse() const;
  private:
  bool _internal_has_diffuse() const;
  public:
  void clear_diffuse();
  const std::string& diffuse() const;
  void set_diffuse(const std::string& value);
  void set_diffuse(std::string&& value);
  void set_diffuse(const char* value);
  void set_diffuse(const char* value, size_t size);
  std::string* mutable_diffuse();
  std::string* release_diffuse();
  void set_allocated_diffuse(std::string* diffuse);
  private:
  const std::string& _internal_diffuse() const;
  void _internal_set_diffuse(const std::string& value);
  std::string* _internal_mutable_diffuse();
  public:

  // required string normal = 2;
  bool has_normal() const;
  private:
  bool _internal_has_normal() const;
  public:
  void clear_normal();
  const std::string& normal() const;
  void set_normal(const std::string& value);
  void set_normal(std::string&& value);
  void set_normal(const char* value);
  void set_normal(const char* value, size_t size);
  std::string* mutable_normal();
  std::string* release_normal();
  void set_allocated_normal(std::string* normal);
  private:
  const std::string& _internal_normal() const;
  void _internal_set_normal(const std::string& value);
  std::string* _internal_mutable_normal();
  public:

  // required double size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  double size() const;
  void set_size(double value);
  private:
  double _internal_size() const;
  void _internal_set_size(double value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.HeightmapGeom.Texture)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diffuse_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr normal_;
  double size_;
  friend struct ::TableStruct_heightmapgeom_2eproto;
};
// -------------------------------------------------------------------

class GZ_MSGS_VISIBLE HeightmapGeom_Blend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.HeightmapGeom.Blend) */ {
 public:
  HeightmapGeom_Blend();
  virtual ~HeightmapGeom_Blend();

  HeightmapGeom_Blend(const HeightmapGeom_Blend& from);
  HeightmapGeom_Blend(HeightmapGeom_Blend&& from) noexcept
    : HeightmapGeom_Blend() {
    *this = ::std::move(from);
  }

  inline HeightmapGeom_Blend& operator=(const HeightmapGeom_Blend& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeightmapGeom_Blend& operator=(HeightmapGeom_Blend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeightmapGeom_Blend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeightmapGeom_Blend* internal_default_instance() {
    return reinterpret_cast<const HeightmapGeom_Blend*>(
               &_HeightmapGeom_Blend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HeightmapGeom_Blend& a, HeightmapGeom_Blend& b) {
    a.Swap(&b);
  }
  inline void Swap(HeightmapGeom_Blend* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeightmapGeom_Blend* New() const final {
    return CreateMaybeMessage<HeightmapGeom_Blend>(nullptr);
  }

  HeightmapGeom_Blend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeightmapGeom_Blend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeightmapGeom_Blend& from);
  void MergeFrom(const HeightmapGeom_Blend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeightmapGeom_Blend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.HeightmapGeom.Blend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_heightmapgeom_2eproto);
    return ::descriptor_table_heightmapgeom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinHeightFieldNumber = 1,
    kFadeDistFieldNumber = 2,
  };
  // required double min_height = 1;
  bool has_min_height() const;
  private:
  bool _internal_has_min_height() const;
  public:
  void clear_min_height();
  double min_height() const;
  void set_min_height(double value);
  private:
  double _internal_min_height() const;
  void _internal_set_min_height(double value);
  public:

  // required double fade_dist = 2;
  bool has_fade_dist() const;
  private:
  bool _internal_has_fade_dist() const;
  public:
  void clear_fade_dist();
  double fade_dist() const;
  void set_fade_dist(double value);
  private:
  double _internal_fade_dist() const;
  void _internal_set_fade_dist(double value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.HeightmapGeom.Blend)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double min_height_;
  double fade_dist_;
  friend struct ::TableStruct_heightmapgeom_2eproto;
};
// -------------------------------------------------------------------

class GZ_MSGS_VISIBLE HeightmapGeom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.HeightmapGeom) */ {
 public:
  HeightmapGeom();
  virtual ~HeightmapGeom();

  HeightmapGeom(const HeightmapGeom& from);
  HeightmapGeom(HeightmapGeom&& from) noexcept
    : HeightmapGeom() {
    *this = ::std::move(from);
  }

  inline HeightmapGeom& operator=(const HeightmapGeom& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeightmapGeom& operator=(HeightmapGeom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeightmapGeom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeightmapGeom* internal_default_instance() {
    return reinterpret_cast<const HeightmapGeom*>(
               &_HeightmapGeom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeightmapGeom& a, HeightmapGeom& b) {
    a.Swap(&b);
  }
  inline void Swap(HeightmapGeom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeightmapGeom* New() const final {
    return CreateMaybeMessage<HeightmapGeom>(nullptr);
  }

  HeightmapGeom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeightmapGeom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeightmapGeom& from);
  void MergeFrom(const HeightmapGeom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeightmapGeom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.HeightmapGeom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_heightmapgeom_2eproto);
    return ::descriptor_table_heightmapgeom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HeightmapGeom_Texture Texture;
  typedef HeightmapGeom_Blend Blend;

  // accessors -------------------------------------------------------

  enum : int {
    kHeightsFieldNumber = 4,
    kTextureFieldNumber = 7,
    kBlendFieldNumber = 8,
    kFilenameFieldNumber = 10,
    kImageFieldNumber = 1,
    kSizeFieldNumber = 2,
    kOriginFieldNumber = 3,
    kWidthFieldNumber = 5,
    kHeightFieldNumber = 6,
    kUseTerrainPagingFieldNumber = 9,
    kSamplingFieldNumber = 11,
  };
  // repeated float heights = 4;
  int heights_size() const;
  private:
  int _internal_heights_size() const;
  public:
  void clear_heights();
  private:
  float _internal_heights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_heights() const;
  void _internal_add_heights(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_heights();
  public:
  float heights(int index) const;
  void set_heights(int index, float value);
  void add_heights(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      heights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_heights();

  // repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
  int texture_size() const;
  private:
  int _internal_texture_size() const;
  public:
  void clear_texture();
  ::gazebo::msgs::HeightmapGeom_Texture* mutable_texture(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Texture >*
      mutable_texture();
  private:
  const ::gazebo::msgs::HeightmapGeom_Texture& _internal_texture(int index) const;
  ::gazebo::msgs::HeightmapGeom_Texture* _internal_add_texture();
  public:
  const ::gazebo::msgs::HeightmapGeom_Texture& texture(int index) const;
  ::gazebo::msgs::HeightmapGeom_Texture* add_texture();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Texture >&
      texture() const;

  // repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
  int blend_size() const;
  private:
  int _internal_blend_size() const;
  public:
  void clear_blend();
  ::gazebo::msgs::HeightmapGeom_Blend* mutable_blend(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Blend >*
      mutable_blend();
  private:
  const ::gazebo::msgs::HeightmapGeom_Blend& _internal_blend(int index) const;
  ::gazebo::msgs::HeightmapGeom_Blend* _internal_add_blend();
  public:
  const ::gazebo::msgs::HeightmapGeom_Blend& blend(int index) const;
  ::gazebo::msgs::HeightmapGeom_Blend* add_blend();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Blend >&
      blend() const;

  // optional string filename = 10;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional .gazebo.msgs.Image image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::gazebo::msgs::Image& image() const;
  ::gazebo::msgs::Image* release_image();
  ::gazebo::msgs::Image* mutable_image();
  void set_allocated_image(::gazebo::msgs::Image* image);
  private:
  const ::gazebo::msgs::Image& _internal_image() const;
  ::gazebo::msgs::Image* _internal_mutable_image();
  public:

  // required .gazebo.msgs.Vector3d size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::gazebo::msgs::Vector3d& size() const;
  ::gazebo::msgs::Vector3d* release_size();
  ::gazebo::msgs::Vector3d* mutable_size();
  void set_allocated_size(::gazebo::msgs::Vector3d* size);
  private:
  const ::gazebo::msgs::Vector3d& _internal_size() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_size();
  public:

  // optional .gazebo.msgs.Vector3d origin = 3;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::gazebo::msgs::Vector3d& origin() const;
  ::gazebo::msgs::Vector3d* release_origin();
  ::gazebo::msgs::Vector3d* mutable_origin();
  void set_allocated_origin(::gazebo::msgs::Vector3d* origin);
  private:
  const ::gazebo::msgs::Vector3d& _internal_origin() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_origin();
  public:

  // optional int32 width = 5;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 height = 6;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool use_terrain_paging = 9;
  bool has_use_terrain_paging() const;
  private:
  bool _internal_has_use_terrain_paging() const;
  public:
  void clear_use_terrain_paging();
  bool use_terrain_paging() const;
  void set_use_terrain_paging(bool value);
  private:
  bool _internal_use_terrain_paging() const;
  void _internal_set_use_terrain_paging(bool value);
  public:

  // optional uint32 sampling = 11;
  bool has_sampling() const;
  private:
  bool _internal_has_sampling() const;
  public:
  void clear_sampling();
  ::PROTOBUF_NAMESPACE_ID::uint32 sampling() const;
  void set_sampling(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sampling() const;
  void _internal_set_sampling(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.HeightmapGeom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > heights_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Texture > texture_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Blend > blend_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::gazebo::msgs::Image* image_;
  ::gazebo::msgs::Vector3d* size_;
  ::gazebo::msgs::Vector3d* origin_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  bool use_terrain_paging_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sampling_;
  friend struct ::TableStruct_heightmapgeom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HeightmapGeom_Texture

// required string diffuse = 1;
inline bool HeightmapGeom_Texture::_internal_has_diffuse() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeightmapGeom_Texture::has_diffuse() const {
  return _internal_has_diffuse();
}
inline void HeightmapGeom_Texture::clear_diffuse() {
  diffuse_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HeightmapGeom_Texture::diffuse() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.Texture.diffuse)
  return _internal_diffuse();
}
inline void HeightmapGeom_Texture::set_diffuse(const std::string& value) {
  _internal_set_diffuse(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.HeightmapGeom.Texture.diffuse)
}
inline std::string* HeightmapGeom_Texture::mutable_diffuse() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.HeightmapGeom.Texture.diffuse)
  return _internal_mutable_diffuse();
}
inline const std::string& HeightmapGeom_Texture::_internal_diffuse() const {
  return diffuse_.GetNoArena();
}
inline void HeightmapGeom_Texture::_internal_set_diffuse(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  diffuse_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HeightmapGeom_Texture::set_diffuse(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  diffuse_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.HeightmapGeom.Texture.diffuse)
}
inline void HeightmapGeom_Texture::set_diffuse(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  diffuse_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.HeightmapGeom.Texture.diffuse)
}
inline void HeightmapGeom_Texture::set_diffuse(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  diffuse_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.HeightmapGeom.Texture.diffuse)
}
inline std::string* HeightmapGeom_Texture::_internal_mutable_diffuse() {
  _has_bits_[0] |= 0x00000001u;
  return diffuse_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HeightmapGeom_Texture::release_diffuse() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.HeightmapGeom.Texture.diffuse)
  if (!has_diffuse()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return diffuse_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HeightmapGeom_Texture::set_allocated_diffuse(std::string* diffuse) {
  if (diffuse != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  diffuse_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diffuse);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.HeightmapGeom.Texture.diffuse)
}

// required string normal = 2;
inline bool HeightmapGeom_Texture::_internal_has_normal() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HeightmapGeom_Texture::has_normal() const {
  return _internal_has_normal();
}
inline void HeightmapGeom_Texture::clear_normal() {
  normal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HeightmapGeom_Texture::normal() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.Texture.normal)
  return _internal_normal();
}
inline void HeightmapGeom_Texture::set_normal(const std::string& value) {
  _internal_set_normal(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.HeightmapGeom.Texture.normal)
}
inline std::string* HeightmapGeom_Texture::mutable_normal() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.HeightmapGeom.Texture.normal)
  return _internal_mutable_normal();
}
inline const std::string& HeightmapGeom_Texture::_internal_normal() const {
  return normal_.GetNoArena();
}
inline void HeightmapGeom_Texture::_internal_set_normal(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  normal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HeightmapGeom_Texture::set_normal(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  normal_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.HeightmapGeom.Texture.normal)
}
inline void HeightmapGeom_Texture::set_normal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  normal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.HeightmapGeom.Texture.normal)
}
inline void HeightmapGeom_Texture::set_normal(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  normal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.HeightmapGeom.Texture.normal)
}
inline std::string* HeightmapGeom_Texture::_internal_mutable_normal() {
  _has_bits_[0] |= 0x00000002u;
  return normal_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HeightmapGeom_Texture::release_normal() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.HeightmapGeom.Texture.normal)
  if (!has_normal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return normal_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HeightmapGeom_Texture::set_allocated_normal(std::string* normal) {
  if (normal != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  normal_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), normal);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.HeightmapGeom.Texture.normal)
}

// required double size = 3;
inline bool HeightmapGeom_Texture::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HeightmapGeom_Texture::has_size() const {
  return _internal_has_size();
}
inline void HeightmapGeom_Texture::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double HeightmapGeom_Texture::_internal_size() const {
  return size_;
}
inline double HeightmapGeom_Texture::size() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.Texture.size)
  return _internal_size();
}
inline void HeightmapGeom_Texture::_internal_set_size(double value) {
  _has_bits_[0] |= 0x00000004u;
  size_ = value;
}
inline void HeightmapGeom_Texture::set_size(double value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.HeightmapGeom.Texture.size)
}

// -------------------------------------------------------------------

// HeightmapGeom_Blend

// required double min_height = 1;
inline bool HeightmapGeom_Blend::_internal_has_min_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeightmapGeom_Blend::has_min_height() const {
  return _internal_has_min_height();
}
inline void HeightmapGeom_Blend::clear_min_height() {
  min_height_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double HeightmapGeom_Blend::_internal_min_height() const {
  return min_height_;
}
inline double HeightmapGeom_Blend::min_height() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.Blend.min_height)
  return _internal_min_height();
}
inline void HeightmapGeom_Blend::_internal_set_min_height(double value) {
  _has_bits_[0] |= 0x00000001u;
  min_height_ = value;
}
inline void HeightmapGeom_Blend::set_min_height(double value) {
  _internal_set_min_height(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.HeightmapGeom.Blend.min_height)
}

// required double fade_dist = 2;
inline bool HeightmapGeom_Blend::_internal_has_fade_dist() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HeightmapGeom_Blend::has_fade_dist() const {
  return _internal_has_fade_dist();
}
inline void HeightmapGeom_Blend::clear_fade_dist() {
  fade_dist_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double HeightmapGeom_Blend::_internal_fade_dist() const {
  return fade_dist_;
}
inline double HeightmapGeom_Blend::fade_dist() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.Blend.fade_dist)
  return _internal_fade_dist();
}
inline void HeightmapGeom_Blend::_internal_set_fade_dist(double value) {
  _has_bits_[0] |= 0x00000002u;
  fade_dist_ = value;
}
inline void HeightmapGeom_Blend::set_fade_dist(double value) {
  _internal_set_fade_dist(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.HeightmapGeom.Blend.fade_dist)
}

// -------------------------------------------------------------------

// HeightmapGeom

// optional .gazebo.msgs.Image image = 1;
inline bool HeightmapGeom::_internal_has_image() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || image_ != nullptr);
  return value;
}
inline bool HeightmapGeom::has_image() const {
  return _internal_has_image();
}
inline const ::gazebo::msgs::Image& HeightmapGeom::_internal_image() const {
  const ::gazebo::msgs::Image* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Image*>(
      &::gazebo::msgs::_Image_default_instance_);
}
inline const ::gazebo::msgs::Image& HeightmapGeom::image() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.image)
  return _internal_image();
}
inline ::gazebo::msgs::Image* HeightmapGeom::release_image() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.HeightmapGeom.image)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Image* HeightmapGeom::_internal_mutable_image() {
  _has_bits_[0] |= 0x00000002u;
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  return image_;
}
inline ::gazebo::msgs::Image* HeightmapGeom::mutable_image() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.HeightmapGeom.image)
  return _internal_mutable_image();
}
inline void HeightmapGeom::set_allocated_image(::gazebo::msgs::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.HeightmapGeom.image)
}

// required .gazebo.msgs.Vector3d size = 2;
inline bool HeightmapGeom::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || size_ != nullptr);
  return value;
}
inline bool HeightmapGeom::has_size() const {
  return _internal_has_size();
}
inline const ::gazebo::msgs::Vector3d& HeightmapGeom::_internal_size() const {
  const ::gazebo::msgs::Vector3d* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& HeightmapGeom::size() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.size)
  return _internal_size();
}
inline ::gazebo::msgs::Vector3d* HeightmapGeom::release_size() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.HeightmapGeom.size)
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::Vector3d* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* HeightmapGeom::_internal_mutable_size() {
  _has_bits_[0] |= 0x00000004u;
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    size_ = p;
  }
  return size_;
}
inline ::gazebo::msgs::Vector3d* HeightmapGeom::mutable_size() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.HeightmapGeom.size)
  return _internal_mutable_size();
}
inline void HeightmapGeom::set_allocated_size(::gazebo::msgs::Vector3d* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.HeightmapGeom.size)
}

// optional .gazebo.msgs.Vector3d origin = 3;
inline bool HeightmapGeom::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || origin_ != nullptr);
  return value;
}
inline bool HeightmapGeom::has_origin() const {
  return _internal_has_origin();
}
inline const ::gazebo::msgs::Vector3d& HeightmapGeom::_internal_origin() const {
  const ::gazebo::msgs::Vector3d* p = origin_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& HeightmapGeom::origin() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.origin)
  return _internal_origin();
}
inline ::gazebo::msgs::Vector3d* HeightmapGeom::release_origin() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.HeightmapGeom.origin)
  _has_bits_[0] &= ~0x00000008u;
  ::gazebo::msgs::Vector3d* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* HeightmapGeom::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000008u;
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    origin_ = p;
  }
  return origin_;
}
inline ::gazebo::msgs::Vector3d* HeightmapGeom::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.HeightmapGeom.origin)
  return _internal_mutable_origin();
}
inline void HeightmapGeom::set_allocated_origin(::gazebo::msgs::Vector3d* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.HeightmapGeom.origin)
}

// repeated float heights = 4;
inline int HeightmapGeom::_internal_heights_size() const {
  return heights_.size();
}
inline int HeightmapGeom::heights_size() const {
  return _internal_heights_size();
}
inline void HeightmapGeom::clear_heights() {
  heights_.Clear();
}
inline float HeightmapGeom::_internal_heights(int index) const {
  return heights_.Get(index);
}
inline float HeightmapGeom::heights(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.heights)
  return _internal_heights(index);
}
inline void HeightmapGeom::set_heights(int index, float value) {
  heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.HeightmapGeom.heights)
}
inline void HeightmapGeom::_internal_add_heights(float value) {
  heights_.Add(value);
}
inline void HeightmapGeom::add_heights(float value) {
  _internal_add_heights(value);
  // @@protoc_insertion_point(field_add:gazebo.msgs.HeightmapGeom.heights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
HeightmapGeom::_internal_heights() const {
  return heights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
HeightmapGeom::heights() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.HeightmapGeom.heights)
  return _internal_heights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
HeightmapGeom::_internal_mutable_heights() {
  return &heights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
HeightmapGeom::mutable_heights() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.HeightmapGeom.heights)
  return _internal_mutable_heights();
}

// optional int32 width = 5;
inline bool HeightmapGeom::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HeightmapGeom::has_width() const {
  return _internal_has_width();
}
inline void HeightmapGeom::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeightmapGeom::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeightmapGeom::width() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.width)
  return _internal_width();
}
inline void HeightmapGeom::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  width_ = value;
}
inline void HeightmapGeom::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.HeightmapGeom.width)
}

// optional int32 height = 6;
inline bool HeightmapGeom::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HeightmapGeom::has_height() const {
  return _internal_has_height();
}
inline void HeightmapGeom::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeightmapGeom::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeightmapGeom::height() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.height)
  return _internal_height();
}
inline void HeightmapGeom::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  height_ = value;
}
inline void HeightmapGeom::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.HeightmapGeom.height)
}

// repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
inline int HeightmapGeom::_internal_texture_size() const {
  return texture_.size();
}
inline int HeightmapGeom::texture_size() const {
  return _internal_texture_size();
}
inline void HeightmapGeom::clear_texture() {
  texture_.Clear();
}
inline ::gazebo::msgs::HeightmapGeom_Texture* HeightmapGeom::mutable_texture(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.HeightmapGeom.texture)
  return texture_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Texture >*
HeightmapGeom::mutable_texture() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.HeightmapGeom.texture)
  return &texture_;
}
inline const ::gazebo::msgs::HeightmapGeom_Texture& HeightmapGeom::_internal_texture(int index) const {
  return texture_.Get(index);
}
inline const ::gazebo::msgs::HeightmapGeom_Texture& HeightmapGeom::texture(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.texture)
  return _internal_texture(index);
}
inline ::gazebo::msgs::HeightmapGeom_Texture* HeightmapGeom::_internal_add_texture() {
  return texture_.Add();
}
inline ::gazebo::msgs::HeightmapGeom_Texture* HeightmapGeom::add_texture() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.HeightmapGeom.texture)
  return _internal_add_texture();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Texture >&
HeightmapGeom::texture() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.HeightmapGeom.texture)
  return texture_;
}

// repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
inline int HeightmapGeom::_internal_blend_size() const {
  return blend_.size();
}
inline int HeightmapGeom::blend_size() const {
  return _internal_blend_size();
}
inline void HeightmapGeom::clear_blend() {
  blend_.Clear();
}
inline ::gazebo::msgs::HeightmapGeom_Blend* HeightmapGeom::mutable_blend(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.HeightmapGeom.blend)
  return blend_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Blend >*
HeightmapGeom::mutable_blend() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.HeightmapGeom.blend)
  return &blend_;
}
inline const ::gazebo::msgs::HeightmapGeom_Blend& HeightmapGeom::_internal_blend(int index) const {
  return blend_.Get(index);
}
inline const ::gazebo::msgs::HeightmapGeom_Blend& HeightmapGeom::blend(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.blend)
  return _internal_blend(index);
}
inline ::gazebo::msgs::HeightmapGeom_Blend* HeightmapGeom::_internal_add_blend() {
  return blend_.Add();
}
inline ::gazebo::msgs::HeightmapGeom_Blend* HeightmapGeom::add_blend() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.HeightmapGeom.blend)
  return _internal_add_blend();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::HeightmapGeom_Blend >&
HeightmapGeom::blend() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.HeightmapGeom.blend)
  return blend_;
}

// optional bool use_terrain_paging = 9;
inline bool HeightmapGeom::_internal_has_use_terrain_paging() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HeightmapGeom::has_use_terrain_paging() const {
  return _internal_has_use_terrain_paging();
}
inline void HeightmapGeom::clear_use_terrain_paging() {
  use_terrain_paging_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool HeightmapGeom::_internal_use_terrain_paging() const {
  return use_terrain_paging_;
}
inline bool HeightmapGeom::use_terrain_paging() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.use_terrain_paging)
  return _internal_use_terrain_paging();
}
inline void HeightmapGeom::_internal_set_use_terrain_paging(bool value) {
  _has_bits_[0] |= 0x00000040u;
  use_terrain_paging_ = value;
}
inline void HeightmapGeom::set_use_terrain_paging(bool value) {
  _internal_set_use_terrain_paging(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.HeightmapGeom.use_terrain_paging)
}

// optional string filename = 10;
inline bool HeightmapGeom::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeightmapGeom::has_filename() const {
  return _internal_has_filename();
}
inline void HeightmapGeom::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HeightmapGeom::filename() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.filename)
  return _internal_filename();
}
inline void HeightmapGeom::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.HeightmapGeom.filename)
}
inline std::string* HeightmapGeom::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.HeightmapGeom.filename)
  return _internal_mutable_filename();
}
inline const std::string& HeightmapGeom::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void HeightmapGeom::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HeightmapGeom::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.HeightmapGeom.filename)
}
inline void HeightmapGeom::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.HeightmapGeom.filename)
}
inline void HeightmapGeom::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.HeightmapGeom.filename)
}
inline std::string* HeightmapGeom::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HeightmapGeom::release_filename() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.HeightmapGeom.filename)
  if (!has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HeightmapGeom::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.HeightmapGeom.filename)
}

// optional uint32 sampling = 11;
inline bool HeightmapGeom::_internal_has_sampling() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool HeightmapGeom::has_sampling() const {
  return _internal_has_sampling();
}
inline void HeightmapGeom::clear_sampling() {
  sampling_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeightmapGeom::_internal_sampling() const {
  return sampling_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeightmapGeom::sampling() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.HeightmapGeom.sampling)
  return _internal_sampling();
}
inline void HeightmapGeom::_internal_set_sampling(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  sampling_ = value;
}
inline void HeightmapGeom::set_sampling(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sampling(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.HeightmapGeom.sampling)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


typedef boost::shared_ptr<gazebo::msgs::HeightmapGeom> HeightmapGeomPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::HeightmapGeom const> ConstHeightmapGeomPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_heightmapgeom_2eproto
