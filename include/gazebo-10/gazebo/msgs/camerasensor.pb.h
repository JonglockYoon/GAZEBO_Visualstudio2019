// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camerasensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_camerasensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_camerasensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector2d.pb.h"
#include "distortion.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_camerasensor_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_camerasensor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camerasensor_2eproto;
namespace gazebo {
namespace msgs {
class CameraSensor;
class CameraSensorDefaultTypeInternal;
GZ_MSGS_VISIBLE extern CameraSensorDefaultTypeInternal _CameraSensor_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::CameraSensor* Arena::CreateMaybeMessage<::gazebo::msgs::CameraSensor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE CameraSensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.CameraSensor) */ {
 public:
  CameraSensor();
  virtual ~CameraSensor();

  CameraSensor(const CameraSensor& from);
  CameraSensor(CameraSensor&& from) noexcept
    : CameraSensor() {
    *this = ::std::move(from);
  }

  inline CameraSensor& operator=(const CameraSensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraSensor& operator=(CameraSensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraSensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraSensor* internal_default_instance() {
    return reinterpret_cast<const CameraSensor*>(
               &_CameraSensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraSensor& a, CameraSensor& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraSensor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraSensor* New() const final {
    return CreateMaybeMessage<CameraSensor>(nullptr);
  }

  CameraSensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraSensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraSensor& from);
  void MergeFrom(const CameraSensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraSensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.CameraSensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camerasensor_2eproto);
    return ::descriptor_table_camerasensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFormatFieldNumber = 3,
    kSavePathFieldNumber = 7,
    kImageSizeFieldNumber = 2,
    kDistortionFieldNumber = 8,
    kHorizontalFovFieldNumber = 1,
    kNearClipFieldNumber = 4,
    kFarClipFieldNumber = 5,
    kSaveEnabledFieldNumber = 6,
  };
  // optional string image_format = 3;
  bool has_image_format() const;
  private:
  bool _internal_has_image_format() const;
  public:
  void clear_image_format();
  const std::string& image_format() const;
  void set_image_format(const std::string& value);
  void set_image_format(std::string&& value);
  void set_image_format(const char* value);
  void set_image_format(const char* value, size_t size);
  std::string* mutable_image_format();
  std::string* release_image_format();
  void set_allocated_image_format(std::string* image_format);
  private:
  const std::string& _internal_image_format() const;
  void _internal_set_image_format(const std::string& value);
  std::string* _internal_mutable_image_format();
  public:

  // optional string save_path = 7;
  bool has_save_path() const;
  private:
  bool _internal_has_save_path() const;
  public:
  void clear_save_path();
  const std::string& save_path() const;
  void set_save_path(const std::string& value);
  void set_save_path(std::string&& value);
  void set_save_path(const char* value);
  void set_save_path(const char* value, size_t size);
  std::string* mutable_save_path();
  std::string* release_save_path();
  void set_allocated_save_path(std::string* save_path);
  private:
  const std::string& _internal_save_path() const;
  void _internal_set_save_path(const std::string& value);
  std::string* _internal_mutable_save_path();
  public:

  // optional .gazebo.msgs.Vector2d image_size = 2;
  bool has_image_size() const;
  private:
  bool _internal_has_image_size() const;
  public:
  void clear_image_size();
  const ::gazebo::msgs::Vector2d& image_size() const;
  ::gazebo::msgs::Vector2d* release_image_size();
  ::gazebo::msgs::Vector2d* mutable_image_size();
  void set_allocated_image_size(::gazebo::msgs::Vector2d* image_size);
  private:
  const ::gazebo::msgs::Vector2d& _internal_image_size() const;
  ::gazebo::msgs::Vector2d* _internal_mutable_image_size();
  public:

  // optional .gazebo.msgs.Distortion distortion = 8;
  bool has_distortion() const;
  private:
  bool _internal_has_distortion() const;
  public:
  void clear_distortion();
  const ::gazebo::msgs::Distortion& distortion() const;
  ::gazebo::msgs::Distortion* release_distortion();
  ::gazebo::msgs::Distortion* mutable_distortion();
  void set_allocated_distortion(::gazebo::msgs::Distortion* distortion);
  private:
  const ::gazebo::msgs::Distortion& _internal_distortion() const;
  ::gazebo::msgs::Distortion* _internal_mutable_distortion();
  public:

  // optional double horizontal_fov = 1;
  bool has_horizontal_fov() const;
  private:
  bool _internal_has_horizontal_fov() const;
  public:
  void clear_horizontal_fov();
  double horizontal_fov() const;
  void set_horizontal_fov(double value);
  private:
  double _internal_horizontal_fov() const;
  void _internal_set_horizontal_fov(double value);
  public:

  // optional double near_clip = 4;
  bool has_near_clip() const;
  private:
  bool _internal_has_near_clip() const;
  public:
  void clear_near_clip();
  double near_clip() const;
  void set_near_clip(double value);
  private:
  double _internal_near_clip() const;
  void _internal_set_near_clip(double value);
  public:

  // optional double far_clip = 5;
  bool has_far_clip() const;
  private:
  bool _internal_has_far_clip() const;
  public:
  void clear_far_clip();
  double far_clip() const;
  void set_far_clip(double value);
  private:
  double _internal_far_clip() const;
  void _internal_set_far_clip(double value);
  public:

  // optional bool save_enabled = 6;
  bool has_save_enabled() const;
  private:
  bool _internal_has_save_enabled() const;
  public:
  void clear_save_enabled();
  bool save_enabled() const;
  void set_save_enabled(bool value);
  private:
  bool _internal_save_enabled() const;
  void _internal_set_save_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.CameraSensor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_path_;
  ::gazebo::msgs::Vector2d* image_size_;
  ::gazebo::msgs::Distortion* distortion_;
  double horizontal_fov_;
  double near_clip_;
  double far_clip_;
  bool save_enabled_;
  friend struct ::TableStruct_camerasensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraSensor

// optional double horizontal_fov = 1;
inline bool CameraSensor::_internal_has_horizontal_fov() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CameraSensor::has_horizontal_fov() const {
  return _internal_has_horizontal_fov();
}
inline void CameraSensor::clear_horizontal_fov() {
  horizontal_fov_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CameraSensor::_internal_horizontal_fov() const {
  return horizontal_fov_;
}
inline double CameraSensor::horizontal_fov() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.horizontal_fov)
  return _internal_horizontal_fov();
}
inline void CameraSensor::_internal_set_horizontal_fov(double value) {
  _has_bits_[0] |= 0x00000010u;
  horizontal_fov_ = value;
}
inline void CameraSensor::set_horizontal_fov(double value) {
  _internal_set_horizontal_fov(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.CameraSensor.horizontal_fov)
}

// optional .gazebo.msgs.Vector2d image_size = 2;
inline bool CameraSensor::_internal_has_image_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || image_size_ != nullptr);
  return value;
}
inline bool CameraSensor::has_image_size() const {
  return _internal_has_image_size();
}
inline const ::gazebo::msgs::Vector2d& CameraSensor::_internal_image_size() const {
  const ::gazebo::msgs::Vector2d* p = image_size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector2d*>(
      &::gazebo::msgs::_Vector2d_default_instance_);
}
inline const ::gazebo::msgs::Vector2d& CameraSensor::image_size() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.image_size)
  return _internal_image_size();
}
inline ::gazebo::msgs::Vector2d* CameraSensor::release_image_size() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.CameraSensor.image_size)
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::Vector2d* temp = image_size_;
  image_size_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector2d* CameraSensor::_internal_mutable_image_size() {
  _has_bits_[0] |= 0x00000004u;
  if (image_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector2d>(GetArenaNoVirtual());
    image_size_ = p;
  }
  return image_size_;
}
inline ::gazebo::msgs::Vector2d* CameraSensor::mutable_image_size() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.CameraSensor.image_size)
  return _internal_mutable_image_size();
}
inline void CameraSensor::set_allocated_image_size(::gazebo::msgs::Vector2d* image_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_size_);
  }
  if (image_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  image_size_ = image_size;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.CameraSensor.image_size)
}

// optional string image_format = 3;
inline bool CameraSensor::_internal_has_image_format() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraSensor::has_image_format() const {
  return _internal_has_image_format();
}
inline void CameraSensor::clear_image_format() {
  image_format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraSensor::image_format() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.image_format)
  return _internal_image_format();
}
inline void CameraSensor::set_image_format(const std::string& value) {
  _internal_set_image_format(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.CameraSensor.image_format)
}
inline std::string* CameraSensor::mutable_image_format() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.CameraSensor.image_format)
  return _internal_mutable_image_format();
}
inline const std::string& CameraSensor::_internal_image_format() const {
  return image_format_.GetNoArena();
}
inline void CameraSensor::_internal_set_image_format(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  image_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CameraSensor::set_image_format(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  image_format_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.CameraSensor.image_format)
}
inline void CameraSensor::set_image_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  image_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.CameraSensor.image_format)
}
inline void CameraSensor::set_image_format(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  image_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.CameraSensor.image_format)
}
inline std::string* CameraSensor::_internal_mutable_image_format() {
  _has_bits_[0] |= 0x00000001u;
  return image_format_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraSensor::release_image_format() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.CameraSensor.image_format)
  if (!has_image_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return image_format_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraSensor::set_allocated_image_format(std::string* image_format) {
  if (image_format != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_format_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_format);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.CameraSensor.image_format)
}

// optional double near_clip = 4;
inline bool CameraSensor::_internal_has_near_clip() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CameraSensor::has_near_clip() const {
  return _internal_has_near_clip();
}
inline void CameraSensor::clear_near_clip() {
  near_clip_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double CameraSensor::_internal_near_clip() const {
  return near_clip_;
}
inline double CameraSensor::near_clip() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.near_clip)
  return _internal_near_clip();
}
inline void CameraSensor::_internal_set_near_clip(double value) {
  _has_bits_[0] |= 0x00000020u;
  near_clip_ = value;
}
inline void CameraSensor::set_near_clip(double value) {
  _internal_set_near_clip(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.CameraSensor.near_clip)
}

// optional double far_clip = 5;
inline bool CameraSensor::_internal_has_far_clip() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CameraSensor::has_far_clip() const {
  return _internal_has_far_clip();
}
inline void CameraSensor::clear_far_clip() {
  far_clip_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double CameraSensor::_internal_far_clip() const {
  return far_clip_;
}
inline double CameraSensor::far_clip() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.far_clip)
  return _internal_far_clip();
}
inline void CameraSensor::_internal_set_far_clip(double value) {
  _has_bits_[0] |= 0x00000040u;
  far_clip_ = value;
}
inline void CameraSensor::set_far_clip(double value) {
  _internal_set_far_clip(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.CameraSensor.far_clip)
}

// optional bool save_enabled = 6;
inline bool CameraSensor::_internal_has_save_enabled() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CameraSensor::has_save_enabled() const {
  return _internal_has_save_enabled();
}
inline void CameraSensor::clear_save_enabled() {
  save_enabled_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CameraSensor::_internal_save_enabled() const {
  return save_enabled_;
}
inline bool CameraSensor::save_enabled() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.save_enabled)
  return _internal_save_enabled();
}
inline void CameraSensor::_internal_set_save_enabled(bool value) {
  _has_bits_[0] |= 0x00000080u;
  save_enabled_ = value;
}
inline void CameraSensor::set_save_enabled(bool value) {
  _internal_set_save_enabled(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.CameraSensor.save_enabled)
}

// optional string save_path = 7;
inline bool CameraSensor::_internal_has_save_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CameraSensor::has_save_path() const {
  return _internal_has_save_path();
}
inline void CameraSensor::clear_save_path() {
  save_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CameraSensor::save_path() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.save_path)
  return _internal_save_path();
}
inline void CameraSensor::set_save_path(const std::string& value) {
  _internal_set_save_path(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.CameraSensor.save_path)
}
inline std::string* CameraSensor::mutable_save_path() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.CameraSensor.save_path)
  return _internal_mutable_save_path();
}
inline const std::string& CameraSensor::_internal_save_path() const {
  return save_path_.GetNoArena();
}
inline void CameraSensor::_internal_set_save_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  save_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CameraSensor::set_save_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  save_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.CameraSensor.save_path)
}
inline void CameraSensor::set_save_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  save_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.CameraSensor.save_path)
}
inline void CameraSensor::set_save_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  save_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.CameraSensor.save_path)
}
inline std::string* CameraSensor::_internal_mutable_save_path() {
  _has_bits_[0] |= 0x00000002u;
  return save_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraSensor::release_save_path() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.CameraSensor.save_path)
  if (!has_save_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return save_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraSensor::set_allocated_save_path(std::string* save_path) {
  if (save_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  save_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), save_path);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.CameraSensor.save_path)
}

// optional .gazebo.msgs.Distortion distortion = 8;
inline bool CameraSensor::_internal_has_distortion() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || distortion_ != nullptr);
  return value;
}
inline bool CameraSensor::has_distortion() const {
  return _internal_has_distortion();
}
inline const ::gazebo::msgs::Distortion& CameraSensor::_internal_distortion() const {
  const ::gazebo::msgs::Distortion* p = distortion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Distortion*>(
      &::gazebo::msgs::_Distortion_default_instance_);
}
inline const ::gazebo::msgs::Distortion& CameraSensor::distortion() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.distortion)
  return _internal_distortion();
}
inline ::gazebo::msgs::Distortion* CameraSensor::release_distortion() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.CameraSensor.distortion)
  _has_bits_[0] &= ~0x00000008u;
  ::gazebo::msgs::Distortion* temp = distortion_;
  distortion_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Distortion* CameraSensor::_internal_mutable_distortion() {
  _has_bits_[0] |= 0x00000008u;
  if (distortion_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Distortion>(GetArenaNoVirtual());
    distortion_ = p;
  }
  return distortion_;
}
inline ::gazebo::msgs::Distortion* CameraSensor::mutable_distortion() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.CameraSensor.distortion)
  return _internal_mutable_distortion();
}
inline void CameraSensor::set_allocated_distortion(::gazebo::msgs::Distortion* distortion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(distortion_);
  }
  if (distortion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      distortion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distortion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  distortion_ = distortion;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.CameraSensor.distortion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::CameraSensor> CameraSensorPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::CameraSensor const> ConstCameraSensorPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_camerasensor_2eproto
