// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pose_animation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pose_5fanimation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pose_5fanimation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pose.pb.h"
#include "time.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pose_5fanimation_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_pose_5fanimation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pose_5fanimation_2eproto;
namespace gazebo {
namespace msgs {
class PoseAnimation;
class PoseAnimationDefaultTypeInternal;
GZ_MSGS_VISIBLE extern PoseAnimationDefaultTypeInternal _PoseAnimation_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::PoseAnimation* Arena::CreateMaybeMessage<::gazebo::msgs::PoseAnimation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE PoseAnimation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.PoseAnimation) */ {
 public:
  PoseAnimation();
  virtual ~PoseAnimation();

  PoseAnimation(const PoseAnimation& from);
  PoseAnimation(PoseAnimation&& from) noexcept
    : PoseAnimation() {
    *this = ::std::move(from);
  }

  inline PoseAnimation& operator=(const PoseAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseAnimation& operator=(PoseAnimation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseAnimation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseAnimation* internal_default_instance() {
    return reinterpret_cast<const PoseAnimation*>(
               &_PoseAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PoseAnimation& a, PoseAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseAnimation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseAnimation* New() const final {
    return CreateMaybeMessage<PoseAnimation>(nullptr);
  }

  PoseAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseAnimation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseAnimation& from);
  void MergeFrom(const PoseAnimation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseAnimation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.PoseAnimation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pose_5fanimation_2eproto);
    return ::descriptor_table_pose_5fanimation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 3,
    kTimeFieldNumber = 4,
    kModelNameFieldNumber = 1,
    kModelIdFieldNumber = 2,
  };
  // repeated .gazebo.msgs.Pose pose = 3;
  int pose_size() const;
  private:
  int _internal_pose_size() const;
  public:
  void clear_pose();
  ::gazebo::msgs::Pose* mutable_pose(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Pose >*
      mutable_pose();
  private:
  const ::gazebo::msgs::Pose& _internal_pose(int index) const;
  ::gazebo::msgs::Pose* _internal_add_pose();
  public:
  const ::gazebo::msgs::Pose& pose(int index) const;
  ::gazebo::msgs::Pose* add_pose();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Pose >&
      pose() const;

  // repeated .gazebo.msgs.Time time = 4;
  int time_size() const;
  private:
  int _internal_time_size() const;
  public:
  void clear_time();
  ::gazebo::msgs::Time* mutable_time(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Time >*
      mutable_time();
  private:
  const ::gazebo::msgs::Time& _internal_time(int index) const;
  ::gazebo::msgs::Time* _internal_add_time();
  public:
  const ::gazebo::msgs::Time& time(int index) const;
  ::gazebo::msgs::Time* add_time();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Time >&
      time() const;

  // required string model_name = 1;
  bool has_model_name() const;
  private:
  bool _internal_has_model_name() const;
  public:
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // optional uint32 model_id = 2;
  bool has_model_id() const;
  private:
  bool _internal_has_model_id() const;
  public:
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.PoseAnimation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Pose > pose_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Time > time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id_;
  friend struct ::TableStruct_pose_5fanimation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PoseAnimation

// required string model_name = 1;
inline bool PoseAnimation::_internal_has_model_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PoseAnimation::has_model_name() const {
  return _internal_has_model_name();
}
inline void PoseAnimation::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PoseAnimation::model_name() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.PoseAnimation.model_name)
  return _internal_model_name();
}
inline void PoseAnimation::set_model_name(const std::string& value) {
  _internal_set_model_name(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.PoseAnimation.model_name)
}
inline std::string* PoseAnimation::mutable_model_name() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.PoseAnimation.model_name)
  return _internal_mutable_model_name();
}
inline const std::string& PoseAnimation::_internal_model_name() const {
  return model_name_.GetNoArena();
}
inline void PoseAnimation::_internal_set_model_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PoseAnimation::set_model_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.PoseAnimation.model_name)
}
inline void PoseAnimation::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.PoseAnimation.model_name)
}
inline void PoseAnimation::set_model_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.PoseAnimation.model_name)
}
inline std::string* PoseAnimation::_internal_mutable_model_name() {
  _has_bits_[0] |= 0x00000001u;
  return model_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PoseAnimation::release_model_name() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.PoseAnimation.model_name)
  if (!has_model_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return model_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PoseAnimation::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.PoseAnimation.model_name)
}

// optional uint32 model_id = 2;
inline bool PoseAnimation::_internal_has_model_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PoseAnimation::has_model_id() const {
  return _internal_has_model_id();
}
inline void PoseAnimation::clear_model_id() {
  model_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoseAnimation::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoseAnimation::model_id() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.PoseAnimation.model_id)
  return _internal_model_id();
}
inline void PoseAnimation::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  model_id_ = value;
}
inline void PoseAnimation::set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.PoseAnimation.model_id)
}

// repeated .gazebo.msgs.Pose pose = 3;
inline int PoseAnimation::_internal_pose_size() const {
  return pose_.size();
}
inline int PoseAnimation::pose_size() const {
  return _internal_pose_size();
}
inline ::gazebo::msgs::Pose* PoseAnimation::mutable_pose(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.PoseAnimation.pose)
  return pose_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Pose >*
PoseAnimation::mutable_pose() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.PoseAnimation.pose)
  return &pose_;
}
inline const ::gazebo::msgs::Pose& PoseAnimation::_internal_pose(int index) const {
  return pose_.Get(index);
}
inline const ::gazebo::msgs::Pose& PoseAnimation::pose(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.PoseAnimation.pose)
  return _internal_pose(index);
}
inline ::gazebo::msgs::Pose* PoseAnimation::_internal_add_pose() {
  return pose_.Add();
}
inline ::gazebo::msgs::Pose* PoseAnimation::add_pose() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.PoseAnimation.pose)
  return _internal_add_pose();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Pose >&
PoseAnimation::pose() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.PoseAnimation.pose)
  return pose_;
}

// repeated .gazebo.msgs.Time time = 4;
inline int PoseAnimation::_internal_time_size() const {
  return time_.size();
}
inline int PoseAnimation::time_size() const {
  return _internal_time_size();
}
inline ::gazebo::msgs::Time* PoseAnimation::mutable_time(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.PoseAnimation.time)
  return time_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Time >*
PoseAnimation::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.PoseAnimation.time)
  return &time_;
}
inline const ::gazebo::msgs::Time& PoseAnimation::_internal_time(int index) const {
  return time_.Get(index);
}
inline const ::gazebo::msgs::Time& PoseAnimation::time(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.PoseAnimation.time)
  return _internal_time(index);
}
inline ::gazebo::msgs::Time* PoseAnimation::_internal_add_time() {
  return time_.Add();
}
inline ::gazebo::msgs::Time* PoseAnimation::add_time() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.PoseAnimation.time)
  return _internal_add_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Time >&
PoseAnimation::time() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.PoseAnimation.time)
  return time_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::PoseAnimation> PoseAnimationPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::PoseAnimation const> ConstPoseAnimationPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pose_5fanimation_2eproto
