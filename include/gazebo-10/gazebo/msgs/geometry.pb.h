// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_geometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_geometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "boxgeom.pb.h"
#include "cylindergeom.pb.h"
#include "spheregeom.pb.h"
#include "planegeom.pb.h"
#include "imagegeom.pb.h"
#include "heightmapgeom.pb.h"
#include "meshgeom.pb.h"
#include "vector3d.pb.h"
#include "polylinegeom.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_geometry_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_geometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_geometry_2eproto;
namespace gazebo {
namespace msgs {
class Geometry;
class GeometryDefaultTypeInternal;
GZ_MSGS_VISIBLE extern GeometryDefaultTypeInternal _Geometry_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::Geometry* Arena::CreateMaybeMessage<::gazebo::msgs::Geometry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

enum Geometry_Type : int {
  Geometry_Type_BOX = 1,
  Geometry_Type_CYLINDER = 2,
  Geometry_Type_SPHERE = 3,
  Geometry_Type_PLANE = 4,
  Geometry_Type_IMAGE = 5,
  Geometry_Type_HEIGHTMAP = 6,
  Geometry_Type_MESH = 7,
  Geometry_Type_TRIANGLE_FAN = 8,
  Geometry_Type_LINE_STRIP = 9,
  Geometry_Type_POLYLINE = 10,
  Geometry_Type_EMPTY = 11
};
GZ_MSGS_VISIBLE bool Geometry_Type_IsValid(int value);
constexpr Geometry_Type Geometry_Type_Type_MIN = Geometry_Type_BOX;
constexpr Geometry_Type Geometry_Type_Type_MAX = Geometry_Type_EMPTY;
constexpr int Geometry_Type_Type_ARRAYSIZE = Geometry_Type_Type_MAX + 1;

GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Geometry_Type_descriptor();
template<typename T>
inline const std::string& Geometry_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Geometry_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Geometry_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Geometry_Type_descriptor(), enum_t_value);
}
inline bool Geometry_Type_Parse(
    const std::string& name, Geometry_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Geometry_Type>(
    Geometry_Type_descriptor(), name, value);
}
// ===================================================================

class GZ_MSGS_VISIBLE Geometry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.Geometry) */ {
 public:
  Geometry();
  virtual ~Geometry();

  Geometry(const Geometry& from);
  Geometry(Geometry&& from) noexcept
    : Geometry() {
    *this = ::std::move(from);
  }

  inline Geometry& operator=(const Geometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry& operator=(Geometry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geometry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry* internal_default_instance() {
    return reinterpret_cast<const Geometry*>(
               &_Geometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Geometry& a, Geometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geometry* New() const final {
    return CreateMaybeMessage<Geometry>(nullptr);
  }

  Geometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geometry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geometry& from);
  void MergeFrom(const Geometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.Geometry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Geometry_Type Type;
  static constexpr Type BOX =
    Geometry_Type_BOX;
  static constexpr Type CYLINDER =
    Geometry_Type_CYLINDER;
  static constexpr Type SPHERE =
    Geometry_Type_SPHERE;
  static constexpr Type PLANE =
    Geometry_Type_PLANE;
  static constexpr Type IMAGE =
    Geometry_Type_IMAGE;
  static constexpr Type HEIGHTMAP =
    Geometry_Type_HEIGHTMAP;
  static constexpr Type MESH =
    Geometry_Type_MESH;
  static constexpr Type TRIANGLE_FAN =
    Geometry_Type_TRIANGLE_FAN;
  static constexpr Type LINE_STRIP =
    Geometry_Type_LINE_STRIP;
  static constexpr Type POLYLINE =
    Geometry_Type_POLYLINE;
  static constexpr Type EMPTY =
    Geometry_Type_EMPTY;
  static inline bool Type_IsValid(int value) {
    return Geometry_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Geometry_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Geometry_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Geometry_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Geometry_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Geometry_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Geometry_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 9,
    kPolylineFieldNumber = 10,
    kBoxFieldNumber = 2,
    kCylinderFieldNumber = 3,
    kPlaneFieldNumber = 4,
    kSphereFieldNumber = 5,
    kImageFieldNumber = 6,
    kHeightmapFieldNumber = 7,
    kMeshFieldNumber = 8,
    kTypeFieldNumber = 1,
  };
  // repeated .gazebo.msgs.Vector3d points = 9;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::gazebo::msgs::Vector3d* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Vector3d >*
      mutable_points();
  private:
  const ::gazebo::msgs::Vector3d& _internal_points(int index) const;
  ::gazebo::msgs::Vector3d* _internal_add_points();
  public:
  const ::gazebo::msgs::Vector3d& points(int index) const;
  ::gazebo::msgs::Vector3d* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Vector3d >&
      points() const;

  // repeated .gazebo.msgs.Polyline polyline = 10;
  int polyline_size() const;
  private:
  int _internal_polyline_size() const;
  public:
  void clear_polyline();
  ::gazebo::msgs::Polyline* mutable_polyline(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Polyline >*
      mutable_polyline();
  private:
  const ::gazebo::msgs::Polyline& _internal_polyline(int index) const;
  ::gazebo::msgs::Polyline* _internal_add_polyline();
  public:
  const ::gazebo::msgs::Polyline& polyline(int index) const;
  ::gazebo::msgs::Polyline* add_polyline();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Polyline >&
      polyline() const;

  // optional .gazebo.msgs.BoxGeom box = 2;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::gazebo::msgs::BoxGeom& box() const;
  ::gazebo::msgs::BoxGeom* release_box();
  ::gazebo::msgs::BoxGeom* mutable_box();
  void set_allocated_box(::gazebo::msgs::BoxGeom* box);
  private:
  const ::gazebo::msgs::BoxGeom& _internal_box() const;
  ::gazebo::msgs::BoxGeom* _internal_mutable_box();
  public:

  // optional .gazebo.msgs.CylinderGeom cylinder = 3;
  bool has_cylinder() const;
  private:
  bool _internal_has_cylinder() const;
  public:
  void clear_cylinder();
  const ::gazebo::msgs::CylinderGeom& cylinder() const;
  ::gazebo::msgs::CylinderGeom* release_cylinder();
  ::gazebo::msgs::CylinderGeom* mutable_cylinder();
  void set_allocated_cylinder(::gazebo::msgs::CylinderGeom* cylinder);
  private:
  const ::gazebo::msgs::CylinderGeom& _internal_cylinder() const;
  ::gazebo::msgs::CylinderGeom* _internal_mutable_cylinder();
  public:

  // optional .gazebo.msgs.PlaneGeom plane = 4;
  bool has_plane() const;
  private:
  bool _internal_has_plane() const;
  public:
  void clear_plane();
  const ::gazebo::msgs::PlaneGeom& plane() const;
  ::gazebo::msgs::PlaneGeom* release_plane();
  ::gazebo::msgs::PlaneGeom* mutable_plane();
  void set_allocated_plane(::gazebo::msgs::PlaneGeom* plane);
  private:
  const ::gazebo::msgs::PlaneGeom& _internal_plane() const;
  ::gazebo::msgs::PlaneGeom* _internal_mutable_plane();
  public:

  // optional .gazebo.msgs.SphereGeom sphere = 5;
  bool has_sphere() const;
  private:
  bool _internal_has_sphere() const;
  public:
  void clear_sphere();
  const ::gazebo::msgs::SphereGeom& sphere() const;
  ::gazebo::msgs::SphereGeom* release_sphere();
  ::gazebo::msgs::SphereGeom* mutable_sphere();
  void set_allocated_sphere(::gazebo::msgs::SphereGeom* sphere);
  private:
  const ::gazebo::msgs::SphereGeom& _internal_sphere() const;
  ::gazebo::msgs::SphereGeom* _internal_mutable_sphere();
  public:

  // optional .gazebo.msgs.ImageGeom image = 6;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::gazebo::msgs::ImageGeom& image() const;
  ::gazebo::msgs::ImageGeom* release_image();
  ::gazebo::msgs::ImageGeom* mutable_image();
  void set_allocated_image(::gazebo::msgs::ImageGeom* image);
  private:
  const ::gazebo::msgs::ImageGeom& _internal_image() const;
  ::gazebo::msgs::ImageGeom* _internal_mutable_image();
  public:

  // optional .gazebo.msgs.HeightmapGeom heightmap = 7;
  bool has_heightmap() const;
  private:
  bool _internal_has_heightmap() const;
  public:
  void clear_heightmap();
  const ::gazebo::msgs::HeightmapGeom& heightmap() const;
  ::gazebo::msgs::HeightmapGeom* release_heightmap();
  ::gazebo::msgs::HeightmapGeom* mutable_heightmap();
  void set_allocated_heightmap(::gazebo::msgs::HeightmapGeom* heightmap);
  private:
  const ::gazebo::msgs::HeightmapGeom& _internal_heightmap() const;
  ::gazebo::msgs::HeightmapGeom* _internal_mutable_heightmap();
  public:

  // optional .gazebo.msgs.MeshGeom mesh = 8;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::gazebo::msgs::MeshGeom& mesh() const;
  ::gazebo::msgs::MeshGeom* release_mesh();
  ::gazebo::msgs::MeshGeom* mutable_mesh();
  void set_allocated_mesh(::gazebo::msgs::MeshGeom* mesh);
  private:
  const ::gazebo::msgs::MeshGeom& _internal_mesh() const;
  ::gazebo::msgs::MeshGeom* _internal_mutable_mesh();
  public:

  // optional .gazebo.msgs.Geometry.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::gazebo::msgs::Geometry_Type type() const;
  void set_type(::gazebo::msgs::Geometry_Type value);
  private:
  ::gazebo::msgs::Geometry_Type _internal_type() const;
  void _internal_set_type(::gazebo::msgs::Geometry_Type value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Geometry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Vector3d > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Polyline > polyline_;
  ::gazebo::msgs::BoxGeom* box_;
  ::gazebo::msgs::CylinderGeom* cylinder_;
  ::gazebo::msgs::PlaneGeom* plane_;
  ::gazebo::msgs::SphereGeom* sphere_;
  ::gazebo::msgs::ImageGeom* image_;
  ::gazebo::msgs::HeightmapGeom* heightmap_;
  ::gazebo::msgs::MeshGeom* mesh_;
  int type_;
  friend struct ::TableStruct_geometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Geometry

// optional .gazebo.msgs.Geometry.Type type = 1;
inline bool Geometry::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Geometry::has_type() const {
  return _internal_has_type();
}
inline void Geometry::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::gazebo::msgs::Geometry_Type Geometry::_internal_type() const {
  return static_cast< ::gazebo::msgs::Geometry_Type >(type_);
}
inline ::gazebo::msgs::Geometry_Type Geometry::type() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Geometry.type)
  return _internal_type();
}
inline void Geometry::_internal_set_type(::gazebo::msgs::Geometry_Type value) {
  assert(::gazebo::msgs::Geometry_Type_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
}
inline void Geometry::set_type(::gazebo::msgs::Geometry_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Geometry.type)
}

// optional .gazebo.msgs.BoxGeom box = 2;
inline bool Geometry::_internal_has_box() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || box_ != nullptr);
  return value;
}
inline bool Geometry::has_box() const {
  return _internal_has_box();
}
inline const ::gazebo::msgs::BoxGeom& Geometry::_internal_box() const {
  const ::gazebo::msgs::BoxGeom* p = box_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::BoxGeom*>(
      &::gazebo::msgs::_BoxGeom_default_instance_);
}
inline const ::gazebo::msgs::BoxGeom& Geometry::box() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Geometry.box)
  return _internal_box();
}
inline ::gazebo::msgs::BoxGeom* Geometry::release_box() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Geometry.box)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::BoxGeom* temp = box_;
  box_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::BoxGeom* Geometry::_internal_mutable_box() {
  _has_bits_[0] |= 0x00000001u;
  if (box_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::BoxGeom>(GetArenaNoVirtual());
    box_ = p;
  }
  return box_;
}
inline ::gazebo::msgs::BoxGeom* Geometry::mutable_box() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Geometry.box)
  return _internal_mutable_box();
}
inline void Geometry::set_allocated_box(::gazebo::msgs::BoxGeom* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(box_);
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  box_ = box;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Geometry.box)
}

// optional .gazebo.msgs.CylinderGeom cylinder = 3;
inline bool Geometry::_internal_has_cylinder() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cylinder_ != nullptr);
  return value;
}
inline bool Geometry::has_cylinder() const {
  return _internal_has_cylinder();
}
inline const ::gazebo::msgs::CylinderGeom& Geometry::_internal_cylinder() const {
  const ::gazebo::msgs::CylinderGeom* p = cylinder_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::CylinderGeom*>(
      &::gazebo::msgs::_CylinderGeom_default_instance_);
}
inline const ::gazebo::msgs::CylinderGeom& Geometry::cylinder() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Geometry.cylinder)
  return _internal_cylinder();
}
inline ::gazebo::msgs::CylinderGeom* Geometry::release_cylinder() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Geometry.cylinder)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::CylinderGeom* temp = cylinder_;
  cylinder_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::CylinderGeom* Geometry::_internal_mutable_cylinder() {
  _has_bits_[0] |= 0x00000002u;
  if (cylinder_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::CylinderGeom>(GetArenaNoVirtual());
    cylinder_ = p;
  }
  return cylinder_;
}
inline ::gazebo::msgs::CylinderGeom* Geometry::mutable_cylinder() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Geometry.cylinder)
  return _internal_mutable_cylinder();
}
inline void Geometry::set_allocated_cylinder(::gazebo::msgs::CylinderGeom* cylinder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cylinder_);
  }
  if (cylinder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cylinder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cylinder, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cylinder_ = cylinder;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Geometry.cylinder)
}

// optional .gazebo.msgs.PlaneGeom plane = 4;
inline bool Geometry::_internal_has_plane() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || plane_ != nullptr);
  return value;
}
inline bool Geometry::has_plane() const {
  return _internal_has_plane();
}
inline const ::gazebo::msgs::PlaneGeom& Geometry::_internal_plane() const {
  const ::gazebo::msgs::PlaneGeom* p = plane_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::PlaneGeom*>(
      &::gazebo::msgs::_PlaneGeom_default_instance_);
}
inline const ::gazebo::msgs::PlaneGeom& Geometry::plane() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Geometry.plane)
  return _internal_plane();
}
inline ::gazebo::msgs::PlaneGeom* Geometry::release_plane() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Geometry.plane)
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::PlaneGeom* temp = plane_;
  plane_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::PlaneGeom* Geometry::_internal_mutable_plane() {
  _has_bits_[0] |= 0x00000004u;
  if (plane_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::PlaneGeom>(GetArenaNoVirtual());
    plane_ = p;
  }
  return plane_;
}
inline ::gazebo::msgs::PlaneGeom* Geometry::mutable_plane() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Geometry.plane)
  return _internal_mutable_plane();
}
inline void Geometry::set_allocated_plane(::gazebo::msgs::PlaneGeom* plane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(plane_);
  }
  if (plane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plane, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  plane_ = plane;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Geometry.plane)
}

// optional .gazebo.msgs.SphereGeom sphere = 5;
inline bool Geometry::_internal_has_sphere() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || sphere_ != nullptr);
  return value;
}
inline bool Geometry::has_sphere() const {
  return _internal_has_sphere();
}
inline const ::gazebo::msgs::SphereGeom& Geometry::_internal_sphere() const {
  const ::gazebo::msgs::SphereGeom* p = sphere_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::SphereGeom*>(
      &::gazebo::msgs::_SphereGeom_default_instance_);
}
inline const ::gazebo::msgs::SphereGeom& Geometry::sphere() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Geometry.sphere)
  return _internal_sphere();
}
inline ::gazebo::msgs::SphereGeom* Geometry::release_sphere() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Geometry.sphere)
  _has_bits_[0] &= ~0x00000008u;
  ::gazebo::msgs::SphereGeom* temp = sphere_;
  sphere_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::SphereGeom* Geometry::_internal_mutable_sphere() {
  _has_bits_[0] |= 0x00000008u;
  if (sphere_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::SphereGeom>(GetArenaNoVirtual());
    sphere_ = p;
  }
  return sphere_;
}
inline ::gazebo::msgs::SphereGeom* Geometry::mutable_sphere() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Geometry.sphere)
  return _internal_mutable_sphere();
}
inline void Geometry::set_allocated_sphere(::gazebo::msgs::SphereGeom* sphere) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sphere_);
  }
  if (sphere) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sphere = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sphere, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sphere_ = sphere;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Geometry.sphere)
}

// optional .gazebo.msgs.ImageGeom image = 6;
inline bool Geometry::_internal_has_image() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || image_ != nullptr);
  return value;
}
inline bool Geometry::has_image() const {
  return _internal_has_image();
}
inline const ::gazebo::msgs::ImageGeom& Geometry::_internal_image() const {
  const ::gazebo::msgs::ImageGeom* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::ImageGeom*>(
      &::gazebo::msgs::_ImageGeom_default_instance_);
}
inline const ::gazebo::msgs::ImageGeom& Geometry::image() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Geometry.image)
  return _internal_image();
}
inline ::gazebo::msgs::ImageGeom* Geometry::release_image() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Geometry.image)
  _has_bits_[0] &= ~0x00000010u;
  ::gazebo::msgs::ImageGeom* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::ImageGeom* Geometry::_internal_mutable_image() {
  _has_bits_[0] |= 0x00000010u;
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::ImageGeom>(GetArenaNoVirtual());
    image_ = p;
  }
  return image_;
}
inline ::gazebo::msgs::ImageGeom* Geometry::mutable_image() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Geometry.image)
  return _internal_mutable_image();
}
inline void Geometry::set_allocated_image(::gazebo::msgs::ImageGeom* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Geometry.image)
}

// optional .gazebo.msgs.HeightmapGeom heightmap = 7;
inline bool Geometry::_internal_has_heightmap() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || heightmap_ != nullptr);
  return value;
}
inline bool Geometry::has_heightmap() const {
  return _internal_has_heightmap();
}
inline const ::gazebo::msgs::HeightmapGeom& Geometry::_internal_heightmap() const {
  const ::gazebo::msgs::HeightmapGeom* p = heightmap_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::HeightmapGeom*>(
      &::gazebo::msgs::_HeightmapGeom_default_instance_);
}
inline const ::gazebo::msgs::HeightmapGeom& Geometry::heightmap() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Geometry.heightmap)
  return _internal_heightmap();
}
inline ::gazebo::msgs::HeightmapGeom* Geometry::release_heightmap() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Geometry.heightmap)
  _has_bits_[0] &= ~0x00000020u;
  ::gazebo::msgs::HeightmapGeom* temp = heightmap_;
  heightmap_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::HeightmapGeom* Geometry::_internal_mutable_heightmap() {
  _has_bits_[0] |= 0x00000020u;
  if (heightmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::HeightmapGeom>(GetArenaNoVirtual());
    heightmap_ = p;
  }
  return heightmap_;
}
inline ::gazebo::msgs::HeightmapGeom* Geometry::mutable_heightmap() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Geometry.heightmap)
  return _internal_mutable_heightmap();
}
inline void Geometry::set_allocated_heightmap(::gazebo::msgs::HeightmapGeom* heightmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heightmap_);
  }
  if (heightmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      heightmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heightmap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  heightmap_ = heightmap;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Geometry.heightmap)
}

// optional .gazebo.msgs.MeshGeom mesh = 8;
inline bool Geometry::_internal_has_mesh() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || mesh_ != nullptr);
  return value;
}
inline bool Geometry::has_mesh() const {
  return _internal_has_mesh();
}
inline const ::gazebo::msgs::MeshGeom& Geometry::_internal_mesh() const {
  const ::gazebo::msgs::MeshGeom* p = mesh_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::MeshGeom*>(
      &::gazebo::msgs::_MeshGeom_default_instance_);
}
inline const ::gazebo::msgs::MeshGeom& Geometry::mesh() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Geometry.mesh)
  return _internal_mesh();
}
inline ::gazebo::msgs::MeshGeom* Geometry::release_mesh() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Geometry.mesh)
  _has_bits_[0] &= ~0x00000040u;
  ::gazebo::msgs::MeshGeom* temp = mesh_;
  mesh_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::MeshGeom* Geometry::_internal_mutable_mesh() {
  _has_bits_[0] |= 0x00000040u;
  if (mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::MeshGeom>(GetArenaNoVirtual());
    mesh_ = p;
  }
  return mesh_;
}
inline ::gazebo::msgs::MeshGeom* Geometry::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Geometry.mesh)
  return _internal_mutable_mesh();
}
inline void Geometry::set_allocated_mesh(::gazebo::msgs::MeshGeom* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_);
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Geometry.mesh)
}

// repeated .gazebo.msgs.Vector3d points = 9;
inline int Geometry::_internal_points_size() const {
  return points_.size();
}
inline int Geometry::points_size() const {
  return _internal_points_size();
}
inline ::gazebo::msgs::Vector3d* Geometry::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Geometry.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Vector3d >*
Geometry::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.Geometry.points)
  return &points_;
}
inline const ::gazebo::msgs::Vector3d& Geometry::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::gazebo::msgs::Vector3d& Geometry::points(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Geometry.points)
  return _internal_points(index);
}
inline ::gazebo::msgs::Vector3d* Geometry::_internal_add_points() {
  return points_.Add();
}
inline ::gazebo::msgs::Vector3d* Geometry::add_points() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.Geometry.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Vector3d >&
Geometry::points() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.Geometry.points)
  return points_;
}

// repeated .gazebo.msgs.Polyline polyline = 10;
inline int Geometry::_internal_polyline_size() const {
  return polyline_.size();
}
inline int Geometry::polyline_size() const {
  return _internal_polyline_size();
}
inline ::gazebo::msgs::Polyline* Geometry::mutable_polyline(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Geometry.polyline)
  return polyline_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Polyline >*
Geometry::mutable_polyline() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.Geometry.polyline)
  return &polyline_;
}
inline const ::gazebo::msgs::Polyline& Geometry::_internal_polyline(int index) const {
  return polyline_.Get(index);
}
inline const ::gazebo::msgs::Polyline& Geometry::polyline(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Geometry.polyline)
  return _internal_polyline(index);
}
inline ::gazebo::msgs::Polyline* Geometry::_internal_add_polyline() {
  return polyline_.Add();
}
inline ::gazebo::msgs::Polyline* Geometry::add_polyline() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.Geometry.polyline)
  return _internal_add_polyline();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Polyline >&
Geometry::polyline() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.Geometry.polyline)
  return polyline_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::Geometry> GeometryPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gazebo::msgs::Geometry_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gazebo::msgs::Geometry_Type>() {
  return ::gazebo::msgs::Geometry_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

typedef const boost::shared_ptr<gazebo::msgs::Geometry const> ConstGeometryPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_geometry_2eproto
