// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: surface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_surface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_surface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "friction.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_surface_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_surface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_surface_2eproto;
namespace gazebo {
namespace msgs {
class Surface;
class SurfaceDefaultTypeInternal;
GZ_MSGS_VISIBLE extern SurfaceDefaultTypeInternal _Surface_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::Surface* Arena::CreateMaybeMessage<::gazebo::msgs::Surface>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE Surface :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.Surface) */ {
 public:
  Surface();
  virtual ~Surface();

  Surface(const Surface& from);
  Surface(Surface&& from) noexcept
    : Surface() {
    *this = ::std::move(from);
  }

  inline Surface& operator=(const Surface& from) {
    CopyFrom(from);
    return *this;
  }
  inline Surface& operator=(Surface&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Surface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Surface* internal_default_instance() {
    return reinterpret_cast<const Surface*>(
               &_Surface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Surface& a, Surface& b) {
    a.Swap(&b);
  }
  inline void Swap(Surface* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Surface* New() const final {
    return CreateMaybeMessage<Surface>(nullptr);
  }

  Surface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Surface>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Surface& from);
  void MergeFrom(const Surface& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Surface* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.Surface";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_surface_2eproto);
    return ::descriptor_table_surface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrictionFieldNumber = 1,
    kRestitutionCoefficientFieldNumber = 2,
    kBounceThresholdFieldNumber = 3,
    kSoftCfmFieldNumber = 4,
    kSoftErpFieldNumber = 5,
    kKpFieldNumber = 6,
    kKdFieldNumber = 7,
    kMaxVelFieldNumber = 8,
    kMinDepthFieldNumber = 9,
    kCollideWithoutContactFieldNumber = 10,
    kCollideWithoutContactBitmaskFieldNumber = 11,
    kElasticModulusFieldNumber = 13,
    kCollideBitmaskFieldNumber = 12,
  };
  // optional .gazebo.msgs.Friction friction = 1;
  bool has_friction() const;
  private:
  bool _internal_has_friction() const;
  public:
  void clear_friction();
  const ::gazebo::msgs::Friction& friction() const;
  ::gazebo::msgs::Friction* release_friction();
  ::gazebo::msgs::Friction* mutable_friction();
  void set_allocated_friction(::gazebo::msgs::Friction* friction);
  private:
  const ::gazebo::msgs::Friction& _internal_friction() const;
  ::gazebo::msgs::Friction* _internal_mutable_friction();
  public:

  // optional double restitution_coefficient = 2;
  bool has_restitution_coefficient() const;
  private:
  bool _internal_has_restitution_coefficient() const;
  public:
  void clear_restitution_coefficient();
  double restitution_coefficient() const;
  void set_restitution_coefficient(double value);
  private:
  double _internal_restitution_coefficient() const;
  void _internal_set_restitution_coefficient(double value);
  public:

  // optional double bounce_threshold = 3;
  bool has_bounce_threshold() const;
  private:
  bool _internal_has_bounce_threshold() const;
  public:
  void clear_bounce_threshold();
  double bounce_threshold() const;
  void set_bounce_threshold(double value);
  private:
  double _internal_bounce_threshold() const;
  void _internal_set_bounce_threshold(double value);
  public:

  // optional double soft_cfm = 4;
  bool has_soft_cfm() const;
  private:
  bool _internal_has_soft_cfm() const;
  public:
  void clear_soft_cfm();
  double soft_cfm() const;
  void set_soft_cfm(double value);
  private:
  double _internal_soft_cfm() const;
  void _internal_set_soft_cfm(double value);
  public:

  // optional double soft_erp = 5;
  bool has_soft_erp() const;
  private:
  bool _internal_has_soft_erp() const;
  public:
  void clear_soft_erp();
  double soft_erp() const;
  void set_soft_erp(double value);
  private:
  double _internal_soft_erp() const;
  void _internal_set_soft_erp(double value);
  public:

  // optional double kp = 6;
  bool has_kp() const;
  private:
  bool _internal_has_kp() const;
  public:
  void clear_kp();
  double kp() const;
  void set_kp(double value);
  private:
  double _internal_kp() const;
  void _internal_set_kp(double value);
  public:

  // optional double kd = 7;
  bool has_kd() const;
  private:
  bool _internal_has_kd() const;
  public:
  void clear_kd();
  double kd() const;
  void set_kd(double value);
  private:
  double _internal_kd() const;
  void _internal_set_kd(double value);
  public:

  // optional double max_vel = 8;
  bool has_max_vel() const;
  private:
  bool _internal_has_max_vel() const;
  public:
  void clear_max_vel();
  double max_vel() const;
  void set_max_vel(double value);
  private:
  double _internal_max_vel() const;
  void _internal_set_max_vel(double value);
  public:

  // optional double min_depth = 9;
  bool has_min_depth() const;
  private:
  bool _internal_has_min_depth() const;
  public:
  void clear_min_depth();
  double min_depth() const;
  void set_min_depth(double value);
  private:
  double _internal_min_depth() const;
  void _internal_set_min_depth(double value);
  public:

  // optional bool collide_without_contact = 10;
  bool has_collide_without_contact() const;
  private:
  bool _internal_has_collide_without_contact() const;
  public:
  void clear_collide_without_contact();
  bool collide_without_contact() const;
  void set_collide_without_contact(bool value);
  private:
  bool _internal_collide_without_contact() const;
  void _internal_set_collide_without_contact(bool value);
  public:

  // optional uint32 collide_without_contact_bitmask = 11;
  bool has_collide_without_contact_bitmask() const;
  private:
  bool _internal_has_collide_without_contact_bitmask() const;
  public:
  void clear_collide_without_contact_bitmask();
  ::PROTOBUF_NAMESPACE_ID::uint32 collide_without_contact_bitmask() const;
  void set_collide_without_contact_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_collide_without_contact_bitmask() const;
  void _internal_set_collide_without_contact_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double elastic_modulus = 13;
  bool has_elastic_modulus() const;
  private:
  bool _internal_has_elastic_modulus() const;
  public:
  void clear_elastic_modulus();
  double elastic_modulus() const;
  void set_elastic_modulus(double value);
  private:
  double _internal_elastic_modulus() const;
  void _internal_set_elastic_modulus(double value);
  public:

  // optional uint32 collide_bitmask = 12;
  bool has_collide_bitmask() const;
  private:
  bool _internal_has_collide_bitmask() const;
  public:
  void clear_collide_bitmask();
  ::PROTOBUF_NAMESPACE_ID::uint32 collide_bitmask() const;
  void set_collide_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_collide_bitmask() const;
  void _internal_set_collide_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Surface)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Friction* friction_;
  double restitution_coefficient_;
  double bounce_threshold_;
  double soft_cfm_;
  double soft_erp_;
  double kp_;
  double kd_;
  double max_vel_;
  double min_depth_;
  bool collide_without_contact_;
  ::PROTOBUF_NAMESPACE_ID::uint32 collide_without_contact_bitmask_;
  double elastic_modulus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 collide_bitmask_;
  friend struct ::TableStruct_surface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Surface

// optional .gazebo.msgs.Friction friction = 1;
inline bool Surface::_internal_has_friction() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || friction_ != nullptr);
  return value;
}
inline bool Surface::has_friction() const {
  return _internal_has_friction();
}
inline const ::gazebo::msgs::Friction& Surface::_internal_friction() const {
  const ::gazebo::msgs::Friction* p = friction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Friction*>(
      &::gazebo::msgs::_Friction_default_instance_);
}
inline const ::gazebo::msgs::Friction& Surface::friction() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Surface.friction)
  return _internal_friction();
}
inline ::gazebo::msgs::Friction* Surface::release_friction() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Surface.friction)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::Friction* temp = friction_;
  friction_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Friction* Surface::_internal_mutable_friction() {
  _has_bits_[0] |= 0x00000001u;
  if (friction_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Friction>(GetArenaNoVirtual());
    friction_ = p;
  }
  return friction_;
}
inline ::gazebo::msgs::Friction* Surface::mutable_friction() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Surface.friction)
  return _internal_mutable_friction();
}
inline void Surface::set_allocated_friction(::gazebo::msgs::Friction* friction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(friction_);
  }
  if (friction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      friction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  friction_ = friction;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Surface.friction)
}

// optional double restitution_coefficient = 2;
inline bool Surface::_internal_has_restitution_coefficient() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Surface::has_restitution_coefficient() const {
  return _internal_has_restitution_coefficient();
}
inline void Surface::clear_restitution_coefficient() {
  restitution_coefficient_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Surface::_internal_restitution_coefficient() const {
  return restitution_coefficient_;
}
inline double Surface::restitution_coefficient() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Surface.restitution_coefficient)
  return _internal_restitution_coefficient();
}
inline void Surface::_internal_set_restitution_coefficient(double value) {
  _has_bits_[0] |= 0x00000002u;
  restitution_coefficient_ = value;
}
inline void Surface::set_restitution_coefficient(double value) {
  _internal_set_restitution_coefficient(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Surface.restitution_coefficient)
}

// optional double bounce_threshold = 3;
inline bool Surface::_internal_has_bounce_threshold() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Surface::has_bounce_threshold() const {
  return _internal_has_bounce_threshold();
}
inline void Surface::clear_bounce_threshold() {
  bounce_threshold_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Surface::_internal_bounce_threshold() const {
  return bounce_threshold_;
}
inline double Surface::bounce_threshold() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Surface.bounce_threshold)
  return _internal_bounce_threshold();
}
inline void Surface::_internal_set_bounce_threshold(double value) {
  _has_bits_[0] |= 0x00000004u;
  bounce_threshold_ = value;
}
inline void Surface::set_bounce_threshold(double value) {
  _internal_set_bounce_threshold(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Surface.bounce_threshold)
}

// optional double soft_cfm = 4;
inline bool Surface::_internal_has_soft_cfm() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Surface::has_soft_cfm() const {
  return _internal_has_soft_cfm();
}
inline void Surface::clear_soft_cfm() {
  soft_cfm_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Surface::_internal_soft_cfm() const {
  return soft_cfm_;
}
inline double Surface::soft_cfm() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Surface.soft_cfm)
  return _internal_soft_cfm();
}
inline void Surface::_internal_set_soft_cfm(double value) {
  _has_bits_[0] |= 0x00000008u;
  soft_cfm_ = value;
}
inline void Surface::set_soft_cfm(double value) {
  _internal_set_soft_cfm(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Surface.soft_cfm)
}

// optional double soft_erp = 5;
inline bool Surface::_internal_has_soft_erp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Surface::has_soft_erp() const {
  return _internal_has_soft_erp();
}
inline void Surface::clear_soft_erp() {
  soft_erp_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Surface::_internal_soft_erp() const {
  return soft_erp_;
}
inline double Surface::soft_erp() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Surface.soft_erp)
  return _internal_soft_erp();
}
inline void Surface::_internal_set_soft_erp(double value) {
  _has_bits_[0] |= 0x00000010u;
  soft_erp_ = value;
}
inline void Surface::set_soft_erp(double value) {
  _internal_set_soft_erp(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Surface.soft_erp)
}

// optional double kp = 6;
inline bool Surface::_internal_has_kp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Surface::has_kp() const {
  return _internal_has_kp();
}
inline void Surface::clear_kp() {
  kp_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Surface::_internal_kp() const {
  return kp_;
}
inline double Surface::kp() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Surface.kp)
  return _internal_kp();
}
inline void Surface::_internal_set_kp(double value) {
  _has_bits_[0] |= 0x00000020u;
  kp_ = value;
}
inline void Surface::set_kp(double value) {
  _internal_set_kp(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Surface.kp)
}

// optional double kd = 7;
inline bool Surface::_internal_has_kd() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Surface::has_kd() const {
  return _internal_has_kd();
}
inline void Surface::clear_kd() {
  kd_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Surface::_internal_kd() const {
  return kd_;
}
inline double Surface::kd() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Surface.kd)
  return _internal_kd();
}
inline void Surface::_internal_set_kd(double value) {
  _has_bits_[0] |= 0x00000040u;
  kd_ = value;
}
inline void Surface::set_kd(double value) {
  _internal_set_kd(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Surface.kd)
}

// optional double max_vel = 8;
inline bool Surface::_internal_has_max_vel() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Surface::has_max_vel() const {
  return _internal_has_max_vel();
}
inline void Surface::clear_max_vel() {
  max_vel_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Surface::_internal_max_vel() const {
  return max_vel_;
}
inline double Surface::max_vel() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Surface.max_vel)
  return _internal_max_vel();
}
inline void Surface::_internal_set_max_vel(double value) {
  _has_bits_[0] |= 0x00000080u;
  max_vel_ = value;
}
inline void Surface::set_max_vel(double value) {
  _internal_set_max_vel(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Surface.max_vel)
}

// optional double min_depth = 9;
inline bool Surface::_internal_has_min_depth() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Surface::has_min_depth() const {
  return _internal_has_min_depth();
}
inline void Surface::clear_min_depth() {
  min_depth_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Surface::_internal_min_depth() const {
  return min_depth_;
}
inline double Surface::min_depth() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Surface.min_depth)
  return _internal_min_depth();
}
inline void Surface::_internal_set_min_depth(double value) {
  _has_bits_[0] |= 0x00000100u;
  min_depth_ = value;
}
inline void Surface::set_min_depth(double value) {
  _internal_set_min_depth(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Surface.min_depth)
}

// optional bool collide_without_contact = 10;
inline bool Surface::_internal_has_collide_without_contact() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Surface::has_collide_without_contact() const {
  return _internal_has_collide_without_contact();
}
inline void Surface::clear_collide_without_contact() {
  collide_without_contact_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Surface::_internal_collide_without_contact() const {
  return collide_without_contact_;
}
inline bool Surface::collide_without_contact() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Surface.collide_without_contact)
  return _internal_collide_without_contact();
}
inline void Surface::_internal_set_collide_without_contact(bool value) {
  _has_bits_[0] |= 0x00000200u;
  collide_without_contact_ = value;
}
inline void Surface::set_collide_without_contact(bool value) {
  _internal_set_collide_without_contact(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Surface.collide_without_contact)
}

// optional uint32 collide_without_contact_bitmask = 11;
inline bool Surface::_internal_has_collide_without_contact_bitmask() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Surface::has_collide_without_contact_bitmask() const {
  return _internal_has_collide_without_contact_bitmask();
}
inline void Surface::clear_collide_without_contact_bitmask() {
  collide_without_contact_bitmask_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Surface::_internal_collide_without_contact_bitmask() const {
  return collide_without_contact_bitmask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Surface::collide_without_contact_bitmask() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Surface.collide_without_contact_bitmask)
  return _internal_collide_without_contact_bitmask();
}
inline void Surface::_internal_set_collide_without_contact_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  collide_without_contact_bitmask_ = value;
}
inline void Surface::set_collide_without_contact_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_collide_without_contact_bitmask(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Surface.collide_without_contact_bitmask)
}

// optional uint32 collide_bitmask = 12;
inline bool Surface::_internal_has_collide_bitmask() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Surface::has_collide_bitmask() const {
  return _internal_has_collide_bitmask();
}
inline void Surface::clear_collide_bitmask() {
  collide_bitmask_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Surface::_internal_collide_bitmask() const {
  return collide_bitmask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Surface::collide_bitmask() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Surface.collide_bitmask)
  return _internal_collide_bitmask();
}
inline void Surface::_internal_set_collide_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  collide_bitmask_ = value;
}
inline void Surface::set_collide_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_collide_bitmask(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Surface.collide_bitmask)
}

// optional double elastic_modulus = 13;
inline bool Surface::_internal_has_elastic_modulus() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Surface::has_elastic_modulus() const {
  return _internal_has_elastic_modulus();
}
inline void Surface::clear_elastic_modulus() {
  elastic_modulus_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double Surface::_internal_elastic_modulus() const {
  return elastic_modulus_;
}
inline double Surface::elastic_modulus() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Surface.elastic_modulus)
  return _internal_elastic_modulus();
}
inline void Surface::_internal_set_elastic_modulus(double value) {
  _has_bits_[0] |= 0x00000800u;
  elastic_modulus_ = value;
}
inline void Surface::set_elastic_modulus(double value) {
  _internal_set_elastic_modulus(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Surface.elastic_modulus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::Surface> SurfacePtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::Surface const> ConstSurfacePtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_surface_2eproto
