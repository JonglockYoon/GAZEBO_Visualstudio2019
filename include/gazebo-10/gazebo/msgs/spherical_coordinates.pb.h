// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spherical_coordinates.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spherical_5fcoordinates_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spherical_5fcoordinates_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spherical_5fcoordinates_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_spherical_5fcoordinates_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spherical_5fcoordinates_2eproto;
namespace gazebo {
namespace msgs {
class SphericalCoordinates;
class SphericalCoordinatesDefaultTypeInternal;
GZ_MSGS_VISIBLE extern SphericalCoordinatesDefaultTypeInternal _SphericalCoordinates_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::SphericalCoordinates* Arena::CreateMaybeMessage<::gazebo::msgs::SphericalCoordinates>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

enum SphericalCoordinates_SurfaceModel : int {
  SphericalCoordinates_SurfaceModel_EARTH_WGS84 = 1
};
GZ_MSGS_VISIBLE bool SphericalCoordinates_SurfaceModel_IsValid(int value);
constexpr SphericalCoordinates_SurfaceModel SphericalCoordinates_SurfaceModel_SurfaceModel_MIN = SphericalCoordinates_SurfaceModel_EARTH_WGS84;
constexpr SphericalCoordinates_SurfaceModel SphericalCoordinates_SurfaceModel_SurfaceModel_MAX = SphericalCoordinates_SurfaceModel_EARTH_WGS84;
constexpr int SphericalCoordinates_SurfaceModel_SurfaceModel_ARRAYSIZE = SphericalCoordinates_SurfaceModel_SurfaceModel_MAX + 1;

GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SphericalCoordinates_SurfaceModel_descriptor();
template<typename T>
inline const std::string& SphericalCoordinates_SurfaceModel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SphericalCoordinates_SurfaceModel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SphericalCoordinates_SurfaceModel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SphericalCoordinates_SurfaceModel_descriptor(), enum_t_value);
}
inline bool SphericalCoordinates_SurfaceModel_Parse(
    const std::string& name, SphericalCoordinates_SurfaceModel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SphericalCoordinates_SurfaceModel>(
    SphericalCoordinates_SurfaceModel_descriptor(), name, value);
}
// ===================================================================

class GZ_MSGS_VISIBLE SphericalCoordinates :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.SphericalCoordinates) */ {
 public:
  SphericalCoordinates();
  virtual ~SphericalCoordinates();

  SphericalCoordinates(const SphericalCoordinates& from);
  SphericalCoordinates(SphericalCoordinates&& from) noexcept
    : SphericalCoordinates() {
    *this = ::std::move(from);
  }

  inline SphericalCoordinates& operator=(const SphericalCoordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline SphericalCoordinates& operator=(SphericalCoordinates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SphericalCoordinates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SphericalCoordinates* internal_default_instance() {
    return reinterpret_cast<const SphericalCoordinates*>(
               &_SphericalCoordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SphericalCoordinates& a, SphericalCoordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(SphericalCoordinates* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SphericalCoordinates* New() const final {
    return CreateMaybeMessage<SphericalCoordinates>(nullptr);
  }

  SphericalCoordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SphericalCoordinates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SphericalCoordinates& from);
  void MergeFrom(const SphericalCoordinates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SphericalCoordinates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.SphericalCoordinates";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spherical_5fcoordinates_2eproto);
    return ::descriptor_table_spherical_5fcoordinates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SphericalCoordinates_SurfaceModel SurfaceModel;
  static constexpr SurfaceModel EARTH_WGS84 =
    SphericalCoordinates_SurfaceModel_EARTH_WGS84;
  static inline bool SurfaceModel_IsValid(int value) {
    return SphericalCoordinates_SurfaceModel_IsValid(value);
  }
  static constexpr SurfaceModel SurfaceModel_MIN =
    SphericalCoordinates_SurfaceModel_SurfaceModel_MIN;
  static constexpr SurfaceModel SurfaceModel_MAX =
    SphericalCoordinates_SurfaceModel_SurfaceModel_MAX;
  static constexpr int SurfaceModel_ARRAYSIZE =
    SphericalCoordinates_SurfaceModel_SurfaceModel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SurfaceModel_descriptor() {
    return SphericalCoordinates_SurfaceModel_descriptor();
  }
  template<typename T>
  static inline const std::string& SurfaceModel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SurfaceModel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SurfaceModel_Name.");
    return SphericalCoordinates_SurfaceModel_Name(enum_t_value);
  }
  static inline bool SurfaceModel_Parse(const std::string& name,
      SurfaceModel* value) {
    return SphericalCoordinates_SurfaceModel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 2,
    kLongitudeDegFieldNumber = 3,
    kElevationFieldNumber = 4,
    kHeadingDegFieldNumber = 5,
    kSurfaceModelFieldNumber = 1,
  };
  // required double latitude_deg = 2;
  bool has_latitude_deg() const;
  private:
  bool _internal_has_latitude_deg() const;
  public:
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // required double longitude_deg = 3;
  bool has_longitude_deg() const;
  private:
  bool _internal_has_longitude_deg() const;
  public:
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // required double elevation = 4;
  bool has_elevation() const;
  private:
  bool _internal_has_elevation() const;
  public:
  void clear_elevation();
  double elevation() const;
  void set_elevation(double value);
  private:
  double _internal_elevation() const;
  void _internal_set_elevation(double value);
  public:

  // required double heading_deg = 5;
  bool has_heading_deg() const;
  private:
  bool _internal_has_heading_deg() const;
  public:
  void clear_heading_deg();
  double heading_deg() const;
  void set_heading_deg(double value);
  private:
  double _internal_heading_deg() const;
  void _internal_set_heading_deg(double value);
  public:

  // required .gazebo.msgs.SphericalCoordinates.SurfaceModel surface_model = 1;
  bool has_surface_model() const;
  private:
  bool _internal_has_surface_model() const;
  public:
  void clear_surface_model();
  ::gazebo::msgs::SphericalCoordinates_SurfaceModel surface_model() const;
  void set_surface_model(::gazebo::msgs::SphericalCoordinates_SurfaceModel value);
  private:
  ::gazebo::msgs::SphericalCoordinates_SurfaceModel _internal_surface_model() const;
  void _internal_set_surface_model(::gazebo::msgs::SphericalCoordinates_SurfaceModel value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.SphericalCoordinates)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double latitude_deg_;
  double longitude_deg_;
  double elevation_;
  double heading_deg_;
  int surface_model_;
  friend struct ::TableStruct_spherical_5fcoordinates_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SphericalCoordinates

// required .gazebo.msgs.SphericalCoordinates.SurfaceModel surface_model = 1;
inline bool SphericalCoordinates::_internal_has_surface_model() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SphericalCoordinates::has_surface_model() const {
  return _internal_has_surface_model();
}
inline void SphericalCoordinates::clear_surface_model() {
  surface_model_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::gazebo::msgs::SphericalCoordinates_SurfaceModel SphericalCoordinates::_internal_surface_model() const {
  return static_cast< ::gazebo::msgs::SphericalCoordinates_SurfaceModel >(surface_model_);
}
inline ::gazebo::msgs::SphericalCoordinates_SurfaceModel SphericalCoordinates::surface_model() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.SphericalCoordinates.surface_model)
  return _internal_surface_model();
}
inline void SphericalCoordinates::_internal_set_surface_model(::gazebo::msgs::SphericalCoordinates_SurfaceModel value) {
  assert(::gazebo::msgs::SphericalCoordinates_SurfaceModel_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  surface_model_ = value;
}
inline void SphericalCoordinates::set_surface_model(::gazebo::msgs::SphericalCoordinates_SurfaceModel value) {
  _internal_set_surface_model(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.SphericalCoordinates.surface_model)
}

// required double latitude_deg = 2;
inline bool SphericalCoordinates::_internal_has_latitude_deg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SphericalCoordinates::has_latitude_deg() const {
  return _internal_has_latitude_deg();
}
inline void SphericalCoordinates::clear_latitude_deg() {
  latitude_deg_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SphericalCoordinates::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double SphericalCoordinates::latitude_deg() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.SphericalCoordinates.latitude_deg)
  return _internal_latitude_deg();
}
inline void SphericalCoordinates::_internal_set_latitude_deg(double value) {
  _has_bits_[0] |= 0x00000001u;
  latitude_deg_ = value;
}
inline void SphericalCoordinates::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.SphericalCoordinates.latitude_deg)
}

// required double longitude_deg = 3;
inline bool SphericalCoordinates::_internal_has_longitude_deg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SphericalCoordinates::has_longitude_deg() const {
  return _internal_has_longitude_deg();
}
inline void SphericalCoordinates::clear_longitude_deg() {
  longitude_deg_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SphericalCoordinates::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double SphericalCoordinates::longitude_deg() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.SphericalCoordinates.longitude_deg)
  return _internal_longitude_deg();
}
inline void SphericalCoordinates::_internal_set_longitude_deg(double value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_deg_ = value;
}
inline void SphericalCoordinates::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.SphericalCoordinates.longitude_deg)
}

// required double elevation = 4;
inline bool SphericalCoordinates::_internal_has_elevation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SphericalCoordinates::has_elevation() const {
  return _internal_has_elevation();
}
inline void SphericalCoordinates::clear_elevation() {
  elevation_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SphericalCoordinates::_internal_elevation() const {
  return elevation_;
}
inline double SphericalCoordinates::elevation() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.SphericalCoordinates.elevation)
  return _internal_elevation();
}
inline void SphericalCoordinates::_internal_set_elevation(double value) {
  _has_bits_[0] |= 0x00000004u;
  elevation_ = value;
}
inline void SphericalCoordinates::set_elevation(double value) {
  _internal_set_elevation(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.SphericalCoordinates.elevation)
}

// required double heading_deg = 5;
inline bool SphericalCoordinates::_internal_has_heading_deg() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SphericalCoordinates::has_heading_deg() const {
  return _internal_has_heading_deg();
}
inline void SphericalCoordinates::clear_heading_deg() {
  heading_deg_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SphericalCoordinates::_internal_heading_deg() const {
  return heading_deg_;
}
inline double SphericalCoordinates::heading_deg() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.SphericalCoordinates.heading_deg)
  return _internal_heading_deg();
}
inline void SphericalCoordinates::_internal_set_heading_deg(double value) {
  _has_bits_[0] |= 0x00000008u;
  heading_deg_ = value;
}
inline void SphericalCoordinates::set_heading_deg(double value) {
  _internal_set_heading_deg(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.SphericalCoordinates.heading_deg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::SphericalCoordinates> SphericalCoordinatesPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gazebo::msgs::SphericalCoordinates_SurfaceModel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gazebo::msgs::SphericalCoordinates_SurfaceModel>() {
  return ::gazebo::msgs::SphericalCoordinates_SurfaceModel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

typedef const boost::shared_ptr<gazebo::msgs::SphericalCoordinates const> ConstSphericalCoordinatesPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spherical_5fcoordinates_2eproto
