// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_cmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_camera_5fcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_camera_5fcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_camera_5fcmd_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_camera_5fcmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camera_5fcmd_2eproto;
namespace gazebo {
namespace msgs {
class CameraCmd;
class CameraCmdDefaultTypeInternal;
GZ_MSGS_VISIBLE extern CameraCmdDefaultTypeInternal _CameraCmd_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::CameraCmd* Arena::CreateMaybeMessage<::gazebo::msgs::CameraCmd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE CameraCmd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.CameraCmd) */ {
 public:
  CameraCmd();
  virtual ~CameraCmd();

  CameraCmd(const CameraCmd& from);
  CameraCmd(CameraCmd&& from) noexcept
    : CameraCmd() {
    *this = ::std::move(from);
  }

  inline CameraCmd& operator=(const CameraCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraCmd& operator=(CameraCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraCmd* internal_default_instance() {
    return reinterpret_cast<const CameraCmd*>(
               &_CameraCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraCmd& a, CameraCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraCmd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraCmd* New() const final {
    return CreateMaybeMessage<CameraCmd>(nullptr);
  }

  CameraCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraCmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraCmd& from);
  void MergeFrom(const CameraCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.CameraCmd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_5fcmd_2eproto);
    return ::descriptor_table_camera_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFollowModelFieldNumber = 1,
  };
  // optional string follow_model = 1;
  bool has_follow_model() const;
  private:
  bool _internal_has_follow_model() const;
  public:
  void clear_follow_model();
  const std::string& follow_model() const;
  void set_follow_model(const std::string& value);
  void set_follow_model(std::string&& value);
  void set_follow_model(const char* value);
  void set_follow_model(const char* value, size_t size);
  std::string* mutable_follow_model();
  std::string* release_follow_model();
  void set_allocated_follow_model(std::string* follow_model);
  private:
  const std::string& _internal_follow_model() const;
  void _internal_set_follow_model(const std::string& value);
  std::string* _internal_mutable_follow_model();
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.CameraCmd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr follow_model_;
  friend struct ::TableStruct_camera_5fcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraCmd

// optional string follow_model = 1;
inline bool CameraCmd::_internal_has_follow_model() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraCmd::has_follow_model() const {
  return _internal_has_follow_model();
}
inline void CameraCmd::clear_follow_model() {
  follow_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraCmd::follow_model() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraCmd.follow_model)
  return _internal_follow_model();
}
inline void CameraCmd::set_follow_model(const std::string& value) {
  _internal_set_follow_model(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.CameraCmd.follow_model)
}
inline std::string* CameraCmd::mutable_follow_model() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.CameraCmd.follow_model)
  return _internal_mutable_follow_model();
}
inline const std::string& CameraCmd::_internal_follow_model() const {
  return follow_model_.GetNoArena();
}
inline void CameraCmd::_internal_set_follow_model(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  follow_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CameraCmd::set_follow_model(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  follow_model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.CameraCmd.follow_model)
}
inline void CameraCmd::set_follow_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  follow_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.CameraCmd.follow_model)
}
inline void CameraCmd::set_follow_model(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  follow_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.CameraCmd.follow_model)
}
inline std::string* CameraCmd::_internal_mutable_follow_model() {
  _has_bits_[0] |= 0x00000001u;
  return follow_model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraCmd::release_follow_model() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.CameraCmd.follow_model)
  if (!has_follow_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return follow_model_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraCmd::set_allocated_follow_model(std::string* follow_model) {
  if (follow_model != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  follow_model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), follow_model);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.CameraCmd.follow_model)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::CameraCmd> CameraCmdPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::CameraCmd const> ConstCameraCmdPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_camera_5fcmd_2eproto
