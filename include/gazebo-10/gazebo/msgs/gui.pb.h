// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gui_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gui_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gui_camera.pb.h"
#include "plugin.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gui_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_gui_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gui_2eproto;
namespace gazebo {
namespace msgs {
class GUI;
class GUIDefaultTypeInternal;
GZ_MSGS_VISIBLE extern GUIDefaultTypeInternal _GUI_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::GUI* Arena::CreateMaybeMessage<::gazebo::msgs::GUI>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

// ===================================================================

class GZ_MSGS_VISIBLE GUI :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.GUI) */ {
 public:
  GUI();
  virtual ~GUI();

  GUI(const GUI& from);
  GUI(GUI&& from) noexcept
    : GUI() {
    *this = ::std::move(from);
  }

  inline GUI& operator=(const GUI& from) {
    CopyFrom(from);
    return *this;
  }
  inline GUI& operator=(GUI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GUI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GUI* internal_default_instance() {
    return reinterpret_cast<const GUI*>(
               &_GUI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GUI& a, GUI& b) {
    a.Swap(&b);
  }
  inline void Swap(GUI* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GUI* New() const final {
    return CreateMaybeMessage<GUI>(nullptr);
  }

  GUI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GUI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GUI& from);
  void MergeFrom(const GUI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GUI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.GUI";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2eproto);
    return ::descriptor_table_gui_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginFieldNumber = 3,
    kCameraFieldNumber = 2,
    kFullscreenFieldNumber = 1,
  };
  // repeated .gazebo.msgs.Plugin plugin = 3;
  int plugin_size() const;
  private:
  int _internal_plugin_size() const;
  public:
  void clear_plugin();
  ::gazebo::msgs::Plugin* mutable_plugin(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Plugin >*
      mutable_plugin();
  private:
  const ::gazebo::msgs::Plugin& _internal_plugin(int index) const;
  ::gazebo::msgs::Plugin* _internal_add_plugin();
  public:
  const ::gazebo::msgs::Plugin& plugin(int index) const;
  ::gazebo::msgs::Plugin* add_plugin();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Plugin >&
      plugin() const;

  // optional .gazebo.msgs.GUICamera camera = 2;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::gazebo::msgs::GUICamera& camera() const;
  ::gazebo::msgs::GUICamera* release_camera();
  ::gazebo::msgs::GUICamera* mutable_camera();
  void set_allocated_camera(::gazebo::msgs::GUICamera* camera);
  private:
  const ::gazebo::msgs::GUICamera& _internal_camera() const;
  ::gazebo::msgs::GUICamera* _internal_mutable_camera();
  public:

  // optional bool fullscreen = 1;
  bool has_fullscreen() const;
  private:
  bool _internal_has_fullscreen() const;
  public:
  void clear_fullscreen();
  bool fullscreen() const;
  void set_fullscreen(bool value);
  private:
  bool _internal_fullscreen() const;
  void _internal_set_fullscreen(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gazebo.msgs.GUI)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Plugin > plugin_;
  ::gazebo::msgs::GUICamera* camera_;
  bool fullscreen_;
  friend struct ::TableStruct_gui_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GUI

// optional bool fullscreen = 1;
inline bool GUI::_internal_has_fullscreen() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GUI::has_fullscreen() const {
  return _internal_has_fullscreen();
}
inline void GUI::clear_fullscreen() {
  fullscreen_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GUI::_internal_fullscreen() const {
  return fullscreen_;
}
inline bool GUI::fullscreen() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.GUI.fullscreen)
  return _internal_fullscreen();
}
inline void GUI::_internal_set_fullscreen(bool value) {
  _has_bits_[0] |= 0x00000002u;
  fullscreen_ = value;
}
inline void GUI::set_fullscreen(bool value) {
  _internal_set_fullscreen(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.GUI.fullscreen)
}

// optional .gazebo.msgs.GUICamera camera = 2;
inline bool GUI::_internal_has_camera() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || camera_ != nullptr);
  return value;
}
inline bool GUI::has_camera() const {
  return _internal_has_camera();
}
inline const ::gazebo::msgs::GUICamera& GUI::_internal_camera() const {
  const ::gazebo::msgs::GUICamera* p = camera_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::GUICamera*>(
      &::gazebo::msgs::_GUICamera_default_instance_);
}
inline const ::gazebo::msgs::GUICamera& GUI::camera() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.GUI.camera)
  return _internal_camera();
}
inline ::gazebo::msgs::GUICamera* GUI::release_camera() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.GUI.camera)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::GUICamera* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::GUICamera* GUI::_internal_mutable_camera() {
  _has_bits_[0] |= 0x00000001u;
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::GUICamera>(GetArenaNoVirtual());
    camera_ = p;
  }
  return camera_;
}
inline ::gazebo::msgs::GUICamera* GUI::mutable_camera() {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.GUI.camera)
  return _internal_mutable_camera();
}
inline void GUI::set_allocated_camera(::gazebo::msgs::GUICamera* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.GUI.camera)
}

// repeated .gazebo.msgs.Plugin plugin = 3;
inline int GUI::_internal_plugin_size() const {
  return plugin_.size();
}
inline int GUI::plugin_size() const {
  return _internal_plugin_size();
}
inline ::gazebo::msgs::Plugin* GUI::mutable_plugin(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.GUI.plugin)
  return plugin_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Plugin >*
GUI::mutable_plugin() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.GUI.plugin)
  return &plugin_;
}
inline const ::gazebo::msgs::Plugin& GUI::_internal_plugin(int index) const {
  return plugin_.Get(index);
}
inline const ::gazebo::msgs::Plugin& GUI::plugin(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.GUI.plugin)
  return _internal_plugin(index);
}
inline ::gazebo::msgs::Plugin* GUI::_internal_add_plugin() {
  return plugin_.Add();
}
inline ::gazebo::msgs::Plugin* GUI::add_plugin() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.GUI.plugin)
  return _internal_add_plugin();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Plugin >&
GUI::plugin() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.GUI.plugin)
  return plugin_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef boost::shared_ptr<gazebo::msgs::GUI> GUIPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

typedef const boost::shared_ptr<gazebo::msgs::GUI const> ConstGUIPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gui_2eproto
